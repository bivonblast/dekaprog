%!PS-Adobe-3.1 EPSF-3.0
%%Title: Dekaeder.indd
%%Creator: Adobe InDesign CS (3.0)
%%For: Johan
%%CreationDate: 2/26/2010, 12:37:16 AM
%%BoundingBox: 0 0 596 842
%%HiResBoundingBox: 0 0 595.2756 841.8898
%%CropBox: 0 0 595.2756 841.8898
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%ADOBeginClientInjection: DocumentHeader "InDesignDefaultInsertProc"
%ADO_ContainsXMP NoMain
%ADOEndClientInjection: DocumentHeader "InDesignDefaultInsertProc"
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Utils 68 dict dup begin put
/bdf
{
	bind def
} bind def
/nd{
	null def
}bdf
/xdf
{
	exch def
}bdf
/ldf 
{
	load def
}bdf
/ddf
{
	put
}bdf	
/xddf
{
	3 -1 roll put
}bdf	
/xpt
{
	exch put
}bdf
/ndf
{ 
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/bdict
{
	mark
}bdf
/edict
{
	counttomark 2 idiv dup dict begin {def} repeat pop currentdict end
}def
/ps_level
	/languagelevel where{
		pop systemdict /languagelevel get exec
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr} stopped {
		-1
	}if
def
/makereadonlyarray
{
	/packedarray where{
		pop packedarray
	}{
		array astore readonly
	}ifelse
}bdf
/map_reserved_ink_name
{
	dup type /stringtype eq{
		dup /Red eq{
			pop (_Red_)
		}{
			dup /Green eq{
				pop (_Green_)
			}{
				dup /Blue eq{
					pop (_Blue_)
				}{
					dup () cvn eq{
						pop (Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def} repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash /AGMUTIL_GSTATE_do xdf /AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit /AGMUTIL_GSTATE_gy_xfer xdf cvlit /AGMUTIL_GSTATE_b_xfer xdf
		cvlit /AGMUTIL_GSTATE_g_xfer xdf cvlit /AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx {AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def} repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone /HalftoneType get AGMUTIL_GSTATE_ht /HalftoneType get ne
			{
			  mark AGMUTIL_GSTATE_ht {sethalftone} stopped cleartomark
			} if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		} ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/agm_sethalftone
{ 
	dup
	begin
		/_Data load
		/Thresholds xdf
	end
	level3 
	{ sethalftone }{
		dup /HalftoneType get 3 eq {
			sethalftone
		} {pop} ifelse
	}ifelse
} def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%) anchorsearch {pop} if
} bdf
/filter_cmyk
{	
	dup type /filetype ne{
		exch () /SubFileDecode filter
	}
	{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length /AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	] cvx
} bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
} bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type /filetype ne{
		0 () /SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict /AGMCORE_gget cvx /begin cvx
			currentdict /srcStr get /readstring cvx /pop cvx
			/dup cvx /length cvx 0 /gt cvx [
				Adobe_AGM_Utils /AGMUTIL_ndx 0 /ddf cvx
				names_index Names length currentdict /srcStr get length 1 sub {
					1 /index cvx /exch cvx /get cvx
					currentdict /dstStr get /AGMUTIL_ndx /load cvx 3 -1 /roll cvx /put cvx
					Adobe_AGM_Utils /AGMUTIL_ndx /AGMUTIL_ndx /load cvx 1 /add cvx /ddf cvx
				} for
				currentdict /dstStr get 0 /AGMUTIL_ndx /load cvx /getinterval cvx
			] cvx /if cvx
			/end cvx
		] cvx
		bind
		/exec cvx
	] cvx
	end
} bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict /DataSource get def
	/origMultipleDataSources imageDict /MultipleDataSources get def
	/origDecode imageDict /Decode get def
	/dstDataStr imageDict /Width get colorSpaceElemCnt mul string def
	/srcDataStrs [ imageDict begin
		currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse
		{
			Width Decode length 2 div mul cvi string
		} repeat
		end ] def
	imageDict /MultipleDataSources known {MultipleDataSources}{false} ifelse
	{
		/imbufCnt imageDict /DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub {
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict /DataSource get imbufIdx [ AGMUTIL_imagefile imbufs imbufIdx get /readstring cvx /pop cvx ] cvx put
		} for
		DeviceN_PS2 {
			imageDict begin
		 	/DataSource [ DataSource /devn_sep_datasource cvx ] cvx def
			/MultipleDataSources false def
			/Decode [0 1] def
			end
		} if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or {
			imageDict begin
		 	/DataSource [AGMUTIL_imagefile Decode BitsPerComponent false 1 /filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource /exec cvx] cvx def
			/Decode [0 1] def
			end
		}{
			imageDict /DataSource {AGMUTIL_imagefile imbuf readstring pop} put
		} ifelse
	} ifelse
	imageDict exch
	load exec
	imageDict /DataSource origDataSource put
	imageDict /MultipleDataSources origMultipleDataSources put
	imageDict /Decode origDecode put	
	end
} bdf
/write_image_file
{
	begin
	{ (AGMUTIL_imagefile) (w+) file } stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources {DataSource 0 get}{DataSource}ifelse type /filetype eq {
			/imbuf imbufLen string def
		}if
		1 1 Height { 
			pop
			MultipleDataSources {
			 	0 1 DataSource length 1 sub {
					DataSource type dup
					/arraytype eq {
						pop DataSource exch get exec
					}{
						/filetype eq {
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						} ifelse
					} ifelse
					AGMUTIL_imagefile exch writestring
				} for
			}{
				DataSource type dup
				/arraytype eq {
					pop DataSource exec
				}{
					/filetype eq {
						DataSource imbuf readstring pop
					}{
						DataSource
					} ifelse
				} ifelse
				AGMUTIL_imagefile exch writestring
			} ifelse
		}for
		end
		true
	}ifelse
	end
} bdf
/close_image_file
{
	AGMUTIL_imagefile closefile (AGMUTIL_imagefile) deletefile
}def
statusdict /product known userdict /AGMP_current_show known not and{
	/pstr statusdict /product get def
	pstr (HP LaserJet 2200) eq 	
	pstr (HP LaserJet 4000 Series) eq or
	pstr (HP LaserJet 4050 Series ) eq or
	pstr (HP LaserJet 8000 Series) eq or
	pstr (HP LaserJet 8100 Series) eq or
	pstr (HP LaserJet 8150 Series) eq or
	pstr (HP LaserJet 5000 Series) eq or
	pstr (HP LaserJet 5100 Series) eq or
	pstr (HP Color LaserJet 4500) eq or
	pstr (HP Color LaserJet 4600) eq or
	pstr (HP LaserJet 5Si) eq or
	pstr (HP LaserJet 1200 Series) eq or
	pstr (HP LaserJet 1300 Series) eq or
	pstr (HP LaserJet 4100 Series) eq or 
	{
 		userdict /AGMP_current_show /show load put
		userdict /show {
		  currentcolorspace 0 get
		  /Pattern eq
		  {false charpath f}
		  {AGMP_current_show} ifelse
		} put
	}if
	currentdict /pstr undef
} if
/consumeimagedata
{
	begin
	currentdict /MultipleDataSources known not
		{/MultipleDataSources false def} if
	MultipleDataSources
		{
		1 dict begin
		/flushbuffer Width cvi string def
		1 1 Height cvi
			{
			pop
			0 1 DataSource length 1 sub
				{
				DataSource exch get
				dup type dup 
				/filetype eq
					{
					exch flushbuffer readstring pop pop
					}if
				/arraytype eq
					{
					exec pop
					}if
				}for
			}for
		end
		}
		{
		/DataSource load type dup 
		/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 div mul cvi string def
			1 1 Height { pop DataSource flushbuffer readstring pop pop} for
			end
			}if
		/arraytype eq
			{
			1 1 Height { pop DataSource pop } for
			}if
		}ifelse
	end
}bdf
/addprocs
{
	  2{/exec load}repeat
	  3 1 roll
	  [ 5 1 roll ] bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs /TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{ 
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs /TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp AGMCORE_tmp 1 add ddf 
	dup type /dicttype eq
		{
			AGMCORE_tmp
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		} if
	dup type /arraytype eq
		{
			AGMCORE_tmp exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		} if
	exch dup
	AGMCORE_tmp 4 -1 roll put
	}forall
	exch {cvx} if
}bdf
/clonedict
{
	dup length dict
	begin
		{
		dup type /dicttype eq
			{
				clonedict
			} if
		dup type /arraytype eq
			{
				clonearray
			} if
		def
		}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get /DeviceN eq level3 not and
} bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne {
		/CSD known
	}{
		pop false
	} ifelse
} bdf
/DeviceN_NoneName
{	
	/Names where {
		pop
		false Names
		{
			(None) eq or
		} forall
	}{
		false
	}ifelse
} bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup /arraytype eq exch /packedarraytype eq or
		{
			dup 0 get /DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}
			{
				true
			}ifelse
		}
		{
			true
		} ifelse
	}
	{
		true
	} ifelse
} bdf
/base_colorspace_type
{
	dup type /arraytype eq {0 get} if
} bdf
/doc_setup{
	Adobe_AGM_Utils begin
}bdf
/doc_trailer{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright (C) 1997-2003 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Core 216 dict dup begin put
/nd{
	null def
}bind def
/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen [currentscreen] cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSA_cache 0 dict def
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_pattern_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_ovp nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_gradientcache 32 dict def
/AGMCORE_in_pattern false def
/knockout_unitsq nd
/AGMCORE_CRD_cache where{
	pop
}{
	/AGMCORE_CRD_cache 0 dict def
}ifelse
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer {readline} stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type /dicttype eq{
		dup /HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup /HalftoneType get 2 eq{
				/GraySpotFunction get
			}{ 
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
} def
/clp_npth
{
	clip newpath
} def
/eoclp_npth
{
	eoclip newpath
} def
/npth_clp
{
	newpath clip
} def
/add_grad
{
	AGMCORE_gradientcache 3 1 roll put
}bdf
/exec_grad
{
	AGMCORE_gradientcache exch get exec
}bdf
/graphic_setup
{
	/AGMCORE_graphicsave save def
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[] 0 setdash
	10 setmiterlimit
	newpath
	false setoverprint
	false setstrokeadjust
	Adobe_AGM_Core/spot_alias get exec
	/Adobe_AGM_Image where {
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			get exec
		}{
			pop pop
		}ifelse
	} if
	100 dict begin
	/dictstackcount countdictstack def
	/showpage {} def
	mark
} def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub {end}for
	end
	AGMCORE_graphicsave restore
} def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				} if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}
			{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			} ifelse
		} forall
} bdf
/doc_setup{
	Adobe_AGM_Core begin
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict /AGM_handleerror known not{
		errordict /AGM_handleerror errordict /handleerror get put
		errordict /handleerror {
			Adobe_AGM_Core begin
			$error /newerror get AGMCORE_cur_err null ne and{
				$error /newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error /newerror true put
			end
			errordict /AGM_handleerror get exec
			} bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and
		}{
			false
		}ifelse
	def
	level2 not{
		/xput{
			dup load dup length exch maxlength eq{
				dup dup load dup
				length dup 0 eq {pop 1} if 2 mul dict copy def
			}if
			load begin
				def
 			end
		}def
	}{
		/xput{
			load 3 1 roll put
		}def
	}ifelse
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 10 def
		/AGMCORE_&gsave /gsave ldf
		/AGMCORE_&grestore /grestore ldf
		/AGMCORE_&grestoreall /grestoreall ldf
		/AGMCORE_&save /save ldf
		/AGMCORE_gdictcopy {
			begin
			{ def } forall
			end
		}def
		/AGMCORE_gput {
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget {
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave {
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			Adobe_AGM_Core exch
			/AGMCORE_gstackptr xpt
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore {
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt {1 add} if
			Adobe_AGM_Core exch
			/AGMCORE_gstackptr xpt
		}def
		/grestoreall {
			AGMCORE_&grestoreall
			Adobe_AGM_Core
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr put 
		}def
		/save {
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			Adobe_AGM_Core begin
				/AGMCORE_gstackptr exch def
				/AGMCORE_gstacksaveptr AGMCORE_gstackptr def
			end
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		0 1 AGMCORE_gstack length 1 sub {
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		} for
	}if
	level3 /AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&usrshfill /shfill load def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern /makepattern load def
	}if
	/currentcmykcolor [0 0 0 0] AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace [/DeviceGray] AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0] AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent () AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	<<
	/MaxPatternItem currentsystemparams /MaxPatternCache get
	>>
	setuserparams
	end
}def
/page_setup
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor /setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3 {
			3 index add neg dup 0 lt {
				pop 0
			} if
			3 1 roll
		} repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{
		pop
	}ndf
	/currentoverprint
	{
		false
	}ndf
	/AGMCORE_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{ 
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.) ==
			Adobe_AGM_Core /AGMCORE_have_reported_unsupported_color_space true ddf
		} if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/LeaveColorUnchanged eq
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where {pop}{
		/convert_spot_to_process
		{
			dup map_alias {
				/Name get exch pop
			} if
			dup dup (None) eq exch (All) eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{ 
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						1 1 1 1 5 -1 roll findcmykcustomcolor 1 setcustomcolor
						currentgray 0 eq
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						Adobe_AGM_Core/AGMCORE_name xddf
						false
						Adobe_AGM_Core/AGMCORE_in_pattern known {Adobe_AGM_Core/AGMCORE_in_pattern get}{false} ifelse
						not currentpagedevice/OverrideSeparations known and
							{
							currentpagedevice/OverrideSeparations get
								{
								/HqnSpots /ProcSet resourcestatus
									{
									pop pop pop true
									}if
								}if
							}if					
							{
							AGMCORE_name /HqnSpots /ProcSet findresource /TestSpot get exec not
							}{
							gsave
							[/Separation AGMCORE_name /DeviceGray {}]setcolorspace
							false
							currentpagedevice/SeparationColorNames 2 copy known
							{
								get
								{ AGMCORE_name eq or}forall
							not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		}def
	}ifelse
	/convert_to_process where {pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{ 
				dup true exch
					{
					dup (Cyan) eq exch
					dup (Magenta) eq 3 -1 roll or exch
					dup (Yellow) eq 3 -1 roll or exch
					dup (Black) eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup (Cyan) eq exch
						dup (Magenta) eq 3 -1 roll or exch
						dup (Yellow) eq 3 -1 roll or exch
						(Black) eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					dup (Cyan) eq exch
					dup (Magenta) eq 3 -1 roll or exch
					dup (Yellow) eq 3 -1 roll or exch
					dup (Black) eq 3 -1 roll or
					{pop}
					{convert_spot_to_process or}ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space  
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	AGMCORE_host_sep{
		/setcolortransfer
		{ 
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			  	AGMCORE_magenta_plate{
			  		4 3 roll pop pop pop
			  	}{
			  		AGMCORE_yellow_plate{
			  			4 2 roll pop pop pop
			  		}{
			  			4 1 roll pop pop pop
			  		}ifelse
			  	}ifelse
			}ifelse
			settransfer  
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			  	AGMCORE_magenta_plate{
			  		{4 3 roll pop pop pop}
			  	}{
			  		AGMCORE_yellow_plate{
			  			{4 2 roll pop pop pop}
			  		}{
			  			{4 1 roll pop pop pop}
			  		}ifelse
			  	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup /Cyan eq 1 index (Cyan) eq or
					{pop (_cyan_)}if
				dup /Magenta eq 1 index (Magenta) eq or
					{pop (_magenta_)}if
				dup /Yellow eq 1 index (Yellow) eq or
					{pop (_yellow_)}if
				dup /Black eq 1 index (Black) eq or
					{pop (_black_)}if
				}def
			dup type /arraytype eq
				{[exch {filtername}forall]}
				{filtername}ifelse
			end
			}def
		/AGMCORE_IsSeparationAProcessColor
			{
			dup (Cyan) eq exch dup (Magenta) eq exch dup (Yellow) eq exch (Black) eq or or or
			}def
		level3 {
			/AGMCORE_IsCurrentColor
				{
				gsave
				false setoverprint
				1 1 1 1 5 -1 roll findcmykcustomcolor 1 setcustomcolor
				currentgray 0 eq 
				grestore
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type /stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string /string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in /readstring cvx
						[component /get cvx 255 /exch cvx /sub cvx string_out /exch cvx 0 /exch cvx /put cvx string_out]cvx
						[/pop cvx ()]cvx /ifelse cvx
					]cvx /ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict /Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode [1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0 [C0 channel get 1 exch sub] def
							/C1 [C1 channel get 1 exch sub] def
							}{
							/C0 [1] def
							/C1 [1] def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions [Functions {channel paint? AGMCORE_separateShadingFunction} forall] def			
						}if
					currentdict /Range known
						{/Range [0 1] def}if
					currentdict
					end
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict /Function known
					{
					currentdict /Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction /Function xdf
					/ColorSpace [/DeviceGray] def
					}{
					ColorSpace dup type /arraytype eq {0 get}if /DeviceCMYK eq
						{
						/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get /Separation eq
						{
							{
								[1 /exch cvx /sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub /index cvx 1 /exch cvx /sub cvx ColorSpace 1 get length 1 add 1 /roll cvx ColorSpace 1 get length{/pop cvx} repeat]cvx
							}{
								pop [ColorSpace 1 get length {/pop cvx} repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2 /DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup /ColorSpace get
				dup type /arraytype ne
					{[exch]}if
				dup 0 get /DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get /Separation eq
					{
					exch begin
					ColorSpace 1 get dup /None ne exch /All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get /exec cvx
										4 AGMCORE_plate_ndx sub -1 /roll cvx
										4 1 /roll cvx
										3 [/pop cvx]cvx /repeat cvx
										1 /exch cvx /sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get /DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get /exec cvx
									4 AGMCORE_plate_ndx sub -1 /roll cvx
									4 1 /roll cvx
									3 [/pop cvx]cvx /repeat cvx
									1 /exch cvx /sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace [/DeviceGray] def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup /DeviceCMYK eq exch dup /Separation eq exch /DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type /arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get /CIEBasedA eq
								{
								/ColorSpace [/Separation /_ciebaseda_ /DeviceGray {}] def
								}if
							ColorSpace 0 get dup /CIEBasedABC eq exch dup /CIEBasedDEF eq exch /DeviceRGB eq or or
								{
								/ColorSpace [/DeviceN [/_red_ /_green_ /_blue_] /DeviceRGB {}] def
								}if
							ColorSpace 0 get /CIEBasedDEFG eq
								{
								/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}]
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup /AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace [/Separation (None) /DeviceGray {}] def
					currentdict end
					}if
				}def
			/shfill
				{
				clonedict
				AGMCORE_separateShadingDict 
				dup /AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup /PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					currentdict end
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{ 
				4 {4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{ 
				Adobe_AGM_Core begin
					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf
				end
				[/Separation 4 -1 roll /DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation (All) /DeviceGray {}] setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4 {4 index mul 4 1 roll} repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval {255 div} forall
	} bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	} bdf
	/n_color_components
	{
		base_colorspace_type
		dup /DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo /moveto ldf
		/li /lineto ldf
		/cv /curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		/level2ScreenFreq{
			begin
			60
			HalftoneType 1 eq{
				pop Frequency
			}if
			HalftoneType 2 eq{
				pop GrayFrequency
			}if
			HalftoneType 5 eq{
				pop Default level2ScreenFreq
			}if
			 end
		}def
		/currentScreenFreq{
			currenthalftone level2ScreenFreq
		}def
		level2 /setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace /setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup /arraytype eq exch /packedarraytype eq or
				{
					dup 0 get dup /Separation eq
					{
						pop
						dup length array copy
						dup dup 1 get
						current_spot_alias
						{
							dup map_alias
							{
								begin
								/sep_colorspace_dict currentdict AGMCORE_gput
								pop pop	pop
								[ 
									/Separation Name 
									CSA map_csa
									dup /MappedCSA xdf 
									/sep_colorspace_proc load
								]
								dup Name
								end
							}if
						}if
						map_reserved_ink_name 1 xpt
					}{
						/DeviceN eq 
						{
							dup length array copy
							dup dup 1 get [ 
								exch {
									current_spot_alias{
										dup map_alias{
											/Name get exch pop
										}if
									}if
									map_reserved_ink_name
								} forall 
							] 1 xpt
						}if
					}ifelse
				}if
			}def
			/setcolorspace
			{
				dup type dup /arraytype eq exch /packedarraytype eq or
				{
					dup 0 get /Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps {AGMCORE_&&&setcolorspace} if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/currentScreenFreq{
			currentscreen pop pop
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		} def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		} def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup /DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup /DeviceGray ne{
				dup /DeviceCMYK ne{
					dup /DeviceRGB ne{
						dup /Separation eq{
							pop
							currentcolorspace 3 get exec
							currentcolorspace 2 get
						}{
							dup /Indexed eq{
								pop
								currentcolorspace 3 get dup type /stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err /AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		} def
	}ifelse
	/sop /setoverprint ldf
	/lw /setlinewidth ldf
	/lc /setlinecap ldf
	/lj /setlinejoin ldf
	/ml /setmiterlimit ldf
	/dsh /setdash ldf
	/sadj /setstrokeadjust ldf
	/gry /setgray ldf
	/rgb /setrgbcolor ldf
	/cmyk /setcmykcolor ldf
	/sep /setsepcolor ldf
	/devn /setdevicencolor ldf
	/idx /setindexedcolor ldf
	/colr /setcolor ldf
	/csacrd /set_csa_crd ldf
	/sepcs /setsepcolorspace ldf
	/devncs /setdevicencolorspace ldf
	/idxcs /setindexedcolorspace ldf
	/cp /closepath ldf
	/clp /clp_npth ldf
	/eclp /eoclp_npth ldf
	/f /fill ldf
	/ef /eofill ldf
	/@ /stroke ldf
	/nclp /npth_clp ldf
	/gset /graphic_setup ldf
	/gcln /graphic_cleanup ldf
	currentdict{
		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {
			bind
		}if
		def
	}forall
	/currentpagedevice currentpagedevice def
/getrampcolor {
/indx exch def
0 1 NumComp 1 sub {
dup
Samples exch get
dup type /stringtype eq { indx get } if
exch
Scaling exch get aload pop
3 1 roll
mul add
} for
ColorSpaceFamily /Separation eq
	{
	sep
	}
	{
	ColorSpaceFamily /DeviceN eq
		{
		devn
		}
		{
		setcolor
		}ifelse
	}ifelse
} bind def
/sssetbackground { aload pop setcolor } bind def
/RadialShade {
40 dict begin
/ColorSpaceFamily exch def
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/r2 exch def
/c2y exch def
/c2x exch def
/r1 exch def
/c1y exch def
/c1x exch def
/rampdict exch def
/setinkoverprint where {pop /setinkoverprint{pop}def}if
gsave
BBox length 0 gt {
newpath
BBox 0 get BBox 1 get moveto
BBox 2 get BBox 0 get sub 0 rlineto
0 BBox 3 get BBox 1 get sub rlineto
BBox 2 get BBox 0 get sub neg 0 rlineto
closepath
clip
newpath
} if
c1x c2x eq
{
c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope c2y c1y sub c2x c1x sub div def
/theta slope 1 atan def
c2x c1x lt c2y c1y ge and { /theta theta 180 sub def} if
c2x c1x lt c2y c1y lt and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
c1x c1y translate
theta rotate
-90 rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
/max { 2 copy gt { pop } {exch pop} ifelse } bind def
/min { 2 copy lt { pop } {exch pop} ifelse } bind def
rampdict begin
40 dict begin
background length 0 gt { background sssetbackground gsave clippath fill grestore } if
gsave
c1x c1y translate
theta rotate
-90 rotate
/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
/c1y 0 def
/c1x 0 def
/c2x 0 def
ext0 {
0 getrampcolor
c2y r2 add r1 sub 0.0001 lt
{
c1x c1y r1 360 0 arcn
pathbbox
/aymax exch def
/axmax exch def
/aymin exch def
/axmin exch def
/bxMin xMin axmin min def
/byMin yMin aymin min def
/bxMax xMax axmax max def
/byMax yMax aymax max def
bxMin byMin moveto
bxMax byMin lineto
bxMax byMax lineto
bxMin byMax lineto
bxMin byMin lineto
eofill
}
{
c2y r1 add r2 le
{
c1x c1y r1 0 360 arc
fill
}
{
c2x c2y r2 0 360 arc fill
r1 r2 eq
{
/p1x r1 neg def
/p1y c1y def
/p2x r1 def
/p2y c1y def
p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
fill
}
{
/AA r2 r1 sub c2y div def
/theta AA 1 AA dup mul sub sqrt div 1 atan def
/SS1 90 theta add dup sin exch cos div def
/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
/p1y p1x SS1 div neg def
/SS2 90 theta sub dup sin exch cos div def
/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
/p2y p2x SS2 div neg def
r1 r2 gt
{
/L1maxX p1x yMin p1y sub SS1 div add def
/L2maxX p2x yMin p2y sub SS2 div add def
}
{
/L1maxX 0 def
/L2maxX 0 def
}ifelse
p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
L1maxX L1maxX p1x sub SS1 mul p1y add lineto
fill
}
ifelse
}
ifelse
} ifelse
} if
c1x c2x sub dup mul
c1y c2y sub dup mul
add 0.5 exp
0 dtransform
dup mul exch dup mul add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
/hires exch def
hires mul
/numpix exch def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
/xInc c2x c1x sub numsteps div def
/yInc c2y c1y sub numsteps div def
/rInc r2 r1 sub numsteps div def
/cx c1x def
/cy c1y def
/radius r1 def
newpath
xInc 0 eq yInc 0 eq rInc 0 eq and and
{
0 getrampcolor
cx cy radius 0 360 arc
stroke
NumSamples 1 sub getrampcolor
cx cy radius 72 hires div add 0 360 arc
0 setlinewidth
stroke
}
{
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
cx cy radius 0 360 arc
/cx cx xInc add def
/cy cy yInc add def
/radius radius rInc add def
cx cy radius 360 0 arcn
eofill
rampIndxInc add
}
repeat
pop
} ifelse
ext1 {
c2y r2 add r1 lt
{
c2x c2y r2 0 360 arc
fill
}
{
c2y r1 add r2 sub 0.0001 le
{
c2x c2y r2 360 0 arcn
pathbbox
/aymax exch def
/axmax exch def
/aymin exch def
/axmin exch def
/bxMin xMin axmin min def
/byMin yMin aymin min def
/bxMax xMax axmax max def
/byMax yMax aymax max def
bxMin byMin moveto
bxMax byMin lineto
bxMax byMax lineto
bxMin byMax lineto
bxMin byMin lineto
eofill
}
{
c2x c2y r2 0 360 arc fill
r1 r2 eq
{
/p1x r2 neg def
/p1y c2y def
/p2x r2 def
/p2y c2y def
p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
fill
}
{
/AA r2 r1 sub c2y div def
/theta AA 1 AA dup mul sub sqrt div 1 atan def
/SS1 90 theta add dup sin exch cos div def
/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
/p1y c2y p1x SS1 div sub def
/SS2 90 theta sub dup sin exch cos div def
/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
/p2y c2y p2x SS2 div sub def
r1 r2 lt
{
/L1maxX p1x yMax p1y sub SS1 div add def
/L2maxX p2x yMax p2y sub SS2 div add def
}
{
/L1maxX 0 def
/L2maxX 0 def
}ifelse
p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
L1maxX L1maxX p1x sub SS1 mul p1y add lineto
fill
}
ifelse
}
ifelse
} ifelse
} if
grestore
grestore
end
end
end
} ifelse
} bind def
/GenStrips {
40 dict begin
/ColorSpaceFamily exch def
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/y2 exch def
/x2 exch def
/y1 exch def
/x1 exch def
/rampdict exch def
/setinkoverprint where {pop /setinkoverprint{pop}def}if
gsave
BBox length 0 gt {
newpath
BBox 0 get BBox 1 get moveto
BBox 2 get BBox 0 get sub 0 rlineto
0 BBox 3 get BBox 1 get sub rlineto
BBox 2 get BBox 0 get sub neg 0 rlineto
closepath
clip
newpath
} if
x1 x2 eq
{
y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope y2 y1 sub x2 x1 sub div def
/theta slope 1 atan def
x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if
x2 x1 lt y2 y1 lt and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
x1 y1 translate
theta rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background sssetbackground gsave clippath fill grestore } if
gsave
x1 y1 translate
theta rotate
/xStart 0 def
/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
/ySpan yMax yMin sub def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
xStart 0 transform
xEnd 0 transform
3 -1 roll
sub dup mul
3 1 roll
sub dup mul
add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
mul
/numpix exch def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
ext0 {
0 getrampcolor
xMin xStart lt
{ xMin yMin xMin neg ySpan rectfill } if
} if
/xInc xEnd xStart sub numsteps div def
/x xStart def
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
x yMin xInc ySpan rectfill
/x x xInc add def
rampIndxInc add
}
repeat
pop
ext1 {
xMax xEnd gt
{ xEnd yMin xMax xEnd sub ySpan rectfill } if
} if
grestore
grestore
end
end
end
} ifelse
} bind def
}def
/page_trailer
{
	end
}def
/doc_trailer{
}def
systemdict /findcolorrendering known{
	/findcolorrendering systemdict /findcolorrendering get def
}if
systemdict /setcolorrendering known{
	/setcolorrendering systemdict /setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA map_csa setcolorspace_opt
		set_crd
	end
}
def
/setsepcolor
{ 
	/sep_colorspace_dict AGMCORE_gget begin
		dup /sep_tint exch AGMCORE_gput
		TintProc
	end
} def
/setdevicencolor
{ 
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		} for
		TintProc
	end
} def
/sep_colorspace_proc
{
	Adobe_AGM_Core/AGMCORE_tmp xddf
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2 {AGMCORE_tmp mul NComponents 1 roll} repeat
			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll
				} repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
} def
/sep_colorspace_gray_proc
{
	Adobe_AGM_Core/AGMCORE_tmp xddf
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
} def
/sep_proc_name
{
	dup 0 get 
	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{
		pop [/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
} def
/setsepcolorspace
{ 
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup /sep_colorspace_dict exch AGMCORE_gput
	begin
	/MappedCSA CSA map_csa def
	Adobe_AGM_Core/AGMCORE_sep_special Name dup () eq exch (All) eq or ddf
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 
		] setcolorspace_opt
		/TintProc {
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get /DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc [
				Components aload pop Name findcmykcustomcolor 
				/exch cvx /setcustomcolor cvx
			] cvx bdf
		}{
 			AGMCORE_host_sep Name (All) eq and{
 				/TintProc { 
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name () eq and{
					/TintProc [
						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{
							cvx /setcmykcolor cvx
						}{
							cvx /setgray cvx
						}ifelse
					] cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc [
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get /DeviceGray eq{
								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx
							}if
							/Name cvx /findcmykcustomcolor cvx /exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load /exec cvx
								/not cvx /and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							] cvx /if cvx
							/setcustomcolor cvx
						] cvx bdf
 					}{ 
						/TintProc /setcolor ldf
						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
} def
/additive_blend
{
  	3 dict begin
  	/numarrays xdf
  	/numcolors xdf
  	0 1 numcolors 1 sub
  		{
  		/c1 xdf
  		1
  		0 1 numarrays 1 sub
  			{
			1 exch add /index cvx
  			c1 /get cvx /mul cvx
  			}for
 		numarrays 1 add 1 /roll cvx 
  		}for
 	numarrays [/pop cvx] cvx /repeat cvx
  	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add /index cvx  
			c1 /get cvx /sub cvx /mul cvx
			}for
		/sub cvx
		numarrays 1 add 1 /roll cvx
		}for
	numarrays [/pop cvx] cvx /repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc [
		/TintTransform cvx /setcolor cvx
	] cvx bdf
	MappedCSA setcolorspace_opt
} bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length {pop} repeat
	end
} bdf
/setdevicencolorspace
{ 
	dup /AliasedColorants known {false}{true}ifelse 
	current_spot_alias and {
		6 dict begin
		/names_index 0 def
		dup /names_len exch /Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup /Names get
		{
			dup map_alias {
				exch pop
				dup /ColorLookup known {
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup /Components known {
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index [null null null null] put
						end
					} ifelse
				} ifelse
				new_names names_index 3 -1 roll /Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup /LookupTables known {
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index [null null null null] put
					end
				} ifelse
			} ifelse
			/names_index names_index 1 add def 
		} forall
		alias_cnt 0 gt {
			/AliasedColorants true def
			0 1 names_len 1 sub {
				/names_index xdf
				new_LookupTables names_index get 0 get null eq {
					dup /Names get names_index get /name xdf
					name (Cyan) eq name (Magenta) eq name (Yellow) eq name (Black) eq
					or or or not {
						/AliasedColorants false def
						exit
					} if
				} if
			} for
			AliasedColorants {
				dup begin
				/Names new_names def
				/AliasedColorants true def
				/LookupTables new_LookupTables def
				currentdict /TTTablesIdx known not {
					/TTTablesIdx -1 def
				} if
				currentdict /NComponents known not {
					/NComponents TintMethod /Subtractive eq {4}{3}ifelse def
				} if
				end
			} if
		}if
		end
	} if
	dup /devicen_colorspace_dict exch AGMCORE_gput
	begin
	/MappedCSA CSA map_csa def
	currentdict /AliasedColorants known {
		AliasedColorants
	}{
		false
	} ifelse
	/TintTransform load type /nulltype eq or {
		/TintTransform [
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup (Cyan) eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup (Magenta) eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0 /exch cvx 0 0
							}
							{
							(Yellow) eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1 /roll cvx 0
								}
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1 /roll cvx
								} ifelse
							} ifelse
						} ifelse
					5 -1 /roll cvx /astore cvx
					}
					{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx /mul cvx /round cvx /cvi cvx /get cvx
					} ifelse
					Names length TTTablesIdx add 1 add 1 /roll cvx
				} for
			Names length [/pop cvx] cvx /repeat cvx
			NComponents Names length
  			TintMethod /Subtractive eq
  				{
  				subtractive_blend
  				}
  				{
  				additive_blend
  				} ifelse
		] cvx bdf
	} if
	AGMCORE_host_sep {
		Names convert_to_process {
			exec_tint_transform
		}
		{	
			currentdict /AliasedColorants known {
				AliasedColorants not
			}{
				false
			} ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			Names {
				AvoidAliasedColorants {
					/currentspotalias current_spot_alias def
					false set_spot_alias
				} if
				AGMCORE_is_cmyk_sep {
					dup (Cyan) eq AGMCORE_cyan_plate and exch
					dup (Magenta) eq AGMCORE_magenta_plate and exch
					dup (Yellow) eq AGMCORE_yellow_plate and exch
					(Black) eq AGMCORE_black_plate and or or or {
						/devicen_colorspace_dict AGMCORE_gget /TintProc [
							Names names_index /devn_makecustomcolor cvx
						] cvx ddf
						/painted? true def
					} if
					painted? {exit} if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq {
					/devicen_colorspace_dict AGMCORE_gget /TintProc [
						Names names_index /devn_makecustomcolor cvx
					] cvx ddf
					/painted? true def
					exit
					} if
				} ifelse
				AvoidAliasedColorants {
					currentspotalias set_spot_alias
				} if
				/names_index names_index 1 add def
			} forall
			painted? {
				/devicen_colorspace_dict AGMCORE_gget /names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget /TintProc [
					names_len [/pop cvx] cvx /repeat cvx 1 /setseparationgray cvx
					0 0 0 0 () /findcmykcustomcolor cvx 0 /setcustomcolor cvx
				] cvx ddf
			} ifelse
			end
		} ifelse
	}
	{
		AGMCORE_in_rip_sep {
			Names convert_to_process not
		}{
			level3
		} ifelse
		{
			[/DeviceN Names MappedCSA /TintTransform load] setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and {
				[
					Names /length cvx [/pop cvx] cvx /repeat cvx
				] cvx bdf
			}{
				/setcolor ldf
			} ifelse
		}{
			exec_tint_transform
		} ifelse
	} ifelse
	set_crd
	/AliasedColorants false def
	end
} def
/setindexedcolorspace
{
	dup /indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict /CSD known {
			CSD get_csd /Names known {
				CSD get_csd begin
				currentdict devncs
				AGMCORE_host_sep{
					4 dict begin
					/devnCompCnt Names length def
					/NewLookup HiVal 1 add string def
					0 1 HiVal {
						/tableIndex xdf
						Lookup dup type /stringtype eq {
							devnCompCnt tableIndex map_index
						}{
							exec
						} ifelse
						setdevicencolor
						currentgray
						tableIndex exch
						HiVal mul cvi 
						NewLookup 3 1 roll put
					} for
					[/Indexed currentcolorspace HiVal NewLookup] setcolorspace_opt
					end
				}{
					level3
					{
					[/Indexed [/DeviceN Names MappedCSA /TintTransform load] HiVal Lookup] setcolorspace_opt
					}{
					[/Indexed MappedCSA HiVal
						[
						Lookup dup type /stringtype eq
							{/exch cvx CSD get_csd /Names get length dup /mul cvx exch /getinterval cvx {255 div} /forall cvx}
							{/exec cvx}ifelse
							/TintTransform load /exec cvx
						]cvx
					]setcolorspace_opt
					}ifelse
				} ifelse
				end
			}{
			} ifelse
			set_crd
		}
		{
			/MappedCSA CSA map_csa def
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{
						pop [/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{ 
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval {} forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						} bind
					}{
						Lookup
					}ifelse
				}ifelse
				] setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep {
		/indexed_colorspace_dict AGMCORE_gget dup /CSD known {
			begin
			CSD get_csd begin
			map_indexed_devn
			devn
			end
			end
		}{
			AGMCORE_gget/Lookup get 4 3 -1 roll map_index
			pop setcmykcolor
		} ifelse
	}{
		level3 not AGMCORE_in_rip_sep and /indexed_colorspace_dict AGMCORE_gget /CSD known and {
			/indexed_colorspace_dict AGMCORE_gget /CSD get get_csd begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		} ifelse
	}ifelse
} def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode [0 1] def
		/DataSource <FF> def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict /image get exec
		grestore
		}if
	consumeimagedata
}def
/add_csa
{
	Adobe_AGM_Core begin
			/AGMCORE_CSA_cache xput
	end
}def
/get_csa_by_name
{
	dup type dup /nametype eq exch /stringtype eq or{
		Adobe_AGM_Core begin
		1 dict begin
		/name xdf
		AGMCORE_CSA_cache
		{
			0 get name eq {
				exit
			}{
				pop
			} ifelse
		}forall
		end
		end
	}{
		pop
	} ifelse
}def
/map_csa
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_CSA_cache get exch get
	}if
}def
/add_csd
{
	Adobe_AGM_Core begin
		/AGMCORE_CSD_cache xput
	end
}def
/get_csd
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_CSD_cache get exch get
	}if
}def
/pattern_buf_init
{
	/count get 0 0 put
} def
/pattern_buf_next
{
	dup /count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
} def
/cachepattern_compress
{
	5 dict begin
	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def
	/patarray 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	patarray 1 array dup 0 1 put /count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq {
			pop
		}{
			patarray dup length 1 sub 3 -1 roll put
		} ifelse
		{string_size}{0}ifelse string
	} /LZWEncode filter def
	{ 		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not {exit} if
	} loop
	LZWFilter closefile
	patarray				
	end
}def
/cachepattern
{
	2 dict begin
	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def
	/patarray 20 dict def
	currentglobal true setglobal 
	patarray 1 array dup 0 1 put /count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		patarray dup length 1 sub 3 -1 roll put
		not {exit} if
	} loop
	patarray dup dup length 1 sub () put					
	end	
}def
/add_pattern
{
	Adobe_AGM_Core begin
		/AGMCORE_pattern_cache xput
	end
}def
/get_pattern
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_pattern_cache get exch get
		dup wrap_paintproc
	}if
}def
/wrap_paintproc
{ 
  statusdict /currentfilenameextend known{
	  begin
		/OldPaintProc /PaintProc load def
		/PaintProc
		{
		  mark exch
		  dup /OldPaintProc get stopped
		  {closefile restore end} if
		  cleartomark
		}  def
	  end
  } {pop} ifelse
} def
/make_pattern
{
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index /XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index /YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			  1 index begin
		BBox 0 get XStep div cvi XStep mul /xshift exch neg def
		BBox 1 get YStep div cvi YStep mul /yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[ xshift yshift /translate load null /exec load ] dup
		3 /PaintProc load put cvx /PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup /PatternType get 1 eq{
		dup /PaintType get 1 eq{
			currentoverprint sop [/DeviceGray] setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{
		pop
	}{
		setcolorspace
	}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/Intent known{
		currentcolorrendering/Intent get
	}{
		null
	}ifelse
	Intent ne{
		false  
		Intent
		AGMCORE_CRD_cache {
			exch pop 
			begin
				dup Intent eq{
					currentdict setcolorrendering_opt
					end 
					exch pop true exch	
					exit
				}if
			end
		} forall
		pop
		not{
			systemdict /findcolorrendering known{
				Intent findcolorrendering pop
				/ColorRendering findresource 
				dup length dict copy
				setcolorrendering_opt
			}if
		}if
	}if
} def
/add_crd
{
	AGMCORE_CRD_cache 3 1 roll put
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/CRD known{
			AGMCORE_CRD_cache CRD get dup null ne{
				setcolorrendering_opt
			}{
				pop
			}ifelse
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type /arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp) flushinput
	}if
}def
/cpaint_gsep
{
	Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep) flushinput
	}if
}def
/cpaint_gend
{
	newpath
}def
/path_rez
{
	dup 0 ne{
		AGMCORE_deviceDPI exch div 
		dup 1 lt{
			pop 1
		}if
		setflat
	}{
		pop
	}ifelse 	
}def
/set_spot_alias_ary
{
	/AGMCORE_SpotAliasAry where{
		pop pop
	}{
		Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
		true set_spot_alias
	}ifelse
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry{
				dup/Name get AGMCORE_name eq{
					save exch
					/Adobe_AGM_Core currentdict def
					/CSD get get_csd
					exch restore
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not {
		Adobe_AGM_Core/AGMCORE_&setcustomcolor /setcustomcolor load put
	} if
	/customcolor_tint 1 AGMCORE_gput
	Adobe_AGM_Core begin
	/setcustomcolor
	{
		dup /customcolor_tint exch AGMCORE_gput
		current_spot_alias{
			1 index 4 get map_alias{
				mark 3 1 roll
				setsepcolorspace
				counttomark 0 ne{
					setsepcolor
				}if
				pop
				pop
			}{
				AGMCORE_&setcustomcolor
			}ifelse
		}{
			AGMCORE_&setcustomcolor
		}ifelse
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd /setpagedevice load def
	/setpagedevice { get_gstate spd set_gstate } def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known{
			currentpagedevice/NegativePrint get Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						bdict /NegativePrint Adobe_AGM_Core/AGMCORE_inverting get edict setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
		gsave newpath clippath 1 /setseparationgray where{pop setseparationgray}{setgray}ifelse 
		/AGMIRS_&fill where {pop AGMIRS_&fill}{fill} ifelse grestore
	}if
	end
}def
/lw_save_restore_override {
	/md where {
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{} def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage /showpage load def}
		ifelse
		/showpage {orig_showpage gR} def
		end
	}if
}def
/pscript_showpage_override {
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage /restore load def
		/restore {exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where {
		pop
		md /initializepage known {
			md /initializepage {} put
		} if
		md /rC known {
			md /rC {4{pop}repeat} put
		} if
	}if
	/mysetup where {
		/mysetup [1 0 0 1 0 0] put
	}if
	Adobe_AGM_Core /AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core /AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
	/PrepsDict where
		{pop}
		{
		Adobe_AGM_Core /AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core /AGMCORE_Default_PageSize get type /arraytype eq
			{
			Adobe_AGM_Core /AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core /AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core /AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ (Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. ) def
	/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate with on-host methods. ) def
	/AGMCORE_invalid_color_space (This job contains an invalid color space. ) def
end
end
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.23 0
%%Copyright: Copyright 1997-2003 Adobe Systems Incorporated.  All Rights Reserved.
%%Version: 2.23 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict /Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{ /Adobe_CoolType_Core userdict /Adobe_CoolType_Core get def }
if
userdict /Adobe_CoolType_Core 60 dict dup begin put
/Adobe_CoolType_Version 2.23 def
/Level2?
	systemdict /languagelevel known dup
		{ pop systemdict /languagelevel get 2 ge }
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal /pop load def
	/gcheck { pop false } bind def
	/currentpacking false def
	/setpacking /pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel
		2 copy known not
			{ 2 copy 3 dict dup /args 7 index 5 add array put put get }
			{
			get dup /args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch /args exch put
				}
				{ pop }
			ifelse
			}
		ifelse
			begin
			count 2 sub 1 index lt
				{ pop count 1 sub }
			if
			dup /argCount exch def
			dup 0 gt
				{
				exch 1 index 2 add 1 roll
				args exch 0 exch getinterval 
			astore pop
				}
				{ pop }
			ifelse
			count 1 sub /restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		end
	} bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{ { pop } repeat }
				{ pop }
			ifelse
			args 0 argCount getinterval {} forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{ { end } repeat }
		{ pop }
	ifelse
	} bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	} bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	} bind def
/@ReRaise
	{
	cvx $error /errorname get errordict exch get exec
	stop
	} bind def
/@Stopped
	{
	0 @#Stopped
	} bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{ @_RestoreStackLevels true }
		{ @_PopStackLevels false }
	ifelse
	} bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get /args get exch get
		end
	} bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup begin
		mark
			{
				(*) { pop stop } 128 string /Category
			resourceforall
			}
		stopped
		cleartomark
		currentdict eq dup
			{ end }
		if
		not
		}
		{ false }
	ifelse
	def
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{ /steveamerige /Category resourcestatus }
		stopped
			{ cleartomark true }
			{ cleartomark currentglobal not }
		ifelse
		}
		{ false }
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec
				{ cleartomark false }
				{ { 3 2 roll pop true } { cleartomark false } ifelse }
			ifelse
			end
		} bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad /ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup /CMap CTHasResourceStatusBug
						{ CTResourceStatus }
						{ resourcestatus }
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup /CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{ exit }
								{ stop }
							ifelse
							}
						ifelse
						}
						{ pop }
					ifelse
					}
				128 string /CMap resourceforall
				}
			stopped
				{ cleartomark }
			stopped pop
			setglobal
			}
		if
		}
	if
	} bind def
/doc_setup
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mov /moveto load def
		/nfnt /newencodedfont load def
		/mfnt /makefont load def
		/sfnt /setfont load def
		/ufnt /undefinefont load def
		/chp /charpath load def
		/awsh /awidthshow load def
		/wsh /widthshow load def
		/ash /ashow load def
		/sh /show load def
		end
	userdict /Adobe_CoolType_Data 10 dict dup
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end put
	} bind def
/doc_trailer
	{
	currentdict Adobe_CoolType_Core eq
		{ end }
	if
	} bind def
/page_setup
	{
	Adobe_CoolType_Core begin
	} bind def
/page_trailer
	{
	end
	} bind def
/unload
	{
	systemdict /languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{ undef }
				{ pop pop }
			ifelse
			}
		if
		}
	if
	} bind def
/ndf
	{
	1 index where
		{ pop pop pop }
		{ dup xcheck { bind } if def }
	ifelse
	} def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where { /globaldict get begin } if
			dup where pop exch get
		/globaldict where { pop end } if
		end
	end
Adobe_CoolType_Core_Defined
	{ /systemfindfont exch def }
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{ pop } ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq { 0 } { dup length } ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index /FID eq
				{ pop pop }
				{ def }
			ifelse
			}
		forall
		dup null eq
			{ pop }
			{ { def } forall }
		ifelse
		currentdict
		end
	exch setglobal
	} bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	} bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index  known
			{ SharedFontDirectory 3 index get /FontReferenced known }
			{ false }
		ifelse
		}
		{
		FontDirectory 3 index known
			{ FontDirectory 3 index get /FontReferenced known }
			{
			SharedFontDirectory 3 index known
				{ SharedFontDirectory 3 index get /FontReferenced known }
				{ false }
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont /FontReferenced get
		2 index dup type /nametype eq
			{findfont}
		if ne
			{ pop false }
		if
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{ 2 copy get 3 index 3 1 roll put }
		for
		pop pop pop
		}
		{
		dup type /nametype eq
		  { findfont }
	  if
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index /FID ne
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type /stringtype eq { cvn } if def dup
			currentdict
			end
		definefont def
		}
	ifelse
	} bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type /dicttype ne
			{ 0 dict }
		if
		currentdict /$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{ def } forall
					{ def } forall
					currentdict
					dup /$Init known
						{ dup /$Init get exec }
					if
					end
				/$Strategy exch def
				}
				{ pop pop pop }
			ifelse
			}
			{ pop pop }
		ifelse
		end
	} bind def
/scff
	{
	$SubstituteFont
		begin
		dup type /stringtype eq
			{ dup length exch }
			{ null }
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{ $sname }
			ifelse def
		end
		{ findfont }
	@Stopped
		{
		dup length 8 add string exch
		1 index 0 (BadFont:) putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{ findfont }
		@Stopped
			{ pop /Courier findfont }
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	} bind def
/isWidthsOnlyFont
	{
	dup /WidthsOnly known
		{ pop pop true }
		{
		dup /FDepVector known
			{ /FDepVector get { isWidthsOnlyFont dup { exit } if } forall }
			{
			dup /FDArray known
				{ /FDArray get { isWidthsOnlyFont dup { exit } if } forall }
				{ pop }
			ifelse
			}
		ifelse
		}
	ifelse
	} bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 4 index def
		/$doSmartSub false def
		end
	3 index
	currentglobal false setglobal exch
	/CompatibleFonts /ProcSet resourcestatus
		{
		pop pop
		/CompatibleFonts /ProcSet findresource
			begin
			dup /CompatibleFont currentexception
			1 index /CompatibleFont true setexception
			1 index /Font resourcestatus
				{
				pop pop
				3 2 roll setglobal
				end
				exch
				dup findfont
				/CompatibleFonts /ProcSet findresource
					begin
					3 1 roll exch /CompatibleFont exch setexception
					end
				}
				{
				3 2 roll setglobal
				1 index exch /CompatibleFont exch setexception
				end
				findfont
				$SubstituteFont /$substituteFound true put
				}
			ifelse
		}
		{ exch setglobal findfont }
	ifelse
	$SubstituteFont
		begin
		$substituteFound
			{
		 false
		 (%%[Using embedded font ) print
		 5 index ?str1 cvs print
		 ( to avoid the font substitution problem noted earlier.]%%\n) print
		 }
			{
			dup /FontName known
				{
				dup /FontName get $fontname eq
				1 index /DistillerFauxFont known not and
				/currentdistillerparams where
					{ pop false 2 index isWidthsOnlyFont not and }
				if
				}
				{ false }
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		exch pop exch pop exch
		2 dict dup /Found 3 index put
		exch findfont exch
		}
		{
		exch exec
		exch dup findfont
		dup /FontType get 3 eq
	  {
		  exch ?str1 cvs
		  dup length 1 sub
		  -1 0
		{
			  exch dup 2 index get 42 eq
			{
				 exch 0 exch getinterval cvn 4 1 roll 3 2 roll pop
				 exit
			  }
			  {exch pop} ifelse
		  }for
		}
		{
		 exch pop
	  } ifelse
		2 dict dup /Downloaded 6 5 roll put
		}
	ifelse
	dup /FontName 4 index put copyfont definefont pop
	} bind def
/?str2 256 string def
/?add
	{
	1 index type /integertype eq
		{ exch true 4 2 }
		{ false 3 1 }
	ifelse
	roll
	1 index findfont
	dup /Widths known
		{
		Adobe_CoolType_Data /AddWidths? true put
		gsave dup 1000 scalefont setfont
		}
	if
	/Downloaded known
		{
		exec
		exch
			{
			exch ?str2 cvs exch
			findfont /Downloaded get 1 dict begin /Downloaded 1 index def ?str1 cvs length
			?str1 1 index 1 add 3 index putinterval
			exch length 1 add 1 index add
			?str1 2 index (*) putinterval
			?str1 0 2 index getinterval cvn findfont 
			?str1 3 index (+) putinterval
			2 dict dup /FontName ?str1 0 6 index getinterval cvn put
			dup /Downloaded Downloaded put end copyfont
			dup /FontName get exch definefont pop pop pop
			}
			{
			pop
			}
		ifelse
		}
		{
		pop
		exch
			{
			findfont
			dup /Found get
			dup length exch ?str1 cvs pop
			?str1 1 index (+) putinterval
			?str1 1 index 1 add 4 index ?str2 cvs putinterval
			?str1 exch 0 exch 5 4 roll ?str2 cvs length 1 add add getinterval cvn
			1 dict exch 1 index exch /FontName exch put copyfont
			dup /FontName get exch definefont pop
			}
			{
			pop
			}
		ifelse
		}
	ifelse
	Adobe_CoolType_Data /AddWidths? get
		{ grestore Adobe_CoolType_Data /AddWidths? false put }
	if
	} bind def
/?sh
	{
	currentfont /Downloaded known { exch } if pop
	} bind def
/?chp
	{
	currentfont /Downloaded known { pop } { false chp } ifelse
	} bind def
/?mv 
	{
	currentfont /Downloaded known { moveto pop pop } { pop pop moveto } ifelse
	} bind def
setpacking
userdict /$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{ get }
			{ pop pop { pop /Courier } bind }
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams /CannotEmbedFontPolicy 2 copy known
			{ get /Error eq }
			{ pop pop false }
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup /WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type /stringtype eq { cvn } if def
								/FontType 3 def
								/FontMatrix [ .001 0 0 .001 0 0 ] def
								/Encoding 256 array dup 0 1 255 { /.notdef put dup } for pop def
								/FontBBox [ 0 0 0 0 ] def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth /y exch def /x exch def
											x y setcharwidth
											$SubstituteFont /$Strategy get /$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									} bind def
								currentdict
								end
							exch setglobal
							} bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup /WMode known
										{ dup /WMode get }
										{ 0 }
									ifelse
									/$WMode exch def
									$fontname exch
									dup /FontName known
										{
										dup /FontName get
										dup type /stringtype eq { cvn } if
										}
										{ /unnamedfont }
									ifelse
									exch
									Adobe_CoolType_Data /InVMDeepCopiedFonts get
									1 index /FontName get known
										{
										pop
										Adobe_CoolType_Data /InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{ $deepcopyfont }
									ifelse
									exch 1 index exch /FontBasedOn exch put
									dup /FontName $fontname dup type /stringtype eq { cvn } if put
									definefont
									Adobe_CoolType_Data /InVMDeepCopiedFonts get
										begin
										dup /FontBasedOn get 1 index def
										end
									} bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{ /y 1000 def }
										{ /x -1000 def 500 120 translate }
									ifelse
									Level2?
										{
										[ /Separation (All) /DeviceCMYK { 0 0 0 1 pop } ]
										setcolorspace
										}
										{ 0 setgray }
									ifelse
									10 setlinewidth
									x .8 mul
									[ 7 3 ]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{ .2 setcolor }
											{ .8 setgray }
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									} bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict /FontName known
											{
											FontName
											dup type /stringtype eq { cvn } if
											}
											{ /unnamedfont }
										ifelse
										def
										/FontName $fontname dup type /stringtype eq { cvn } if def
										/currentdistillerparams where
											{ pop }
											{
											/FontInfo currentdict /FontInfo known
												{ FontInfo null copyfont }
												{ 2 dict }
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[ 1 0 ItalicAngle dup sin exch cos div 1 0 0 ]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									} bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont {} bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type /stringtype eq { cvn } if
						dup /$fontname exch def
						$sname null eq
							{ $str cvs dup length $slen sub $slen getinterval }
							{ pop $sname }
						ifelse
						$fontpat dup 0 (fonts/*) putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont /$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{ /$match exch def exit }
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont /$dstack get
								{
								exch
									{
									1 index eq
										{ pop false }
										{ true }
									ifelse
									}
									{ begin false }
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{ $match (fonts/) anchorsearch pop pop cvn }
							{ /Courier }
						ifelse
						} bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1  [ /Ryumin-Light /HeiseiMin-W3
										  /GothicBBB-Medium /HeiseiKakuGo-W5
										  /HeiseiMaruGo-W4 /Jun101-Light ] def
							/Korea1  [ /HYSMyeongJo-Medium /HYGoThic-Medium ] def
							/GB1	  [ /STSong-Light /STHeiti-Regular ] def
							/CNS1	 [ /MKai-Medium /MHei-Medium ] def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup /FontType get 0 eq
							{
							1 dict dup /FontName /copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup /FontName /copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{ $Strategies /$Type3Underprint get exec }
						ifelse
						} bind def
					/$buildfontname
						{
						dup /CIDFont findresource /CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index (-) putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy (-) putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{ pop pop 3 2 roll putinterval cvn /$cmapname exch def }
							{ pop pop pop pop pop }
						ifelse
						length
						$str 1 index (-) putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						} bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{ get }
								{ pop pop [] }
							ifelse
							}
							{ pop pop [] }
						ifelse
						false exch
							{
							dup /CIDFont resourcestatus
								{
								pop pop
								save
								1 index /CIDFont findresource
								dup /WidthsOnly known
									{ dup /WidthsOnly get }
									{ false }
								ifelse
								exch pop
								exch restore
									{ pop }
									{ exch pop true exit }
								ifelse
								}
								{ pop }
							ifelse
							}
						forall
							{ $str cvs $buildfontname }
							{
							false (*)
								{
								save exch
								dup /CIDFont findresource
								dup /WidthsOnly known
									{ dup /WidthsOnly get not }
									{ true }
								ifelse
								exch /CIDSystemInfo get
								dup /Registry get Registry eq
								exch /Ordering get Ordering eq and and
									{ exch restore exch pop true exit }
									{ pop restore }
								ifelse
								}
							$str /CIDFont resourceforall
								{ $buildfontname }
								{ $fontname $findfontByEnum }
							ifelse
							}
						ifelse
						} bind def
					end
				end
				currentdict /$error known currentdict /languagelevel known and dup
					{ pop $error /SubstituteFont known }
				if
				dup
					{ $error }
					{ Adobe_CoolType_Core }
				ifelse
				begin
					{
					/SubstituteFont
					/CMap /Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{ dup $str cvs dup length $slen sub $slen getinterval cvn }
									{ $sname }
								ifelse
								Adobe_CoolType_Data /InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{ exch pop true exit }
												{ pop }
											ifelse
											}
											{
											FontDirectory 1 index known
												{ exch pop true exit }
												{
												GlobalFontDirectory 1 index known
													{ exch pop true exit }
													{ pop }
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{ pop pop false }
								ifelse
									{
									exch pop exch pop
									}
									{
									dup /CMap resourcestatus
										{
										pop pop
										dup /$cmapname exch def
										/CMap findresource /CIDSystemInfo get { def } forall
										$findfontByROS
										}
										{
										128 string cvs
										dup (-) search
											{
											3 1 roll search
												{
												3 1 roll pop
													{ dup cvi }
												stopped
													{ pop pop pop pop pop $findfontByEnum }
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup /CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup /$cmapname exch def
															/CMap findresource /CIDSystemInfo get { def } forall
															$findfontByROS
															true exit
															}
															{ pop }
														ifelse
														}
													for
													dup type /booleantype eq
														{ pop }
														{ pop pop pop $findfontByEnum }
													ifelse
													}
												ifelse
												}
												{ pop pop pop $findfontByEnum }
											ifelse
											}
											{ pop pop $findfontByEnum }
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{ //SubstituteFont exec }
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{ $findfontByEnum }
								{ //SubstituteFont exec }
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core /scfindfont /systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup /FontName known
								{ dup /FontName get dup 3 index ne }
								{ /noname true }
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def /$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{ 1 index /FID eq { pop pop } { def } ifelse }
										forall
										currentdict
										end
									definefont
									dup /FontName known { dup /FontName get } { null } ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using ) print
										dup /FontName known
											{ dup /FontName get } { (unspecified font) }
										ifelse
										$str cvs print (.\n) print
										}
									if
									}
									{ exch pop }
								ifelse
								}
								{ exch pop }
							ifelse
							end
						} bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core /findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type /stringtype ne { $str cvs } if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{ dup $inVMIndex $AddInVMFont }
						if
						$doSmartSub
							{
							currentdict /$Strategy known
								{ $Strategy /$BuildFont get exec }
							if
							}
						if
						}
					if
					end
				} bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch /FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data /InVMFontsByCMap get exch
		$DictAdd
		}
		{ pop pop pop }
	ifelse
	} bind def
/$DictAdd
	{
	2 copy known not
		{ 2 copy 4 index length dict put }
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get { forall } def
				2 copy currentdict put
				end
			}
			{ pop }
		ifelse
		}
	if
	get
		begin
			{ def }
		forall
		end
	} bind def
end
end
%%EndResource
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.19 0
%%Copyright: Copyright 1987-2003 Adobe Systems Incorporated.
%%Version: 1.19 0
systemdict /languagelevel known dup
	{ currentglobal false setglobal }
	{ false }
ifelse
exch
userdict /Adobe_CoolType_Utility 2 copy known
	{ 2 copy get dup maxlength 25 add dict copy }
	{ 25 dict }
ifelse put
Adobe_CoolType_Utility
	begin
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch /eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{ globaldict begin currentglobal true setglobal }
if
	/ct_AddStdCIDMap
		ct_Level2?
			{ {
			((Hex) 57 StartData
			0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
			7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
			d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
			cc36 74f4 1144 b13b 77) 0 () /SubFileDecode filter cvx exec
			} }
			{ {
			<BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
			4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A> eexec
			} }
		ifelse bind def
userdict /cid_extensions known
dup { cid_extensions /cid_UpdateDB known and } if
	 {
	 cid_extensions
	 begin
	 /cid_GetCIDSystemInfo
		 {
		 1 index type /stringtype eq
			 { exch cvn exch }
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				 {
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					 {
					 1 index load
					 3 index get
					 dup null eq
						  { pop pop cid_UpdateDB }
						  {
						  exch
						  1 index /Created get eq
							  { exch pop exch pop }
							  { pop cid_UpdateDB }
						  ifelse
						  }
					 ifelse
					 }
					 { pop cid_UpdateDB }
				 ifelse
				 }
				 { cid_UpdateDB }
			 ifelse
			 end
		 } bind def
	 end
	 }
if
ct_Level2?
	{ end setglobal }
if
	/ct_UseNativeCapability?  systemdict /composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring () def
		/usewidths? true def
		end def
	ct_Level2? { setglobal } { pop } ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict /languagelevel known
				{ pop /CIDFont findresource /GlyphDirectory get }
				{
				1 index /CIDFont findresource /GlyphDirectory
				get dup type /dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			} def
		/+
			{
			systemdict /languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{ 1 dict begin }
			ifelse
			/$ exch def
			systemdict /languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			? { $ begin } if
			} def
		/? { $ type /dicttype eq } def
		/| {
			userdict /Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data /AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					  begin
						AddWidths?
								{
								Adobe_CoolType_Data /CC 3 index put
								? { def } { $ 3 1 roll put } ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont /Widths get exch CC exch put
								}
								{ ? { def } { $ 3 1 roll put } ifelse }
							ifelse
					end
				end
				}
				{ ? { def } { $ 3 1 roll put } ifelse }	ifelse
				}
				{ ? { def } { $ 3 1 roll put } ifelse }
			ifelse
			} def
		/!
			{
			? { end } if
			systemdict /languagelevel known
				{ gvm setglobal }
			if
			end
			} def
		/: { string currentfile exch readstring pop } executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		 /c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		 /c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		 /c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		 /c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		 /c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		 /c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		 /c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		 /c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		 /cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		 /cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		 /cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		 /cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		 /cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx [.001 0 0 .001 0 0] def
		/ct_1000Mtx [1000 0 0 1000 0 0] def
		/ct_raise {exch cvx exch errordict exch get exec stop} bind def
		/ct_reraise
			{ cvx $error /errorname get (Error: ) print dup (						  ) cvs print
					errordict exch get exec stop
			} bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			} bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility /ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{ dup string /dst_string exch def }
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex  get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string  dst_index 2 index putinterval
						length dst_index add /dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string  dst_index 2 index putinterval
						pop dup dst_index add /dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							  { arrayIndex get }
							  {
							  pop
							  exit
							  }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			} bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{ /unknowninstancename /Category resourcestatus }
			stopped
				{ cleartomark setglobal true }
				{ cleartomark currentglobal not exch setglobal }
			ifelse
				{
					{
					mark 3 1 roll /Category findresource
						begin
						ct_Vars /vm currentglobal put
						({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec
							{ cleartomark false }
							{ { 3 2 roll pop true } { cleartomark false } ifelse }
						ifelse
						ct_Vars /vm get setglobal
						end
					}
				}
				{ { resourcestatus } }
			ifelse bind def
			/CIDFont /Category ct_resourcestatus
				{ pop pop }
				{
				currentglobal  true setglobal
				/Generic /Category findresource
				dup length dict copy
				dup /InstanceType /dicttype put
				/CIDFont exch /Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit /ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				  /Registry (Adobe) def
				  /Ordering (Identity) def
				  /Supplement 0 def
				end def
				/CMapName /Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000> <FFFF>
				endcodespacerange
				1 begincidrange
				<0000> <FFFF> 0
				endcidrange
				endcmap
				CMapName currentdict /CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont  10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{ pop pop /defineresource /undefined ct_raise }
				ifelse
				} bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{ get 3 1 roll pop pop}
						{ pop pop /findresource /undefinedresource ct_raise }
					ifelse
					}
					{ pop pop /findresource /undefined ct_raise }
				ifelse
				} bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{ pop pop /findresource /undefined ct_raise }
				ifelse
				} bind def
			/ct_resourcestatus /resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup (Binary) eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{ cid_BYTE_COUNT () /SubFileDecode filter }
							stopped
								{ pop pop pop }
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup (Hex) eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{ null exch /ASCIIHexDecode filter /readstring }
							stopped
								{ pop exch pop (>) exch /readhexstring }
							if
							}
							{ (>) exch /readhexstring }
						ifelse
						load
						exit
						}
					if
					/StartData /typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch /GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop /readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				} bind def
			/StartData
				{
				mark
					{
					currentdict
					dup /FDArray get 0 get /FontMatrix get
					0 get 0.001 eq
						{
						dup /CDevProc known not
							{
							/CDevProc 1183615869 internaldict /stdCDevProc 2 copy known
								{ get }
								{
								pop pop
								{ pop pop pop pop pop 0 -1000 7 index 2 div 880 }
								}
							ifelse
							def
							}
						if
						}
						{
						 /CDevProc
							 {
							 pop pop pop pop pop
							 0
							 1 cid_temp /cid_CIDFONT get
							 /FDArray get 0 get
							 /FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							 } def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup /cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup /SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup /SubrMapOffset undef
										dup /SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{ pop }
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict /CIDFont defineresource pop
					end end
					}
				stopped
					{ cleartomark /StartData ct_reraise }
				if
				} bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit /ProcSet ct_resourcestatus
				{ true }
				{ /CIDInitC /ProcSet ct_resourcestatus }
			ifelse
				{
				pop pop
				/CIDInit /ProcSet findresource
				ct_UseNativeCapability?
					{ pop null }
					{ /CIDInit ct_CIDInit /ProcSet defineresource pop }
				ifelse
				}
				{ /CIDInit ct_CIDInit /ProcSet defineresource pop null }
			ifelse
			ct_Vars exch /ct_oldCIDInit exch put
			} bind def
		/ct_restoreCIDInit
			{
			ct_Vars /ct_oldCIDInit get dup null ne
				{ /CIDInit exch /ProcSet defineresource pop }
				{ pop }
			ifelse
			} bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility /ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{ pop 0 }
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{ get }
								{ pop pop nullstring }
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{ 0 FDBytes ct_cvnsi }
									{ pop 0 }
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{ /charstring nullstring def exit }
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			} def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			} def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont /Widths get cid
					2 copy known
						{ get exch pop aload pop }
						{ pop pop stringwidth }
					ifelse
					}
					{ stringwidth }
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			} def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{ get }
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup /FontMatrix 2 copy known
						{ get }
						{ pop pop ct_defaultFontMtx }
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont /Widths get def
					/CharStrings 1 dict dup /.notdef
						<d841272cf18f54fc13> dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup /CharStrings get 1 index /Encoding get
			ct_dfCharCode get charstring put
			rootfont /WMode 2 copy known
				{ get }
				{ pop pop 0 }
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ ct_str1 show }
			ifelse
			} def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup /FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ ct_1000Mtx matrix concatmatrix concat }
				{ pop }
			ifelse
			/Private get
			Adobe_CoolType_Utility /ct_Level2? get not
				{
				ct_dfDict /Private
				3 -1 roll
					{ put }
				1183615869 internaldict /superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility /ct_Level2? get
				{ 1 index }
				{ 3 index /Private get mark 6 1 roll }
			ifelse
			dup /RunInt known
				{ /RunInt get }
				{ pop /CCRun }
			ifelse
			get exec
			Adobe_CoolType_Utility /ct_Level2? get not
				{ cleartomark }
			if
			} bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility /ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{ stop }
			if
			end
			end
			end
			end
			} bind def
		/BaseFontNameStr (BF00) def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix  [0.001 0 0 0.001 0 0] def
			/FontBBox  [-250 -250 1250 1250] def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix  [0.001 0 0 0.001 0 0] def
			/FontBBox  [-250 -250 1250 1250] def
			/Encoding ct_cHexEncoding def
			/BuildChar /ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString /ct_Type3ShowCharString load def
				/ct_dfSetCacheProc /ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup /lenIV 4 put def
				/CharStrings 1 dict dup /.notdef <d841272cf18f54fc13> put def
				/PaintType 0 def
				/ct_ShowCharString /ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{ exit }
				if
				}
			for
			exch pop exch pop
			} bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch /WMode exch def
				exch /FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup /FontMatrix known
				{ dup /FontMatrix get /FontMatrix exch def }
				{ /FontMatrix matrix def }
			ifelse
				/bfCount 1 index /CIDCount get 256 idiv 1 add
					dup 256 gt { pop 256} if def
				/Encoding
					256 array 0 1 bfCount 1 sub { 2 copy dup put pop } for
					bfCount 1 255 { 2 copy bfCount put pop } for
					def
				/FDepVector bfCount dup 256 lt { 1 add } if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont /FontBBox known
						{ CIDFont /FontBBox get /FontBBox exch def }
					if
					CIDFont /CDevProc known
						{ CIDFont /CDevProc get /CDevProc exch def }
					if
					currentdict
					end
				BaseFontNameStr 3 (0) putinterval
				0 1 bfCount dup 256 eq { 1 sub } if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup /CIDFirstByte exch 256 mul def
						FontType 3 eq
							{ /ct_FDDict 2 dict def }
						if
						currentdict
						end
					1 index  16
					BaseFontNameStr  2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{ /Widths 1 index /CIDFont get /GlyphDirectory get length dict def }
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont /Widths get
						begin
						exch /CIDFont get /GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{ exch pop }
			ifelse
			} bind def
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{
				2 index /CMap ct_resourcestatus
					{ pop pop exch pop }
					{
					/CIDInit /ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch /WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry (Adobe) def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-) search
									{
									pop pop
									(-) search
										{
										dup length string copy
										exch pop exch pop
										}
										{ pop (Identity)}
									ifelse
									}
									{ pop  (Identity)  }
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000> <FFFF>
							endcodespacerange
							1 begincidrange
							<0000> <FFFF> 0
							endcidrange
							endcmap
							CMapName currentdict /CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get /CIDFont findresource
				ct_makeocf
				}
			ifelse
			} bind def
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index /CMap ct_resourcestatus
					{ pop pop }
					{
					/CIDInit /ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry (Adobe) def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-) search
							{
							pop pop
							(-) search
								{ dup length string copy exch pop exch pop }
								{ pop (Identity) }
							ifelse
							}
							{ pop (Identity) }
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000> <FFFF>
					endcodespacerange
					1 begincidrange
					<0000> <FFFF> 0
					endcidrange
					endcmap
					CMapName currentdict /CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get /CIDFont findresource
				ct_makeocf
				}
			ifelse
			} bind def
		currentdict readonly pop
		end
	end
%%EndResource
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2003 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict /ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
  version
  cvi
  2015
  ge
} bind def
/AllocGlyphStorage
{
  Is2015?
  {	
		pop
  } 
  { 
		{string} forall
  } ifelse
} bind def
/Type42DictBegin
{
	25 dict begin
  /FontName exch def
  /CharStrings 256 dict 
	begin
		  /.notdef 0 def
		  currentdict 
	end def
  /Encoding exch def
  /PaintType 0 def
  /FontType 42 def
  /FontMatrix [1 0 0 1 0 0] def
  4 array  astore cvx /FontBBox exch def
  /sfnts
} bind def
/Type42DictEnd  
{
	 currentdict dup /FontName get exch definefont end
	ct_T42Dict exch
	dup /FontName get exch put
} bind def
/RD {string currentfile exch readstring pop} executeonly def
/PrepFor2015
{
	Is2015?
	{		  
		 /GlyphDirectory 
		 16
		 dict def
		 sfnts 0 get
		 dup
		 2 index
		 (glyx)
		 putinterval
		 2 index  
		 (locx)
		 putinterval
		 pop
		 pop
	}
	{
		 pop
		 pop
	} ifelse			
} bind def
/AddT42Char
{
	Is2015?
	{
		/GlyphDirectory get 
		begin
		def
		end
		pop
		pop
	}
	{
		/sfnts get
		4 index
		get
		3 index
	  2 index
		putinterval
		pop
		pop
		pop
		pop
	} ifelse
} bind def
end
%%EndResource
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Image 75 dict dup begin put
/Adobe_AGM_Image_Id /Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf () def
/AGMIMG_ybuf () def
/AGMIMG_kbuf () def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/doc_setup
{ 
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage /colorimage ldf
	}if
	end
	end
}def
/page_setup
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists {/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				 }ifelse
			 }ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode [ Decode 1 get Decode 0 get] def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode [1 1] def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub} currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{ pop 1 } currenttransfer addprocs settransfer
		}def
	}ifelse
	/img /imageormask ldf
	/sepimg /sep_imageormask ldf
	/devnimg /devn_imageormask ldf
	/idximg /indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/page_trailer
{
	end
}def
/doc_trailer
{
}def
/imageormask_sys
{
	begin
		save mark
		level2{
			currentdict
			Operator /imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask {
					level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator /imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix /DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix /DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint {
		0 get dup type /nametype eq {
			dup /DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			} forall
			not
		} ifelse
	}{
		pop false
	}ifelse
}def
/process_mask_L3
{
	dup begin
	/ImageType 1 def
	end
	4 dict begin
		/DataDict exch def
		/ImageType 3 def
		/InterleaveType 3 def
		/MaskDict 9 dict begin
			/ImageType 1 def
			/Width DataDict dup /MaskWidth known {/MaskWidth}{/Width} ifelse get def
			/Height DataDict dup /MaskHeight known {/MaskHeight}{/Height} ifelse get def
			/ImageMatrix [Width 0 0 Height neg 0 Height] def
			/NComponents 1 def
			/BitsPerComponent 1 def
			/Decode [0 1] def
			/DataSource AGMIMG_maskSource def
		currentdict end def
	currentdict end
}def
/use_mask
{
	dup type /dicttype eq
	{
		dup /Mask known	{
			dup /Mask get {
				level3
				{true}
				{
					dup /MaskWidth known {dup /MaskWidth get 1 index /Width get eq}{true}ifelse exch
					dup /MaskHeight known {dup /MaskHeight get 1 index /Height get eq}{true}ifelse
					3 -1 roll and
				} ifelse
			}
			{false} ifelse
		}
		{false} ifelse
	}
	{false} ifelse
}def
/make_line_source
{
	begin
	MultipleDataSources {
		[
		Decode length 2 div cvi {Width string} repeat
		]
	}{
		Width Decode length 2 div mul cvi string
	}ifelse
	end
}def
/datasource_to_str
{
	exch dup type
	dup /filetype eq {
		pop exch readstring
	}{
		/arraytype eq {
			exec exch copy
		}{
			pop
		}ifelse
	}ifelse
	pop
}def
/masked_image_simulation
{
	3 dict begin
	dup make_line_source /line_source xdf
	/mask_source AGMIMG_maskSource /LZWDecode filter def
	dup /Width get 8 div ceiling cvi string /mask_str xdf
	begin
	gsave
	0 1 translate 1 -1 Height div scale
	1 1 Height {
		pop
		gsave
		MultipleDataSources {
			0 1 DataSource length 1 sub {
				dup DataSource exch get
				exch line_source exch get
				datasource_to_str
			} for
		}{
			DataSource line_source datasource_to_str
		} ifelse
		<<
			/PatternType 1
			/PaintProc [
				/pop cvx
				<<
					/ImageType 1
					/Width Width
					/Height 1
					/ImageMatrix Width 1.0 sub 1 matrix scale 0.5 0 matrix translate matrix concatmatrix
					/MultipleDataSources MultipleDataSources
					/DataSource line_source
					/BitsPerComponent BitsPerComponent
					/Decode Decode
				>>
				/image cvx
			] cvx
			/BBox [0 0 Width 1]
			/XStep Width
			/YStep 1
			/PaintType 1
			/TilingType 2
		>>
		matrix makepattern set_pattern
		<<
			/ImageType 1
			/Width Width
			/Height 1
			/ImageMatrix Width 1 matrix scale
			/MultipleDataSources false
			/DataSource mask_source mask_str readstring pop
			/BitsPerComponent 1
			/Decode [0 1]
		>>
		imagemask
		grestore
		0 1 translate
	} for
	grestore
	end
	end
}def
/imageormask
{
	begin
		SkipImageProc {
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator /imagemask eq DeviceN_PS2 not and {
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{
						[/Separation /Black /DeviceGray {}] setcolorspace
						/Decode [ Decode 1 get Decode 0 get ] def
					}if
					use_mask {
						level3 {process_mask_L3 image}{masked_image_simulation}ifelse
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not {
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file {
									Names {
										dup (None) ne {
											[/Separation 3 -1 roll /DeviceGray {1 exch sub}] setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq {true setoverprint} if
											/names_index names_index 1 add def
										}{
											pop
										} ifelse
									} forall
									close_image_file
								} if
								grestore
								end
							}{
								Operator /imagemask eq {
									imagemask
								}{
									image
								} ifelse
							} ifelse
						}{
							Operator /imagemask eq {
								imagemask
							}{
								image
							} ifelse
						} ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator /imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix /DataSource load
					/Adobe_AGM_OnHost_Seps where {
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator /colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource [
											DataSource 0 get /exec cvx
											DataSource 1 get /exec cvx
											DataSource 2 get /exec cvx
											DataSource 3 get /exec cvx
											/AGMCORE_get_ink_data cvx
										] cvx def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0 () /SubFileDecode filter def
									}ifelse
									/Decode [ Decode 0 get Decode 1 get ] def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator /image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
  			 							1 AGMCORE_&setgray
  			 							currentdict imageormask_sys
  			 						}{
  			 							currentdict ignoreimagedata
  			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator /image eq{
							AGMCORE_host_sep{
								/DoImage true def
								HostSepColorImage{
									invert_image_samples
								}{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}ifelse
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys} if
							}{
								use_mask {
									level3 {process_mask_L3 image}{masked_image_simulation}ifelse
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	/MappedCSA CSA map_csa def
	begin
	SkipImageProc {
		currentdict consumeimagedata
	}
	{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get /DeviceCMYK eq and
		currentdict/Components known and 
		Name () ne and 
		Name (All) ne and 
		Operator /image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load /exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			} /exec cvx
			] cvx bind
			MappedCSA 0 get /DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{ 
					currentdict
					Operator /imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name (All) ne and{
 								level2{
	 								[ /Separation Name [/DeviceGray]
	 								{ 
	 									sep_colorspace_proc AGMCORE_get_ink_data
										1 exch sub
	 								} bind
									] AGMCORE_&setcolorspace
									/sep_tint AGMCORE_gget AGMCORE_&setcolor
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator /imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name (All) eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					currentcolorspace 0 get /Separation ne{
						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentoverprint 
					MappedCSA 0 get /DeviceCMYK eq and 
					Name inRip_spot_has_ink not and 
					Name (All) ne and {
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	end
	end
}def
/decode_image_sample
{
	4 1 roll exch dup 5 1 roll
	sub 2 4 -1 roll exp 1 sub div mul add
} bdf
/colorSpaceElemCnt
{
	currentcolorspace 0 get dup /DeviceCMYK eq {
		pop 4
	}
	{
		/DeviceRGB eq {
			pop 3
		}{
			1
		} ifelse
	} ifelse
} bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub {
			dup currentdict /dataSource get /exch cvx /get cvx /exec cvx
			/exch cvx names_index /ne cvx [ /pop cvx ] cvx /if cvx
		} for
	] cvx bind
	end
} bdf		
/devn_alt_datasource
{
	11 dict begin
	/srcDataStrs xdf
	/dstDataStr xdf
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources {origDataSource length}{1}ifelse def
	/samplesNeedDecoding
		0 0 1 origDecode length 1 sub {
			origDecode exch get add
		} for
		origDecode length 2 div div
		dup 1 eq {
			/decodeDivisor 2 origBitsPerComponent exp 1 sub def
		} if
		2 origBitsPerComponent exp 1 sub ne
	def
	[
		0 1 dsCnt 1 sub [
			currentdict /origMultipleDataSources get {
				dup currentdict /origDataSource get exch get dup type
			}{
				currentdict /origDataSource get dup type
			} ifelse
			dup /filetype eq {
				pop currentdict /srcDataStrs get 3 -1 /roll cvx /get cvx /readstring cvx /pop cvx
			}{
				/stringtype ne {
					/exec cvx
				} if
				currentdict /srcDataStrs get /exch cvx 3 -1 /roll cvx /xpt cvx
			} ifelse
		] cvx /for cvx
		currentdict /srcDataStrs get 0 /get cvx /length cvx 0 /ne cvx [
			0 1 Width 1 sub [
				Adobe_AGM_Utils /AGMUTIL_ndx /xddf cvx
				currentdict /origMultipleDataSources get {
					0 1 dsCnt 1 sub [
						Adobe_AGM_Utils /AGMUTIL_ndx1 /xddf cvx
						currentdict /srcDataStrs get /AGMUTIL_ndx1 /load cvx /get cvx /AGMUTIL_ndx /load cvx /get cvx
						samplesNeedDecoding {
							currentdict /decodeDivisor known {
								currentdict /decodeDivisor get /div cvx
							}{
								currentdict /origDecode get /AGMUTIL_ndx1 /load cvx 2 /mul cvx 2 /getinterval cvx /aload cvx /pop cvxs
								BitsPerComponent /decode_image_sample load /exec cvx
							} ifelse
						} if
					] cvx /for cvx
				}{
					Adobe_AGM_Utils /AGMUTIL_ndx1 0 /ddf cvx
					currentdict /srcDataStrs get 0 /get cvx /AGMUTIL_ndx /load cvx		
					currentdict /origDecode get length 2 idiv dup 3 1 /roll cvx /mul cvx /exch cvx /getinterval cvx 
					[
						samplesNeedDecoding {
							currentdict /decodeDivisor known {
								currentdict /decodeDivisor get /div cvx
							}{
								currentdict /origDecode get /AGMUTIL_ndx1 /load cvx 2 /mul cvx 2 /getinterval cvx /aload cvx /pop cvx
								BitsPerComponent /decode_image_sample load /exec cvx
								Adobe_AGM_Utils /AGMUTIL_ndx1 /AGMUTIL_ndx1 /load cvx 1 /add cvx /ddf cvx
							} ifelse
						} if
					] cvx /forall cvx
				} ifelse
				currentdict /convProc get /exec cvx
				currentdict /origcolorSpaceElemCnt get 1 sub -1 0 [
					currentdict /dstDataStr get 3 1 /roll cvx /AGMUTIL_ndx /load cvx currentdict /origcolorSpaceElemCnt get /mul cvx /add cvx /exch cvx
					currentdict /convProc get /filter_indexed_devn load ne {
						255 /mul cvx /cvi cvx 
					} if
					/put cvx 
				] cvx /for cvx
			] cvx /for cvx
			currentdict /dstDataStr get
		] cvx /if cvx
	] cvx bind
	end
} bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	/MappedCSA CSA map_csa def
	2 dict begin
	dup dup
	/dstDataStr exch /Width get colorSpaceElemCnt mul string def
	/srcDataStrs [ 3 -1 roll begin
		currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse
		{
			Width Decode length 2 div mul cvi string
		} repeat
		end ] def
	begin
	SkipImageProc {
		currentdict consumeimagedata
	}
	{
		save mark 
		AGMCORE_producing_seps not {
			level3 not {
				Operator /imagemask ne {
					/DataSource [
						DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse
						colorSpaceElemCnt /devicen_colorspace_dict AGMCORE_gget /TintTransform get 
						dstDataStr srcDataStrs devn_alt_datasource /exec cvx
						] cvx 0 () /SubFileDecode filter def
					/MultipleDataSources false def
					/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def
				} if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process {
					CSA map_csa 0 get /DeviceCMYK eq {
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							[
							DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse
							4 /devicen_colorspace_dict AGMCORE_gget /TintTransform get 
							dstDataStr srcDataStrs devn_alt_datasource /exec cvx
							] cvx
						filter_cmyk 0 () /SubFileDecode filter def
						/MultipleDataSources false def
						/Decode [1 0] def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate {
							/DataSource [
								DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse
								CSA map_csa 0 get /DeviceRGB eq{3}{1}ifelse /devicen_colorspace_dict AGMCORE_gget /TintTransform get
								dstDataStr srcDataStrs devn_alt_datasource /exec cvx
								] cvx 0 () /SubFileDecode filter def
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def
				 			currentdict imageormask_sys
				 		}
						{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						} ifelse
 					} ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget /names_index known {
	 					Operator/imagemask ne{
	 						MultipleDataSources {
		 						/DataSource [ DataSource devn_sep_datasource /exec cvx ] cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource /DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						} ifelse
							invert_image_samples
	 					} if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{ 			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN [
				AGMIMG_c 0 ne {/Cyan} if
				AGMIMG_m 0 ne {/Magenta} if
				AGMIMG_y 0 ne {/Yellow} if
				AGMIMG_k 0 ne {/Black} if
				] /DeviceCMYK {}] setcolorspace
				AGMIMG_c 0 ne {AGMIMG_c} if
				AGMIMG_m 0 ne {AGMIMG_m} if
				AGMIMG_y 0 ne {AGMIMG_y} if
				AGMIMG_k 0 ne {AGMIMG_k} if
				setcolor			
			}{	
				/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def
				[/Indexed 				
					[
						/DeviceN [
							AGMIMG_c 0 ne {/Cyan} if
							AGMIMG_m 0 ne {/Magenta} if
							AGMIMG_y 0 ne {/Yellow} if
							AGMIMG_k 0 ne {/Black} if
						] 
						/DeviceCMYK {
							AGMIMG_k 0 eq {0} if
							AGMIMG_y 0 eq {0 exch} if
							AGMIMG_m 0 eq {0 3 1 roll} if
							AGMIMG_c 0 eq {0 4 1 roll} if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				] setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation /Black /DeviceGray {}] setcolorspace
			gsave
			/Black
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Yellow /DeviceGray {}] setcolorspace
			gsave
			/Yellow
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Magenta /DeviceGray {}] setcolorspace
			gsave
			/Magenta
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Cyan /DeviceGray {}] setcolorspace
			gsave
			/Cyan 
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		} if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
} def
/indexed_imageormask
{
	begin
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup /CSA known {
					/CSA get map_csa
				}{
					/CSD get get_csd /Names get
				} ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN {
					/devicen_colorspace_dict AGMCORE_gget /names_index known {
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					} ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator /imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN {
					/indexed_colorspace_dict AGMCORE_gget begin
					CSD get_csd begin
				}{
					/indexed_colorspace_dict AGMCORE_gget begin
					CSA map_csa 0 get /DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and {
						[/Indexed [/DeviceN [/Cyan /Magenta /Yellow /Black] /DeviceCMYK {}] HiVal Lookup]
						setcolorspace
					} if
					end
				} ifelse
				imageormask
				Indexed_DeviceN {
					end
					end
				} if
			}{ 
				Operator /imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not {
			currentcolorspace 
			dup 1 /DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		} if
		currentdict 
		Operator /imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask {
				level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
  /OPIimage
  {
  	dup type /dicttype ne{
  		10 dict begin
  			/DataSource xdf
  			/ImageMatrix xdf
  			/BitsPerComponent xdf
  			/Height xdf
  			/Width xdf
  			/ImageType 1 def
  			/Decode [0 1 def]
  			currentdict
  		end
  	}if
  	dup begin
  		/NComponents 1 cdndf
  		/MultipleDataSources false cdndf
  		/SkipImageProc {false} cdndf
  		/HostSepColorImage false cdndf
  		/Decode [
  				0 
  				currentcolorspace 0 get /Indexed eq{
  					2 BitsPerComponent exp 1 sub
  				}{
  					1
  				}ifelse
  		] cdndf
  		/Operator /image cdndf
  	end
  	/sep_colorspace_dict AGMCORE_gget null eq{
  		imageormask
  	}{
  		gsave
  		dup begin invert_image_samples end
  		sep_imageormask
  		grestore
  	}ifelse
  }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter /WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0 (%EndMask) /SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not {exit} if
	}loop
	WriteFilter closefile
	end
}def
/cachemask_level3
{
	currentfile
	<<
		/Filter [ /SubFileDecode /ASCII85Decode /RunLengthDecode ]
		/DecodeParms [ << /EODCount 0 /EODString (%EndMask) >> null null ]
		/Intent 1
	>>
	/ReusableStreamDecode filter
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type /dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode [/customcolor_tint AGMCORE_gget 0] def
				/Operator /image def
				/HostSepColorImage false def
				/SkipImageProc {false} def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		bdict
			/Name AGMIMG_colorAry 4 get
			/CSA [ /DeviceCMYK ] 
			/TintMethod /Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components [ AGMIMG_colorAry aload pop pop ] 
		edict
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage /customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		dup 4 get map_alias{
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
		}{
			AGMIMG_&customcolorimage
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt /AGMIMG_xSign? exch def /AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch
		AGMIMG_xSign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch
		itransform /AGMIMG_llY exch def /AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch
		AGMIMG_xSign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch
		itransform /AGMIMG_urY exch def /AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub  AGMIMG_llX AGMIMG_llY] concat
	}{
	}ifelse
	end
} def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					} if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf} true 4 colorimage	
		end
	} def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				} currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get /DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub} currenttransfer addprocs settransfer
						currentdict imageormask
					}{ 
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub} exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get /DeviceGray eq {
						{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get /DeviceCMYK eq {
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{ 
							currentcolortransfer
							{pop 1} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{ 
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get /DeviceGray eq {
					{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get /DeviceCMYK eq {
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{ 
						currentcolortransfer
						{pop 1} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div} exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/doc_setup get exec
Adobe_CoolType_Core/doc_setup get exec
Adobe_AGM_Image/doc_setup get exec
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: App:91 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/page_setup get exec
Adobe_CoolType_Core/page_setup get exec
Adobe_AGM_Image/page_setup get exec
%%EndPageSetup
Adobe_AGM_Core/AGMCORE_save save ddf
1 -1 scale 0 -841.89 translate
[1 0 0 1 0 0 ]  concat
% page clip
gsave
newpath
gsave % PSGState
0 0 mo
0 841.89 li
595.276 841.89 li
595.276 0 li
clp
[1 0 0 1 0 0 ] concat
gsave % PSGState
-1785.83 -71.9996 mo
0 -71.9996 li
0 913.89 li
-1785.83 913.89 li
clp
grestore % PSGState
gsave % PSGState
0 -71.9996 mo
1785.83 -71.9996 li
1785.83 913.89 li
0 913.89 li
clp
grestore % PSGState
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
false sadj
107.18 70.5319 mo
198.518 70.5319 li
true sop
/0 
[/DeviceCMYK] add_csa
0 0 0 1 cmyk
@
107.18 84.7052 mo
198.018 84.7052 li
@
107.18 98.8784 mo
198.018 98.8784 li
@
198.518 113.052 mo
212.553 113.052 li
@
212.553 113.052 mo
259.075 113.052 li
@
259.075 113.052 mo
372.092 113.052 li
@
198.518 127.225 mo
212.553 127.225 li
@
212.553 127.225 mo
259.075 127.225 li
@
259.075 127.225 mo
372.092 127.225 li
@
107.18 141.398 mo
198.518 141.398 li
@
198.518 141.398 mo
212.553 141.398 li
@
212.553 141.398 mo
259.075 141.398 li
@
259.075 141.398 mo
373.092 141.398 li
@
198.518 70.5319 mo
212.553 70.5319 li
@
212.553 70.5319 mo
259.075 70.5319 li
@
259.075 70.5319 mo
372.092 70.5319 li
@
259.575 84.7052 mo
372.092 84.7052 li
@
259.575 98.8784 mo
372.092 98.8784 li
@
107.18 113.052 mo
198.518 113.052 li
@
44.4843 127.225 mo
106.68 127.225 li
@
106.68 127.225 mo
198.518 127.225 li
@
2 lw
4 ml
true sadj
47.0157 54.8587 mo
47.0157 54.8587 35.0157 54.8587 35.0157 66.8587 cv
35.0157 134.402 li
35.0157 134.402 35.0157 146.402 47.0157 146.402 cv
367.787 146.402 li
367.787 146.402 379.787 146.402 379.787 134.402 cv
379.787 66.8587 li
379.787 66.8587 379.787 54.8587 367.787 54.8587 cv
47.0157 54.8587 li
cp
@
1 lw
10 ml
false sadj
464.17 84.7052 mo
513.503 84.7052 li
@
513.503 84.7052 mo
522.007 84.7052 li
@
522.007 84.7052 mo
552.061 84.7052 li
@
464.17 98.8784 mo
513.503 98.8784 li
@
522.007 98.8784 mo
552.061 98.8784 li
@
463.67 141.398 mo
513.503 141.398 li
@
513.503 141.398 mo
522.007 141.398 li
@
522.007 141.398 mo
553.061 141.398 li
@
464.17 113.052 mo
513.003 113.052 li
@
522.507 113.052 mo
552.061 113.052 li
@
464.17 127.225 mo
513.503 127.225 li
@
513.503 127.225 mo
522.007 127.225 li
@
522.007 127.225 mo
552.061 127.225 li
@
404.72 141.398 mo
463.67 141.398 li
@
513.503 98.8784 mo
522.007 98.8784 li
@
2 lw
4 ml
true sadj
407.961 54.8587 mo
407.961 54.8587 395.961 54.8587 395.961 66.8587 cv
395.961 134.402 li
395.961 134.402 395.961 146.402 407.961 146.402 cv
548.26 146.402 li
548.26 146.402 560.26 146.402 560.26 134.402 cv
560.26 66.8587 li
560.26 66.8587 560.26 54.8587 548.26 54.8587 cv
407.961 54.8587 li
cp
@
1 lw
10 ml
false sadj
451.406 50.4159 mo
553.508 50.4159 li
@
104.519 192.422 mo
370.747 192.422 li
@
104.019 206.595 mo
370.747 206.595 li
@
104.519 249.115 mo
370.747 249.115 li
@
104.019 263.288 mo
371.747 263.288 li
@
104.519 220.768 mo
370.747 220.768 li
@
44.4843 234.941 mo
104.019 234.941 li
@
104.019 234.941 mo
370.747 234.941 li
@
44.4843 206.595 mo
104.019 206.595 li
@
43.4843 263.288 mo
104.019 263.288 li
@
2 lw
4 ml
true sadj
47.0157 162.575 mo
47.0157 162.575 35.0157 162.575 35.0157 174.575 cv
35.0157 256.292 li
35.0157 256.292 35.0157 268.292 47.0157 268.292 cv
367.787 268.292 li
367.787 268.292 379.787 268.292 379.787 256.292 cv
379.787 174.575 li
379.787 174.575 379.787 162.575 367.787 162.575 cv
47.0157 162.575 li
cp
@
1 lw
10 ml
false sadj
405.22 192.422 mo
512.941 192.422 li
@
526.193 192.422 mo
553.134 192.422 li
@
405.22 206.595 mo
512.941 206.595 li
@
526.193 206.595 mo
553.134 206.595 li
@
405.22 220.768 mo
512.941 220.768 li
@
526.193 220.768 mo
553.134 220.768 li
@
405.22 234.941 mo
512.941 234.941 li
@
526.193 234.941 mo
553.134 234.941 li
@
405.22 249.115 mo
512.941 249.115 li
@
526.193 249.115 mo
553.134 249.115 li
@
404.22 263.288 mo
512.941 263.288 li
@
526.193 263.288 mo
554.134 263.288 li
@
2 lw
4 ml
true sadj
407.961 162.575 mo
407.961 162.575 395.961 162.575 395.961 174.575 cv
395.961 256.292 li
395.961 256.292 395.961 268.292 407.961 268.292 cv
548.26 268.292 li
548.26 268.292 560.26 268.292 560.26 256.292 cv
560.26 174.575 li
560.26 174.575 560.26 162.575 548.26 162.575 cv
407.961 162.575 li
cp
@
0 0 0 1 cmyk
%ADOBeginSubsetFont: GoudyOldStyleT-Bold Initial
%ADOt1write: (1.0.21)
%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /GoudyOldStyleT-Bold def
/FontInfo 5 dict dup begin
/ItalicAngle 0 def
/FSType 8 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /space put
dup 40 /parenleft put
dup 41 /parenright put
dup 78 /N put
dup 97 /a put
dup 109 /m put
dup 110 /n put
def
/FontBBox {-153 -260 1104 889} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
8 dict dup begin
/.notdef <1C60D8A8C9B8707CDCA70DA9E045BA26887258C68603A6E1222E17
D0A81751218280F6> |-
/space <1C60D8A8C9B8707C25> |-
/parenleft <1C60D8A8C9B8524CA9F1477F5B5013504D8B4F641FA74E8A85DE
8B9DDE3FBF929706E738C23AA292594FD11576B43DA4877D22EEA85D4FD580B6
2BAE5236B4B9189D822D5C91B4F7C764003CECB3FAF7CDC6A7D5DA32ADDF25C7
219523E4F88E4221AFE1AFB759D7B9CEECBBFF2538937B7B8FBDDBF6610D30CF> |-
/parenright <1C60D8A8C9B8524CF77E5FC520DAE22E866F67624E5EA804CE9
32F833C5AEC84B0A1C9C0171A31131A617A9D88FC659EFE29B96DAC59B8355B8
6791AA1B2380525401C6574E2A17171B1F1CD7461AE39360B0EBA607063068F0
DF9FA843AFC67B0D109DD5C85751395FF696CFDAB4A3CED81> |-
/N <1C60D8A8C9B6EA91C137837772DFC231F6846C338ABF632DE9CCA65E9AC8
8959B3C41E3600E080C189D26C83681E8EFDDCDDA07A070EE23B13EF8B883598
61587494528C80E3BCE6FFE90A315315CF31B588089DF3AFC1099194160C43F7
0390CF96DF389EAC9794DCA27B9A1BEED6E470457664B7BC9612E906221CABFB
8D801C28424D957A32BA1DDB48C9E223D21478976CCAAF288C5620B51A012C86
841F2EB293ABBB8CC0136A9B189EFE0E14FB88D38DF3974EAF97143A0D0C3305
F5A05C75B8B9A6EBCABC5C1DCF303713C46D344E7334EA0917F6ADE2C6277A98
0B0C9E5277F072E18C943EE418473DC93508572D2CCE8643BE7C0971DDC157D9
5205E801DE66810B8B8AC24CCB196BD0B2F2E57A442412F1CB823BC1062544CB
AB7A39E5391054B12EA94CB77736D2BC9DB217955EB34FA86C7C461786C2> |-
/a <1C60D8A8C9B71063316F2150CB4D01FBDDA91DF7213FB202A93FB50AEFE9
B86FE2E14696BF7E63396E9BFCC71290E16F471FCF45FDF61F5A40BFE46B251C
751D9C2079285B71FBD3C940E6069F8E3BB37DC39AC6C726E2A738A58D177EEC
B320B35B991363E5BFF94C8E1162F65DFDDDF5C931F4B79BF9F3CF0D5591F9A8
25533EC572988C2C4CA4D23313CDE0D156FAC3B95BA2EFF2FCA1D0397E5B0E50
F588B90698B5ABC3CB1F7BDDDC5A1EE6EE5DF9074ADC589B73EE3C02CA1B0E8C
08C663AA4728911D130C440E6FD344CBCB32EF944441F54AF1F2FF5AC1645E37
8EC8063E4799EF916159D9D6147CFBF73C0F11F7EEFDCFBFE6DB9C21B26B2955
9B8B3B42C914084F99> |-
/m <1C60D8A8C9B6AA0CA5469988104DCB402A1E07F90A374EB8A35A5ADA1285
C258952712FA2B2B500775BA9FB01415FF1FF03631C660CD8092F14279C72F72
A264391E2492A0E9455CF569FC4AB12988A5D84F960FB3B7932A4E37557368F3
314B1FF756F578375988450D64BC5531B9A9386BB3CAB639521DF49386D06629
5634EEC14449AD501C3E952B85D04DB14D038648A57824821E3F94DA4B6F39BF
FA4B056BA8F81792B95C5B31D8A91008F330B718706A533D8E011CB4AFA568C4
79D082770CC60357F1D621C8BAE68CE8A77763B3559CAF8B2DBE6B79595FD456
FF08B7FFE8BA11F9B9A5E9DFBC0DA46FE6D78003CBB03DF39D7D9E8082EB31C5
B98C93727DA6E2335657950BC20C8D7C244F6475322D7DF5F16A933A19E9BDB8
8A0D1996E705689ED08CFF8E479767015074920AFD7A47B26008FD9BACA284CD
621F2F114077E9217AC6D5DA51B56BB65CFB15486731BAE54ADB8D92CE93926A
F82EDD02EC4087E4C380814E7E417DFCBB1188B48E53422B18E78D4BED87AF2F
7FFA925C9AE26F67CF058B04FC70EBBC2551213A8597078A69B45ECAB97DF6A7
4A9A0AB79888E0B9F653F353AF7F6E40F2FC76C0AD1AAC515D0D346EE409196B
5A2D49BA7B5A96876A153D29C583FD1040B9604D52A2762E39CC923B> |-
/n <1C60D8A8C9B7E52216721CFDAF04C934B0B9A7D01C98B9FB88E40F18155D
089D6D8161B41CFC54407C89AB7574E3A3DFB78320DCB528D781B6882CC86C8A
053AC90A8BF4BBE313393AE1CC917A8935DC3C209CA469045A4814D2766CE875
93D3A797255610F0470FC41D06227774B6C4D701FC2B64107B2B629E577F742A
27E8992C35D38F62A1D5F2419503372E41B3142D9DB5EAC216E3D3F69CD5A392
F0A5FF47A08C0C68012317012B13138919C7755A0519FC97572C18B0F74A2006
3E2FF4E6F2806698AB1F9429E0B569B6188D4A262B4111904467B7F1E5B7A4C0
B010B7A7DBDE120197BF2ED1F7929ADEE930EDD5F12CAAD9BBE014E4EC5AD778
876011F50B51243CF4165D8BA6CA90E89A00D9E5E2840ACD3288C92B0BDCF0A7
3285ED57F6A077B4338580D1A8896902478187710032B4FBB86BC74F939A7127
FBF368511BB92DD2556B98E5F7CB19EBAD> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/FKAHJM+GoudyOldStyleT-Bold /GoudyOldStyleT-Bold findfont def
/FKAHJM+GoudyOldStyleT-Bold*1 
[
32{/.notdef}repeat /space 7{/.notdef}repeat /parenleft /parenright 36{/.notdef}repeat /N 18{/.notdef}repeat 
/a 11{/.notdef}repeat /m /n 145{/.notdef}repeat
] FKAHJM+GoudyOldStyleT-Bold nfnt
FKAHJM+GoudyOldStyleT-Bold*1  [12 0 0 -12 0 0 ]mfnt sfnt
44.4843 68.5104 mov
0.193359 0 97 -0.193359 0 (Nam) awsh
68.4081 68.5104 mov
(n) sh
FKAHJM+GoudyOldStyleT-Bold*1  [10 0 0 -10 0 0 ]mfnt sfnt
342.987 66.7214 mov
(\(        \)) sh
%ADOBeginSubsetFont: GoudyOldStyleT-Regular Initial
%ADOt1write: (1.0.21)
%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /GoudyOldStyleT-Regular def
/FontInfo 5 dict dup begin
/ItalicAngle 0 def
/FSType 8 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /space put
dup 67 /C put
dup 72 /H put
dup 75 /K put
dup 85 /U put
dup 97 /a put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 104 /h put
dup 105 /i put
dup 106 /j put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 228 /adieresis put
dup 229 /aring put
dup 246 /odieresis put
def
/FontBBox {-170 -264 1197 875} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
25 dict dup begin
/.notdef <1C60D8A8C9B8707CDCA70DA9E045BA26887258C68603A1F9C807F4
C47EFC33B4146093> |-
/space <1C60D8A8C9B8707C25> |-
/C <1C60D8A8C9B63B8D96009BC1F3F7FB98A393D66036A72717677A84B72C84
656A21641DEA827C625D72370E1BDFA9C4F47A936F8771754B23D5E785C19CD8
A4C3469C24FBF6918CE236AF7D08EF5C61785FA113B0BCB9C148FACC2E3E3BFF
203176112D3B445FB1C9E9EE18909C9FD27B538603B0C2EA35FC98F71C0F0C41
04554C96B549CBB19FE3783C92B2B104E16F9CCAE78DAA232D7FB061B189979C
74E7BF558464D37264FB8766DB602E9719A46128EF77AADC77DF6D9F0EB490A9> |-
/H <1C60D8A8C9B6F3D32BC19EE132313857C1AF86C84C6FA5EEBD2DD9FEDC43
B3B37A64E0C59E7F388B4F5A0B531A8FE633BD65EF8F116C1EF33F138E0FA64A
0E84A83A3CA67F82CE8A5DD6130F6DE3C9E2FE021D5CB71F9EA32BEFB0E49470
8C41B25975CA4CDA374609E2C5E47B58B8E30E01B7727C6C2790C30126E408FE
5E36D9C4A63823258DAC976D56EE3D570C200743F0BF6DE73DFFD4CBBE284035
BC6F77AD8E278071A8B9061796446F3A67CA92DF6AAB032DDEAB191296BD4EB5
27DA11607AD6D121AFB9E92BA874897032F3E36F5318DF814B6A0165CF798BB5
4AFCD47DED252647CAADB2D18518A4D39CF4B90562ACA4E64EB2968952C70EEC
F3E5023DB6EB998FA1EA1B4CA386FD321F8FCC8A72A50CB689046E87625B24A7
3A1748318782EFD8E16E82C9A0F149F4B1594291ACF3FC2376A215E47F9827AF
16BC09AD33B7B76A2A73606DAD7747676A39FEC2C2F986A94DFD58888D8A2ED0
77712C4B3AE56E04F8C60AAB13D9366B9668B7C17EB1BDDBD517E43709A2BBE8
8C74586596AA49CB533D8A0C1EED99B9EC651674EFC2DFAF6F913869D306EC6A
7634CED320C840F73638AA8DC657> |-
/K <1C60D8A8C9B67F5841D62CD09641442FBBC2903C3ED6063558748176C7C6
B3D14DC85010B132FC8A307313D7E6AE129D666D72C4A5F8E8E58CB8B5AC019E
BEE5A0CAD906511F6CA1790AFA997854B5AD1E0F841555E7EDBD8C51DF592744
8FA1D78965FBC5021E8ECF21FC87C84A111A7286DECEC1361779FD9BCCE946D1
A506733079F7DF15DEFB42A309F27CC4818C8EE34BA1EB207240DA8D1292725C
091C039D0BF1B8EDF47CC0C818BEB87CF32DB1A807A57D2E87C51196387E390A
A292C93F7F83D772924DF031E3C37A8EDEF98B33D99659AA7BFFC9F7EEC8A163
726E976EA38123AB2EFA5F307B1845BC00C1D2D1EB0A0527C5D19F470CC03079
33B1735FBF411B7C6A8D83A6143379057A5A1F780550BE7E2EFEC58CFF0C09B6
CD5FE5D3B38AB85B3E3310A5D161B5115B6C0734789128C127F160FFF2E01D6A
5231AF380E5AA193BE8A1FE48DA4C4308A18A80895FD81DD2219745F7E367E4E
0BCCBF22BC4A5843BD43C6E3962DCC831CE114BC82D7D428A69DF3A2A30A9545
E38A3FC9099903BDAAB43D952F1C3D8FE8E89A05> |-
/U <1C60D8A8C9B6FA8E89AB9D4D70BDEBBB9C39DAF7AB6641AA0AE1A9C66178
8B42A6C00B82E9DD06F2AEB2DD9BFEAD586B302A4FD311E3F9C7A5F9C6562E88
63B0CC1837A059F7E3B226C90203A72AE0068AEE0A94758CD52712B217141620
17600C666AEA7BBEA6C65FA84C0D1482FB41F42D5355D455A3B64B4266C08327
FD4B075123BAF14093ACABD6AF122E41D1B8DE027A0967BE10E8ED3DE7A59D7C
70ED512E244FC9067D5E8E2064B4689FBE41C59708E2096A042B4F8838CFD85C
D68D89DD94694F53AE9798991A4D00053F46E461BEA89FABFA3515D34EEF3260
7BBD72CBB812A9ADEEC75B9F9828EA93DE0AC441D666D637A5C431F12B393DAC
4FB91AA118ECCF5CA97FADD7> |-
/a <1C60D8A8C9B714A5671293DEFE6C57D6875E299598ACB28384131A7885DD
23C3D4095481E544F5F5AF153B6EB5A400CE895325C5C31FE24D624925615426
10F98E367826FE64982A373870D8312CD0F5BAE108AFF21581F0F605A8698BF4
110137A7EA268963E2F429E1474C8BD0578D3EB44E0C8C3E05DCC58F04E56F7E
F030ACD0620F2CFE7CAF19D782EC5C976CC3B0A13E68881BF5A679F1A3A222E2
5EE60A324E20E3CFFCF9490F4D0D3EDC951DED0A983140903F9C4A4C4765364E
1C5F802D374B6963F4854706C56D118FF73C29B77D03EF9E7C749B4D187765E5
A6612309B000CDBAE24AEB3875> |-
/c <1C60D8A8C9B70C397866F9CA7D1E9E204ADFE6724F1B92C41558EDBA4B4E
AFADF3BF5AC464B298BDC1DB2A6A8ED6807A2A0D4753AF86A5EC26A95ECEC703
73312797AA026F0CA4503934C7447DA9C51B8259C1A3B786027B63A995608EEA
97B8DED8A8EE194E8FC725E187E371D5F8EC49B3566A9A20178C79CDB91364D0
32734DF9CFA1048E478006B6B6993AE71180EC25CABE008FCDCA> |-
/d <1C60D8A8C9B7B202AAEF9B095A12E12D20CE60AEAFE7299666576FABAAD6
53CE38165A1AC0D86DE8C9364447498E148FA2F1E3265CE8021A78CCED664A8C
DCCF19470FBFA67546775202357773A5469B8AB561B5B8873AAB8B08D2F8327A
46D18C09343F9F30425878E0391FB5C27FFF673584647B59EE74DCD330061825
2918F43593F3DE89664B4751674DD230867BB84EC27E5E6C73DB0003A388814B
15FB5967AB1C6DA5AFECDFB358D9869E1AD95B9A7CF4EC677BB86017B2648B58
E9D1FA458EAD49CD28231E34F11E12C137EB5205DC0DB311B9FDF673F64B0EF7
013404A9688BA4B4EB75BFADE6E0> |-
/e <1C60D8A8C9B718ECDE1558181C1B05F366572359E6F763855BFBE84DBD4A
42C0D74867F6268139B32E838E2505FA8901680AEAF1C9DC950661A70F70B63E
0E71D69E68AE302C1195C614EE7CEE18BE4E1FBE8C99D9E64F2BB15CACC59B87
6F54382E11C742E86A0CB812377574D80D47343B3DAD1579C9F3DAEDB6FF9814
A2BAF14B2D91518E6EB6056804514FB1A01D912152D331FB915ADEC8CDC64FE5
C7AAF60F8E3C> |-
/h <1C60D8A8C9B79D2DA85E4BB9C0710568E72B14127816420F2D67619ACB83
03D365EEBEF7D7DCC33ED3E4E05AECDABDB20F557279B3C47B0B829FC469789F
5D2AE0DD8DAFE2C46B9F50D8590FDC56BE741172AB4ACED0113EBD5448D80F99
D45E6FDF7E26456E72DD4A60CE37BF180C1741DA84774C83C5B2BFA0ADBF2F86
B38C5D9E59C373E447F589159719AD5D90E182735B489069B8FB340F51CC365A
8D20EA01296C0B2B20D868FF651EFE5C13FFBD88BA6F7CA047AD798BA887559A
2BE2B2C5401CCA44D2D26ED1E72AABFC8676908E7DA43580E0A3A7F653C8DD66
E46BEFF6E4E66BD68212477B7E70F37B3E9B20ACAAD6CA8004A19302783E01F9
70F79916FF67FBE1FA488CB5A58A2A2220C22E8FB4FBEE0C94E6D3070486DC7A
B86A3CBD4D6B8C679A30D57577CA08BBFBC003CE90> |-
/i <1C60D8A8C9B8622A6D8E622FAF20DC047C6AC293B930CF919D5F42C58974
891B852F21EDD23644EAC14B82C5A74CA2A9C4935A274945261833B9D11E2D0F
F9AE43E8B032F755D65BAB66835ED72D9A7CF1B8235139213C4CAE5420534F33
E0C05D2CA66B78F4EF808C9F6CBA6F9B123C05F3D889EFAE74BA03F6985F559D
B6F4FAA05914F3EF26B279ADE79E44E6C5B865FA5C2C619A237FFC975023BAD1
342A4B4EFBD3DBD92A6A32143920137AFAC0C6A065AA6491DF8E2550D2BC005E
C1527268A8A635C9C141401513C7165A85F8BA761D5640473A6C71> |-
/j <1C60D8A8C9B876459E5F8332BBFA060291F9D1261DF30CE9C7E084491F27
B4445B52FFFCCE10DE9D40F1AF13807F62432D0393E57AEE0AF6F44F393DE3E9
1AA676B2896AFA6D458E29D389E997D7953243368854F66B9F9F7ADF5AD893D7
BCBCD98E24A858128CB15E40BC8550C06097401400902855CF82ACECE61AF5CC
D01286C6DEB6A6AE929E76AA948536108875C4D2862397AD39BFF87367251D87
99F4F28F128261F47F84A6105BA7F3171D7267454B57D44376CFEE634BE66FDE
90744DD9B6391E8EFB977D5F4E3158B94084A650ADDB> |-
/k <1C60D8A8C9B7594674447212FD29AC34C8896254D7FA3AAF7ACC5C0B1594
9A2A4FC536BBFF9AF24036AEF6C172CA217CD28CC64C2658E365AFAD75198E29
A2887EB64BC01998EEB7AC7CEE1D974691A8B887F2653DFEB387DA1E83C33E8A
E7CFA876DAECC4FBDE2AD21D0A52E30D2C1ACFDB0C883FFD1FF8FACFAEEB9C5B
EB119698D91C45CA407162013444D90159CDF889DC14469E60625FFDB14CDAFC
DCD499E8D99C120198EC30402021C6FC16EC16C4B0AF7DD63B129A94B543B2D8
000D6F28C637F3A4F4C66C05859DB33B7AD7D9A37107AB5342D93E39D71D736E
2EAB08E69F5A160AF039AF14E0321FBB62E76A63772D079CF53468A8244B7E1E
94411D9C2179743354C7D3C76F0B306B7ACB072C6001A68C8ABA5A12D8FE72EE
DEFAA004C4DFF1DC18060E77FD0A66460E793AF76B01> |-
/l <1C60D8A8C9B86C3576F8EA80AD108CEBD858C2B6E42F6743A142671767FA
1ADBBA0402F0266D0F9182C890CE21F98DB1D542C5F61A25D8D90974347846B2
D11BB8362D53872F875C0DF0346F1B2853F4F836119060BFD5667C5CF3B90D68
BED1951CF1FF079CABBEE4C4C4CCAF0FF29C46CE93A12DB80EFC64A7187F38A1
44155CC42371C44879E998868BCE74DE5EE8A713F6AED19D9F84217F3AD23EBE
04FABE6963CD1E> |-
/m <1C60D8A8C9B6C7692E8C8734BEB21FB5DBBE8CBDBC5578DF313D897DC8D5
C7AB1288EB0AC0D203D799978E708681C371AA153DD1233D6B4AB0443DB28836
8663D2DDE5A90678817D641C759867B4EC38701D4163F9C45DE11097659B79F3
E44048AF937ECB4C4F7A09B676F567072DFBBDDEC3214D05EA2C5AAF165CF625
4F17C1EC5E452334BC1893A6DF3EA4C55F4F5A806BA06083480AE647270109A8
D195C125311B20D879410C1A03E8D0D71EE9982BF8A4046351E5493C55BDA395
90FE100F8A2A429555E19238C0EE4BC1DD2A13E477129A102693A8761C61614E
E392EE77E3DB827F9BB0AE1F44A402E976A89F125CE537C65D3992D675607639
9DC37F0D55545845F8EE81B10DFAD6A128019EC83062DD990AAC888BECEF6320
85AF04570840DE2A4126EDB48FD79AF820194FC9124F10CB2B6277EF968DA7B4
9C57D92F902EB8C08B4C69E0B80B77DD6E993A915D75C8C08F2C4C5DD1DC3599
B5220298FC1CA01AD254B70CFA66423E5F129BC2765000DE2CE4590CEE10E4EB
FD24AEEE662C9764816CB189447DACD753975AFC1750E62B4787A911D9255BFF
F9DD5278A654A864CFF8736F8FD5A129DB4F828500427DC5130940DD2AD7B839
F3D4> |-
/n <1C60D8A8C9B795A0B11A6060524103C6569A97CFE305FF5E5161FAD887FF
6A52E8807F5420CDF1D6D4192EB21B3E1D3F4F733BAB7372CD0E498759DE5777
66FFFF35270AC446279FDC2214389E55844EF94B30FF1A8C33A80404E4AA4249
A1473597CBD89174D548F9F8DEE822522B20B7684F9C4A06AD4A8BCE11B12AAD
7B77CF8ECF4B7CC055BB54837F860A7EFF65D2C399F2BAF5B61B3598B5D5906B
6C3E7B5216A98DD416E5489D9ADB69AF534E254518014F98B4E94C3D4E115E30
2AADE19AF25D2F2F7317AD198C95638D309D4EBF6988611AA2B1FDB64DD69C4F
6D2A34B8E289DC0E74B5F21D827C262A23958BC006CEEF2FF69A09E037CB7FBD
BBF95382A0F68EBD6CBBDAA178FB51104B711EADCA970F2287AC9ADACE3A6CA4
104856FFB68ADB0E18AE1B44951FB7C6871E17> |-
/o <1C60D8A8C9B7A3FAA5E5B9679F6D29AEEA778CEE570BE74E5C494E3924CD
B7F8EFD1ED0828E51930B49003DD459A8F9218671F8D428AAEB5290079FD69B4
3253C4D7017B1F16D6160B6F3F2AE2224BF0FD5A97CB7DF711967A4D3E71E625
71821C844DAE301241E1BC2A4CD3D1357C2F13A897766F54A0B57AED06295871
8D57134132> |-
/p <1C60D8A8C9B7BB5CAA49FA6B863AC58F4105EB4486BB6C537C34D5247375
4E9838F4186356431C650F36FA298DC3ABF4B937DE17A2807F849EF7BE790497
2E18001CE1365E52F1CCE1E37CB9E22F62A976D88252D02C4D6FE16E8DA58F31
2DD87E99136227A2233F5BB50397BBD7DC03C86DDCB6627DF5F9BB8AFB22808B
DBAD96DCA74DA34C0A932D2E2D57C7640639E9A3ED25F5A66DAC46E4798537EC
F2A33B6E37F2CE3C395566BE820DC4DFD97B576160A8404196BF3D9165E9A7D1
05752695EB50982639F448D6731D5EE20D0176F3D7272EFD19107379D5603079
87B474A6238A65B11CA9F119F294C6CD8B6043F924EF32EF4CF890A49E908C50
AA4571> |-
/r <1C60D8A8C9B811DA5DA88AEC5AFF2D2D38B532A9C4B4EF890EBCF2DA19E5
D7A06D2B169FB2E5E8E35E011F1A3A7C513D2C6542A80AD01743859FEEAA36D6
1D6ED582EED3DA1C00DF79ADF79DE17B759C3CDBCBA4B2B79A44498BC52E3F6F
503BB659EC9B8E4D0A8D8E9DC0FB3C6A3346BD23AE02A38A144DD802DAD14E1B
5FD3F7FB115E1831575CE44920905474D58061502AE99CEB578A7A3CF95DD0DA
DB1E9A8AB5C6C3DC188126455F34386EA9C7E94FC19E40FF13E517FA29862412
6353EC5F4E8FE8C3BB200CA7D9BC68C73829E475E3F5B9D3145826D3> |-
/s <1C60D8A8C9B81871E2D072888B0B9DA8B25F44B9EC412D27ADC8CD85628D
57039D83D61EE1EBAAA41AEE313C9A310C397A7CC3F1C3DBC4C062FB80E1AB84
D3CECAC3590C75C54936829DAC7B7CA9C1F375D0C232D922C448CD66EDC727EC
5E8CDEB391DED69EAB3455287C78B40651F8CF829476FDBDBF441A7735F7F537
C201B672AC57CA6E7B7A17CBA556DD5DC237C48C4357A9CA54A25168CCD2E4AB
82472608665031D0E7E44D985A6A806C98CFC750073064B3D7C6F07A05E11D89
78E543EB01A1EEC6C4FE9467A6A93CAC571DE33B9BE9A04BA083CFF57388F6FC
6066F71A760B6F4F3CF4EE3639B5E1> |-
/t <1C60D8A8C9B83C8EA651527A9FD71AC34A09063ECDDCA0D47E482A108C5A
70B4AA05DA7800123468876490C3230EF8ECACCC959580599BE6D1ED1FF2A753
6D49F8812ACFF3F7B27E9B35400843E3DDAC66292CA3BEE58A5E347752D71F3C
8E022315F1CFB5E3794235E0F25256730E2EF83B150D57EE3A2D8C70290AEB23
3442C97D3465465CF55C833C44C7C20E9884E605B81E> |-
/adieresis <1C60D8A8C9B714A5671293DEFE6C57D6875E299598ACB2838413
1A7885DD23C3D4095481E544F5F5AF153B6EB5A400CE895325C5C31FE24D6249
2561542610F98E367826FE64982A373870D8312CD0F5BAE108AFF21581F0F605
A8698BF4110137A7EA268963E2F429E1474C8BD0578D3EB44E0C8C3E05DCC58F
04E56F7EF030ACD0620F2CFE7CAF19D782EC5C976CC3B0A13E68881BF5A679F1
A3A222E25EE60A324E20E3CFFCF9490F4D0D3EDC951DED0A983140903F9C4A4C
4765364E1C5F802D374B6963F4854706C56D118FF73C29B77D03EF9E7C749B4D
187765E5A6612309B000CDBAE24AEB3880228FF649F742D69B209DF98DE24E1A
152CB4406DE9265583222B98CA9C360BA3ACD04C850AFD14AA8C8678F8AFB687
82EBF17F77BE836D62AB1E78B9D5AE9BD410662D3078047034BEE240137FC55B
383B4C379F4870B1397685F0B23EDD2AD954FA01BBA642883A567649EF769CB7
A6C964383C55144D344A19> |-
/aring <1C60D8A8C9B714A5671293DEFE6C57D6875E299598ACB28384131A78
85DD23C3D4095481E544F5F5AF153B6EB5A400CE895325C5C31FE24D62492561
542610F98E367826FE64982A373870D8312CD0F5BAE108AFF21581F0F605A869
8BF4110137A7EA268963E2F429E1474C8BD0578D3EB44E0C8C3E05DCC58F04E5
6F7EF030ACD0620F2CFE7CAF19D782EC5C976CC3B0A13E68881BF5A679F1A3A2
22E25EE60A324E20E3CFFCF9490F4D0D3EDC951DED0A983140903F9C4A4C4765
364E1C5F802D374B6963F4854706C56D118FF73C29B77D03EF9E7C749B4D1877
65E5A6612309B000CDBAE24AEB388005ED59806F03AA3F4D7C160D9DAA935989
551C2E540E73AB8B3E9D7E15A1A3800EC2C892CACD78904F61A2B2FE59840993
98186A1C288C77FA328A0C7FF9BB578F6D0618E4915ED6D513CCC97E2B6A97FA
8D199E59972D388DE5346289E0D87249B5C9A4D9E2C4D6237B48ADBF873D929C
6FDE638123866119FA> |-
/odieresis <1C60D8A8C9B7A3FAA5E5B9679F6D29AEEA778CEE570BE74E5C49
4E3924CDB7F8EFD1ED0828E51930B49003DD459A8F9218671F8D428AAEB52900
79FD69B43253C4D7017B1F16D6160B6F3F2AE2224BF0FD5A97CB7DF711967A4D
3E71E62571821C844DAE301241E1BC2A4CD3D1357C2F13A897766F54A0B57AED
062958718D571341C78C125FF0433A4C3F19799408A6C1A41CB31405362AF837
C21A65B3280C90C0A9F026F2BECB641BC1CC51F9F6BEC7378F6A26EECDF7BF25
938F563707645E68F2712D38A96AC659C01DB09EAE1DD7F53774575F4313EABE
79C47D3287FAB050C679B97AB7C2C226D99CBDCB00F3912E98F647C29BE66EBE
F28420> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/GFHGJM+GoudyOldStyleT-Regular /GoudyOldStyleT-Regular findfont def
/GFHGJM+GoudyOldStyleT-Regular*1 
[
32{/.notdef}repeat /space 34{/.notdef}repeat /C 4{/.notdef}repeat /H 2{/.notdef}repeat /K 
9{/.notdef}repeat /U 11{/.notdef}repeat /a /.notdef /c /d /e 
2{/.notdef}repeat /h /i /j /k /l /m /n 
/o /p /.notdef /r /s /t 111{/.notdef}repeat /adieresis 
/aring 16{/.notdef}repeat /odieresis 9{/.notdef}repeat
] GFHGJM+GoudyOldStyleT-Regular nfnt
GFHGJM+GoudyOldStyleT-Regular*1  [9 0 0 -9 0 0 ]mfnt sfnt
44.4843 81.644 mov
0.171387 0 111 -0.171387 0 (Kon) awsh
59.6586 81.644 mov
-0.0703125 0 112 (cept) wsh
213.053 81.644 mov
-0.127441 0 97 0.127441 0 (Kam) awsh
229.752 81.644 mov
(panj) sh
44.4843 95.8172 mov
-0.13623 0 99 (K\366n och \345lder) wsh
213.053 95.8172 mov
-0.118652 0 114 (H\344rk) wsh
230.943 95.8172 mov
-0.0703125 0 115 (omst) wsh
44.4843 109.99 mov
(Utseende) sh
44.4843 138.337 mov
0.14502 0 116 (Citat) wsh
%ADOBeginSubsetFont: GoudyOldStyleT-Bold AddGlyphs
%ADOt1write: (1.0.21)
%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.
systemdict begin
FKAHJM+GoudyOldStyleT-Bold dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/P <1C60D8A8C9B7D3A6759B665ACBF512BCB6361D584C936C61C2871C11A980
02F02E5D9363AFF9812930480A0FE3C5E868AEE3FE326AAFE71530F785F098E4
185AE9A7E43AF8F5A9A8E996942F9A2675A37D5523729B494E49F394D6E35555
A4D8D7E0A11AE1C222EAA63F3340F29053BAD8515B80215AD5AA1E8AC63E9DC1
32E7106DB805D0158C70369EC1067EE8A62EAEB0987906FFDA95BEC37C7D4D6B
27A61D82813A7B3D3F3CB58FA0A19C06EDC0F7B4E924300C0C75235226148A30
A220B15966550613006E014A6D7614128B70DF9E4256D46BF277106772F0F4C9
9476F30DCA15B272F7209975120F0390090D620C9A03DA4FBA25CB6EF5C338DA
8C922BF3D57B6DF247E66160CCCA74> |-
/g <1C60D8A8C9B7686E265E9D9E8AD7C817DB5405DF463AA259D8918C28D0D2
371DD58271FDE76B1F8FE348FAF90479B9B8B93906034BDCF3A0151272D7369A
1D797DBDCA49A9A75B82E93A76864BB0848EBA8FCBF35DB8E8A08923A3F2C7D4
22F87B40DAC3D83C760E0A91A72DA98D95B7930251BB4364EE49A42E325E7BBF
2980A8584A8ED5628A279CBAF5E139456D211A09640E186E9AE50B13ABEAE02B
754D6B5E85D0EED7D2132FE6EF49D21D1FC4A907AC84D5C323CE05399F7199E1
F8672113249295E81BE7B526B131E04A089E8DF9C2BB2D79BD71EB11FF647F41
AB30C7F112EC83B3DB27DCD3968C761ABE1BF13F35CCCD30E83AF6E364663C6D
6DE18E0D68C454C91769E5D3B56A2E0770AB82B018EB9DB0D4A2508C39ECD3B6
E43C0A00B48343E4BC4FB6119D78F2629D94D1F911078526E419CF7FA6A2341B
835FEE9D256D61A46ABA8AA4205354B94FAB92743246C202122A8656A0AF50F2
2A0E696EDC88CE068A632B663DD3E8754E2143DE23A5AF54B2FB4D675CFEF541
15A894BE667668C835D2073FCEBD> |-
/o <1C60D8A8C9B7A4C87A8DE588746ACE4F1CE60FC6A1BDF232F55B2BAF1B48
6F2CC59240A832E9B1A864F7DB8D5B538A217AA2921E1B95BB67F9C1509BA750
B78E242FED0E22FEF4D9BD07A7208661EDF8340690ED54BC3293C20E33897E94
E5003230779F4E176FA4947D2F8EF62F8EE40DBB1127D97B73C54D65A48C4704
65190B78AE> |-
/adieresis <1C60D8A8C9B71063316F2150CB4D01FBDDA91DF7213FB202A93F
B50AEFE9B86FE2E14696BF7E63396E9BFCC71290E16F471FCF45FDF61F5A40BF
E46B251C751D9C2079285B71FBD3C940E6069F8E3BB37DC39AC6C726E2A738A5
8D177EECB320B35B991363E5BFF94C8E1162F65DFDDDF5C931F4B79BF9F3CF0D
5591F9A825533EC572988C2C4CA4D23313CDE0D156FAC3B95BA2EFF2FCA1D039
7E5B0E50F588B90698B5ABC3CB1F7BDDDC5A1EE6EE5DF9074ADC589B73EE3C02
CA1B0E8C08C663AA4728911D130C440E6FD344CBCB32EF944441F54AF1F2FF5A
C1645E378EC8063E4799EF916159D9D6147CFBF73C0F11F7EEFDCFBFE6DB9C21
B26B29559B8B3B42C914084F6CA2AFCC1CF652958AD63C253B4387F14664561A
8E70F96296BA6EA0A5C080339E7964EAAF90875714C517CCA7FE2B8AF887B1A4
A5ACBE50EC8C587AE85E968124593015C3AD93F811F9089E8BAE9C56476E41CB
FC966F2D260AC8486998EBD47A228532A1F878F113230C23103671EE292ED871
01C30092297A5F9948C1672C9F73C7BD9952F0A63628A0343363821877A96770
B5FB999A21B289C57327> |-
systemdict /gcheck known {setglobal} if end {end} if
end
FKAHJM+GoudyOldStyleT-Bold /Encoding get
dup 80 /P put
dup 103 /g put
dup 111 /o put
dup 228 /adieresis put
pop
%ADOEndSubsetFont
/FKAHJM+GoudyOldStyleT-Bold*2 
[
80{/.notdef}repeat /P 22{/.notdef}repeat /g 7{/.notdef}repeat /o 116{/.notdef}repeat /adieresis 
27{/.notdef}repeat
] FKAHJM+GoudyOldStyleT-Bold nfnt
FKAHJM+GoudyOldStyleT-Bold*2  [12 0 0 -12 0 0 ]mfnt sfnt
405.72 68.5104 mov
0.638672 0 111 -0.638672 0 (Po\344) awsh
FKAHJM+GoudyOldStyleT-Bold*1  [12 0 0 -12 0 0 ]mfnt sfnt
423.638 68.5104 mov
(n) sh
FKAHJM+GoudyOldStyleT-Bold*2  [12 0 0 -12 0 0 ]mfnt sfnt
430.429 68.5104 mov
(g) sh
GFHGJM+GoudyOldStyleT-Regular*1  [9 0 0 -9 0 0 ]mfnt sfnt
405.72 81.644 mov
-0.127441 0 97 0.127441 0 (Kar) awsh
418.632 81.644 mov
(ma) sh
%ADOBeginSubsetFont: GoudyOldStyleT-Regular AddGlyphs
%ADOt1write: (1.0.21)
%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.
systemdict begin
GFHGJM+GoudyOldStyleT-Regular dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/slash <1C60D8A8C9B75CBB537706CF78680D4F0DBDE3CA3DCCE0A03D78ECD5
358F537AE82D1671737420EE4F8678A7D879397F4AE6F8A5FA1D3A8700DC13C6
587421B49EC6B390> |-
/R <1C60D8A8C9B6459DA6760944FEA6999883A3A0F885B4CDF07F3A3A2292B8
87E2FB7E746ED7967D99FD6C5BEEE9FAADAEBD724788A5CD9A06456F2ABE9210
3E2ADE811EE64140DC791D913250579D0A24E40CA653FDCADE001F103B7F276E
1F821EC59C36C05E5B403558375AFB3569969490928C2DB17DB6F3DEC88D9CD4
4071832826BD8F4B8320DCA2CAF9D609624BADD65B080F7982DF17262B3E0BC8
3DF6FEE42208515B1C430C9B3D0218B3E9CE39BF629615D305F5BB8421FF5AEE
CB09E8F01326CF2E450FEAD7BB2FB28D4E0EFD083C07357C313A26AAC4532D2A
56B8DECF3F0B8A829068E283DBE276DA062D943048EE6F709249B511843353BE
CC0D0A5A45FFF2F8BF56A38EE40A2450B5FF3FDBC0F0A7F08E2016C39113D4AF
DD725CAD0EC046CFB3369694656C7866765863D0EDA63CD3ED1AF17125288975
8E336AF76B86F5DA1E44DD8D0F58CBA8DDA78180> |-
/S <1C60D8A8C9B7A66FF7E9869DDF9CC116D80B4FDDD49DAF7E063E5FDD5359
13A5ED697EF306A51F4C1C9415649409F945EDD2B3D3E252D31B7ACED9BD1E09
0E48110CFBDF47DCEBE35E558523727D7570DBB224C0FDCDDA5BB3648B5DD077
1BFB3070D22B6B1B72C6860FCFD20EE1B6777D5E33FC1649C1517C843F4761D4
4F1DC14175F7BE4C9120858784EC90D0B7E012E8B763A9E65CB508436636ADCD
8347417F75E01E0E51DF6AD6D4983B8709BDE743806C6535BDAE78EB81D7C2BF
413A5ABC36E598D9EAF24237D65B38AEA415A2DDBB1B10AB1D45F4C854B67C16
B482E0B56C81F0852A55CCE8B835D919F2662AA0777987700BD84BBF8A022620
E585AE9EB1644C10E78EBDEF97C3D12A3F906F3CF15C11> |-
/V <1C60D8A8C9B654A4F8CBF501AFABED09A8D10D29B609C2EF90150EA2D232
ECDFD3ECF89C40B228F3F66B5209C1DED00C1FC1B5EE5B5D3FB71BFA5E335AB8
A3EDFA031CDC4586CD651D60FB10FBD4F92ADFF634D29300F007D6574EC6B62B
439E65479C137687453715F8AAA8BCEA500F20AEDD85B1A2CC1788802DD416EC
33D42E2D310E57616823E0849EE8996B8889CB9D79FACB7E5B6B81637C46962E
6ACD90614BD2CB783A438B96A98902ACB0515DDA2A9E62E201422C69F75B4F85
CD02055EFAF87B10267629816C9DE75813DA0F44B935AD14D72E4187676504DE
4522448BB8E989BEFB710AB3EBB047C591A4C6B0> |-
/g <1C60D8A8C9B718ECB6734F19B711FDD800577016FB9BAD95942BD0D1BB34
1AA935106C7AF244B2A56B01AD2673937DBDCA33B1ABE3BDDC5AF2EC740FC229
C61E67D0A5DFCBED647FB1149288E116A9EBCC1EE8C39E391DFFD13EACB45B2D
5A348D39288E571B331DDDE237EF354BCAEB802E0C2504DA6072DFA9993EE8B5
874C7CC64385FEAD572ECA409B6D32052B68DDA19B19EC22DDF1ECF559CF7125
2F6E53D80C176AD98AED472CAA5D765F2D058A48A467E2EA70503BBD6709F941
05A577F1808D6C8C7AA0E2944A48395F6D42C3756273FE87425BD7EA12C60958
1AD96F3D6BC48BFE8D3F6D3B52586D733D6DBA92A574CC7B4098899321CFFF44
B33DDA1D1D8D832C71C7CC57F1E2CE4203F808520E11F964F6D8499B9DA29C10
C91AAC99C8EF9A2D897AA63FDC7ACFD93EBF84256DC12ECF3DC90C514B7B4C57
D1CAE4CEFA968F6E713788976FD1BD191ADA6064D76CF14457AB5C6D66857B41
B1F0AF3F4B9B73EAED987C7C6C36> |-
systemdict /gcheck known {setglobal} if end {end} if
end
GFHGJM+GoudyOldStyleT-Regular /Encoding get
dup 47 /slash put
dup 82 /R put
dup 83 /S put
dup 86 /V put
dup 103 /g put
pop
%ADOEndSubsetFont
/GFHGJM+GoudyOldStyleT-Regular*2 
[
47{/.notdef}repeat /slash 34{/.notdef}repeat /R /S 2{/.notdef}repeat /V 16{/.notdef}repeat 
/g 152{/.notdef}repeat
] GFHGJM+GoudyOldStyleT-Regular nfnt
GFHGJM+GoudyOldStyleT-Regular*2  [9 0 0 -9 0 0 ]mfnt sfnt
405.72 95.8172 mov
(R) sh
GFHGJM+GoudyOldStyleT-Regular*1  [9 0 0 -9 0 0 ]mfnt sfnt
411.486 95.8172 mov
(ollpo\344n) sh
GFHGJM+GoudyOldStyleT-Regular*2  [9 0 0 -9 0 0 ]mfnt sfnt
438.504 95.8172 mov
(g) sh
405.72 109.99 mov
(V) sh
GFHGJM+GoudyOldStyleT-Regular*1  [9 0 0 -9 0 0 ]mfnt sfnt
411.157 109.99 mov
0.0439453 0 116 -0.0878906 0 (ete) awsh
421.29 109.99 mov
-0.0175781 0 97 0.0175781 0 (ran) awsh
GFHGJM+GoudyOldStyleT-Regular*2  [9 0 0 -9 0 0 ]mfnt sfnt
515.599 109.99 mov
(/) sh
405.72 124.164 mov
(S) sh
GFHGJM+GoudyOldStyleT-Regular*1  [9 0 0 -9 0 0 ]mfnt sfnt
410.185 124.164 mov
(tilpo\344n) sh
GFHGJM+GoudyOldStyleT-Regular*2  [9 0 0 -9 0 0 ]mfnt sfnt
435.467 124.164 mov
(g) sh
%ADOBeginSubsetFont: BodoniMTBlack Initial
%ADOt1write: (1.0.21)
%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /BodoniMTBlack def
/FontInfo 5 dict dup begin
/ItalicAngle 0 def
/FSType 8 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 68 /D put
dup 97 /a put
dup 100 /d put
dup 101 /e put
dup 107 /k put
dup 114 /r put
def
/FontBBox {-132 -251 1212 917} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
7 dict dup begin
/.notdef <1C60D8A8C9B5EE310300EE23D0BA079325E1D5F86AF2FE7DC37491
4003E5DDB91552C283> |-
/D <1C60D8A8C9B690070CD986EE37DC8A6547B61F6B011A24D31E51B6FECD26
D4FF3401961F4B098E95A255044C9C9534E3E3D10225CFBB03E0291CB1874DBA
D1328D795E161B12D64AD8EBB24B24B8120AE5C3E4948F9918BEC15063E5BE6E
25AD735A00A368> |-
/a <1C60D8A8C9B7C9966B2E12A82BAB0A609A6AA6258C9459FE0D71529F9080
5F0AB7B6256DA1ED4E78FB997299C0D5E7F8F99127093A720739688BB737370C
C9E8FD9DB54EEE75D6ED37B73CB1460F5D4AE6EAFD09C9D27C9602A48C86D579
4131C6595C89F451EC81C2FA07B4A75A724F3DCC3E6A61E5B86662D6AC7615DB
B504C203107EEB913C8F1273543CF183A5E4B42341287107F66E605C219EBC1D
3306C811E7AF834DD0A104D1E59256E23F0E4E0206DD0C9276052F73EF43EB52
8945E65982C6F16EE7675048FB323BC4204B7C87694FB8031B2754D7120F8C4D
EC79E80E0C7B60ED2E576578208CDC27BACCB1268F68> |-
/d <1C60D8A8C9B668C41414E53A2D352A50266B92CC8E1124E2BF7452ACDF87
DB57C43583D92717FBC597CE0C8023BC31B741DC49EEF0A629828340D1784914
B5DE270916C8E81A35C8691421A55200AEC99C72BA578A30FC21487C525CA3C6
5300E4F6618E5E26FB856047768693834255841528839653ADB50DCF1721429A
FC615082636C4F1B99B76B9B8B83366C24> |-
/e <1C60D8A8C9B783249605FED2E4A154ECB0A720BE7F43A9F0DB8F7F0E9DBC
7E1A078305161ABF243A1D1EE5D7259170D6CC5A6EBE6611C3FD365927EDC133
D18136607B6FDB6D0B7FF75658214E575D5EB458C22EC291D136734A239E0A48
0EEFFD65CD3BE59D63006B375CFB586970845F48A922527442228CB6CECD60EC
D80081> |-
/k <1C60D8A8C9B62FDE7B026903AE3EA5DF64F5B9D4D1903C662E3BA115B469
4CA6728D022601F827FDEC1BD2A1EE540062A1FFA35AE8B9709089D3728EE65C
38A430F5C8C93441ED72970B2C5C6F7368EED022B96965DC7686DF4F590A266A
01B3B2E531EE00E0D85BEF84D67CC8B09F> |-
/r <1C60D8A8C9B7B202AAA5956BEE1EB6EAF03944A08C510AC2494869DA000C
839913FD757EAFDD905042F08B24CF1CC3C5C08BC6518464FA166F45345A1C8F
0A9516C8DD07170F10E01E515F00D95DB27BA265095F895B6BD9B3A030A9E463
CDCD8CA8E58328D8277E9462A5923919B6088DAC2390FE2D807BE090> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/GMNGJM+BodoniMTBlack /BodoniMTBlack findfont def
/GMNGJM+BodoniMTBlack*1 
[
68{/.notdef}repeat /D 28{/.notdef}repeat /a 2{/.notdef}repeat /d /e 5{/.notdef}repeat 
/k 6{/.notdef}repeat /r 141{/.notdef}repeat
] GMNGJM+BodoniMTBlack nfnt
GMNGJM+BodoniMTBlack*1  [18 0 0 -18 0 0 ]mfnt sfnt
43.8701 46.6358 mov
(D) sh
59.3652 46.6358 mov
(ekaeder) sh
%ADOBeginSubsetFont: GoudyOldStyleT-Bold AddGlyphs
%ADOt1write: (1.0.21)
%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.
systemdict begin
FKAHJM+GoudyOldStyleT-Bold dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/S <1C60D8A8C9B750043915F74CD7947231AD39B0A994520E5BA6651CA54583
904808CE69DF3BE3EEBA04DEC9C3F192F5A32295E8DB63B57DADC88C4773E6BD
CB1ED4F4C5566B31C31415F5E6D003699C2BA8EE45EC16764B8EF991F7B880AE
FBE98B5848B105DCC8AF94521524C66E1051B55B71679773A8BBE51C5D5661BC
2079C9B785A1E8B53AC724CE130413A4FC2195C3D69C549C739601A349F68E01
50699866E5BE6E253866F0690DDDFE09C8E54F392401BCFC22B18C20FF329CA0
E2F3118F23DF40A95EB767DA195F94C4B797A114217D3AE3DC60BBA1DCECC7F4
9FBFEEFF6CD1CF1188AEB811E923A8BCFC3AB8C1C8DD05150CD0F5760B23AB97
0B3CEED4F7C7AE0D8F1D176D797B57B7465BBB16DB994188BC3C2B7550A666> |-
/e <1C60D8A8C9B71131C3903353071F16D88A5A2CEBF2ACF9982D2A390E499D
FE235D98FE5E32988F4835BBD344081897C453D5E3A02048677AB61BB524A5F2
130F395B3E64BAC7809893B5CE20C6A4C25E75E1A050FA56A8AC81C61D51A3EE
FF08CBB7C52A17B17320085D556CB37EA512D4534F136F13DA883D185C9EAC88
CC59D95CEF6B0FFA382A4A1FCEBD41DC3DCC89724E03B66575A9CE6973414AD2
C3B13C25EB3C9553A4EBB3610BFDD187032D1961F742E49FE86422DAC255BBAC
03F13FA892E22F805F66E95F528D8869> |-
/l <1C60D8A8C9B85EE3AA0DBA24E16D93CC39CAF0AC2A5D00DF6B95FB2783A8
523FF454305C69E0E944A4CBC3623B058A1B576D817FE3AAB2766A18772044B5
DC98C41BB7B58FCFB26C26B2171DF9C4D955F4E9BA280D3404BFF59B821CED44
723C0C8517A9DE7C08C029B0FF8A2B08715EE26126C85CF206F6417165FCCFDD
1742353CA51F21082454CC946BC6626654085DBBBC5E411FCEF30FFBB016BF0C
2F60712CC7BCF3E93BEA5020DFEB70AB6E56BB> |-
/p <1C60D8A8C9B7890D5D1E5FD9E3D683DE0ED6D506B6426547AA7F41A91C0B
89397E1A62C99E781A02465282BAFB8446B7C92088B23066DE1E5FF38BE70678
4F7303D7852C20E6A5CAB328A234293EF8ECF304FA6B2E421FE8C23E4FF9E42C
3337E3DBBC5C745E7CFB871EF3256B5AA966EFEA499D16EBD3D8CAE2C3B025F7
6502BA57D61FB756A9C9ABA6002D419362D68262564E27CDFEA9D0F81D26DA8C
8DB670B52C9608F1327C9103886ABE335D238E1601F9494E04F8BF3DB27EF013
CEF6BA5F6C0A114FECDA37B241861032C19C437B2CA30267E8C0B7BC526A45E9
2A3D3EEC6D02F339B231F96CE79A76A4571F7F04F1178CD89CE4263FA2DD3AE1
C87ECB7A58D589680BABFC77F70A2FE9CD2A88C066D28D0B8770FD96987F54A9
2A4CDE10639864960D60C1B0BEEBED5F21CFA3A3> |-
/r <1C60D8A8C9B73DBADEB36F40292577A2B51678B6DD21F03D59FF9726DC20
DEEDB16092482C3E8B408A3CB865502215D7DA35AB8AE68EF6D85AC2EC912987
0264125FBFC37A1C2D987A107FD8BF60D76F8B89E1F73B598B1680F2565D2077
7BDC2BB0F5C98C8E515FD9C6CE101926349F9F3414FEA864D08CB53688AC2586
0159D829588C479A9755159749337BB835A9B405FC49BEA59828637038D16973
98F74EB03B1678FCD29602AE1F233566577366AEA9C3D08F6F1D2A1862E78E19
C81FB298D76E6FEE00591C1B466AE2568AE42A4AAD90A9C2FB6215D5B00DF3CE
962D835F9DB932270AC271D6FF> |-
systemdict /gcheck known {setglobal} if end {end} if
end
FKAHJM+GoudyOldStyleT-Bold /Encoding get
dup 83 /S put
dup 101 /e put
dup 108 /l put
dup 112 /p put
dup 114 /r put
pop
%ADOEndSubsetFont
/FKAHJM+GoudyOldStyleT-Bold*3 
[
83{/.notdef}repeat /S 17{/.notdef}repeat /e 6{/.notdef}repeat /l 3{/.notdef}repeat /p 
/.notdef /r 141{/.notdef}repeat
] FKAHJM+GoudyOldStyleT-Bold nfnt
FKAHJM+GoudyOldStyleT-Bold*3  [12 0 0 -12 0 0 ]mfnt sfnt
409.854 46.4159 mov
(Spel) sh
FKAHJM+GoudyOldStyleT-Bold*1  [12 0 0 -12 0 0 ]mfnt sfnt
430.438 46.4159 mov
(a) sh
FKAHJM+GoudyOldStyleT-Bold*3  [12 0 0 -12 0 0 ]mfnt sfnt
435.565 46.4159 mov
-0.0820313 0 (re) ash
%ADOBeginSubsetFont: Garamond-Bold Initial
%ADOt1write: (1.0.21)
%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /Garamond-Bold def
/FontInfo 5 dict dup begin
/ItalicAngle 0 def
/FSType 8 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 49 /one put
dup 53 /five put
dup 114 /r put
def
/FontBBox {-147 -372 1168 996} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
4 dict dup begin
/.notdef <1C60D8A8C9B6E3FA50BE8DF9ECC9B6EC77097F3C8DA5E889FE9B0A
A53CB840C2DE395F4E> |-
/one <1C60D8A8C9B70FAD18E30DCDE63F19F0C5390E207A057D9BC13182FAB3
02D14D7192FF7B3C5DEB4B2C5C77171CC76AE696FA0EF175B5C7EB7731582AA7
79AC7EDE99AE4DAF74CB60F2A667D9288DDEF0CA4173B9018BF1CC427383368F
5881B0ED381150952DAC4DB4DFA5DC1F51A8B3A86FDD34B4CB2A458222AD7C3E
ACE7B78C71DE8F6FA64A02E8DF8F9F512B22D778665037801EE6488C6473975F
2948E7D79D7CAE6261707888FD36995D0958A4E079824690936CADA9312FC5E1
6A1631198D50E312526392291DF3F4734EE35571E9F81FE1EBAE93735FAD9C64
86C743F0BCF386A8AAA182811FA5F50AF2E8ADD24671E53DFF7D487442DF4C43
FFA697133832C8C9610954A7BF352009C03A743AC1A67E8C0580EDBD9E550DF1
E4F681AA> |-
/five <1C60D8A8C9B746F4ABCDFCB799EF9FC76341D36FCC17F17C54F2C2BED
8A38B797B2622AC2F267AEE976426F37D104E73E55B7CA3F87EFA7228ABEBCA2
8A02B802EA60D7A8FA92F6CB02402804402485D047912A15FA5BE18F4BBB8C17
1950C92D641DB0F04E5ABB9E1ABD8195748055078C528E3925F10A1FECAC242A
F20B23EC9303919F8818171F38B4F0DB86ED6F531382412EB940FCF3D3A4AB3F
6AE5E15A33832D80428F25A84122D7366A85BBE569B52367AA08F1AF7D536AEF
AF500F763118CEFB114857479B4073AFA5018D46412BD2364DB985BAD66AFCE8
57C522B5BFF3D473B532E1A48F2A2AA577AE63D9B71B66ECAD0690A7463BC1C2
F80A5AD05A25ACAF57A3E7EAD388485C5D10F58BA407F64EB57A8CEE50FD105A
73E4A74390BEA29A1AA0E5D19DF0EC1D29F37C0B1A790F09DAE22C718DAF70AD
D53990B02889301A760F24BC391743D998D6F4BC02B2016B83A36BB0C141ECD1
966BC70E2FF56BA7DC22173F8353FBAA78595500772> |-
/r <1C60D8A8C9B812A86FB217F10C78800F1393E26BD55D00852CC91A75F622
9AC899CC9310196226781357F14D4DA661AD6617028BA33D2EDF8E677F87FA43
379A42956F4F53F00E94575011A5ED1200CC49E814F1B41D4B99CC7BAAACCA5C
0445D3D546DA7ACD0BCA515515FD33C52C135BC46690913894ED6449E5A77E67
1107BD8FF4BA32267D49FA37505408910E9C0811B231CE40E4A51838A15FF5DC
FC4245AD1B8E84F8F75775F4BAF482439EF0D674E81A85303BAFE1FE1D7D8B21
BC33E1B85D62BB1EC4737A79960C08E30622670D286E03A4C6FB5EAEE08BADAD
D3947B5965FB47BBEEAE7E8A937E0D1434E915737CAFDF504438DE2EC9D3A326
03CD4CCA7C0644C3263687598115ECA1D7CBA89BB6BF5AFE29F630974A> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/GEEGJM+Garamond-Bold /Garamond-Bold findfont def
/GEEGJM+Garamond-Bold*1 
[
49{/.notdef}repeat /one 3{/.notdef}repeat /five 60{/.notdef}repeat /r 141{/.notdef}repeat
] GEEGJM+Garamond-Bold nfnt
GEEGJM+Garamond-Bold*1  [10 0 0 -10 0 0 ]mfnt sfnt
362.088 48.3495 mov
(r15) sh
%ADOBeginSubsetFont: GoudyOldStyleT-Bold AddGlyphs
%ADOt1write: (1.0.21)
%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.
systemdict begin
FKAHJM+GoudyOldStyleT-Bold dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/K <1C60D8A8C9B61332199B72AEB687526D534ABDFA5956242287EB108129C6
C12A0EE15A4FED4FD674DB397D810AA0E1438DDF66A0F9EE2E1872D52238EDA8
FFE18F1C436B64E3DBEBD784016CE42359E51E9CFE1C9D89CC0843AF25F0407A
62A51C86ED413C65770EAD0876F639F8A3B8D5ED95FCBCD59D728BE5DE774728
14EFB6967F4448D725C44E7F865DD07FEFD6F12607A1A015C37A3F3DFBF4495C
45E0E515ABEB272D8612CA66F71F499766B83CFCE1B2D3115373A9BE0A22ECFB
6563E6B1774A4E996A9F7D3AFE8A38C6AEC301EC6F12C4BA8F15B92C60898C76
90C76CF611DD6548F482D0BF78562D3E072BEE2D63D67A658095A69596789DA0
062267919F6EAC2CB90AA506EB06FAE686EA8A0DF6DB9AB4FCE42932A31B67A0
FE08D9CB18EEE9E94567EA81851A65A5B6951C40EE0DEB65A93AF7ABC598ABC9
169ACABF5DCC37B20D0D8CE0F44471223B70211F4C45E2F9465A43100AB92FDF
B0C0833CD2C15CFD7A1AC3F8213F7AF0207D37EFB6061DFE2B603B2C57BF75B3
81C628C829E5F874119B333085C6518AF90FC1754AF10C0A060B56CB961B74E7
6E116CEE5B450A5DB5DA76FAAE1547192782C12CE45F258332E666C3> |-
/k <1C60D8A8C9B7B9B9D1C30FD4C28187F7A25770B1EAAA5500664B55FB94D8
EE3C48D9D50333F21623F536B63AA5A9CA87E8839D33D45D4CB1C8A0666BED1D
6C24BB610B7E3B59423AA5015BB5A2F6F7FCF601893BBEEC280C752BAED34B60
C4EE29A5F2D65B17EACCBEA0BCAF6B26A6406F7161AC6A4874C69F1091D3048C
A816BD5A680772AFAFA566C18D27C505D3360460D1F03507F3366711E4A4C86B
444EA0BBC4ADA094C448D84591CC17BF497BEEB442595E3F4C18FB59C3E89D51
40D0FD0FAF3E1341B0736179FF7843E9C427FCD5B65BC518C65174AE33F44659
18DF1BDDFC9C813EA612FD61437F1D7E927745838C1E1AB2C903F08B2134BB3A
C5EEBD48DFB49640390503E5BDF81C011DCA51FF5A97A601B382BBC7F15D4431
36032695F97199F6C4E660BE7E92825A9DD4786A93BFC5080409F5522B0DC05B
80B73ED3882D53D89CCD6741589D4E890EDB55DB5849DD98AE8FC608BBCDFAF9> |-
systemdict /gcheck known {setglobal} if end {end} if
end
FKAHJM+GoudyOldStyleT-Bold /Encoding get
dup 75 /K put
dup 107 /k put
pop
%ADOEndSubsetFont
/FKAHJM+GoudyOldStyleT-Bold*4 
[
75{/.notdef}repeat /K 31{/.notdef}repeat /k 148{/.notdef}repeat
] FKAHJM+GoudyOldStyleT-Bold nfnt
FKAHJM+GoudyOldStyleT-Bold*4  [12 0 0 -12 0 0 ]mfnt sfnt
44.4843 176.227 mov
(K) sh
FKAHJM+GoudyOldStyleT-Bold*3  [12 0 0 -12 0 0 ]mfnt sfnt
53.2909 176.227 mov
(r) sh
FKAHJM+GoudyOldStyleT-Bold*2  [12 0 0 -12 0 0 ]mfnt sfnt
57.7733 176.227 mov
(o) sh
FKAHJM+GoudyOldStyleT-Bold*4  [12 0 0 -12 0 0 ]mfnt sfnt
63.8143 176.227 mov
(k) sh
FKAHJM+GoudyOldStyleT-Bold*1  [12 0 0 -12 0 0 ]mfnt sfnt
70.1835 176.227 mov
(a) sh
FKAHJM+GoudyOldStyleT-Bold*3  [12 0 0 -12 0 0 ]mfnt sfnt
75.3104 176.227 mov
(r) sh
%ADOBeginSubsetFont: GoudyOldStyleT-Regular AddGlyphs
%ADOt1write: (1.0.21)
%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.
systemdict begin
GFHGJM+GoudyOldStyleT-Regular dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/D <1C60D8A8C9B61BBF843357396B3303D5F7E8866D0AB8D84903DF64A5C156
1C9AD1126A7DFC58CEB5CDDA5D3E1BCCE47D593F2B94D2FDD1D05ACE83B966E5
F2BA2FA01A9F3F9F56A7293D5D5A54C4EBB5D0DC967165F779C2D4860B1749BF
13DB324FD2A2BDC34168BD97499511F55682F87F3435919ADB3008BEF6754B37
80FC22E3A9518A834D80F0A90CDD2A7A2F0FEA6848D255DBF8E6D1A4201941D2
77A185A7853CC81C9D30B2A313BF5778757687C4BCE5171092B7D1EAC87708AF
C7B4759AA3C0A094DC169F9606BEDF0935B5782ECBD540353D16535BD8E343E0
FD410A7CBAAE8B106625BBAB522721B8> |-
/f <1C60D8A8C9B844FACD766ED9715833D21D1F88FD2BE1333F4EF285010EE4
9EBB38D411806DF312372C491B0D94E9CF9522A8977DF938FAAE3EABD4E8374B
8EC376D9B0A5B501CF717D579102EBAA5C8BD61B923E7B09FC133C4241DF9988
E8D5B73CDC373FF80A8FEC85C9CF93679DC8CC2E743C70BAFD84D9405C91F4FB
CB0805692540BFA22F14733EB0EAA110C5C74AB1205F6920C06450202E78F41F
0873C5FEB764596FFF901CD491219199F5AA98D884C69A16DB49536AB66CD9D3
BFA76859AA25E9DB349B773A9DE47D62F08B155C02B990D0F4C140AC70C83A67
9CE23974F81A1A34AF7D67> |-
/v <1C60D8A8C9B71A733AEDCBEEC771E12E9C6326D8B7594FA9DEE21B5759DD
E2E80F41F2401BFD0883AAE09863722CD0A98A16F161D31B5613125A4F798568
0AFC896EBAC09A93F2C796D961CE60DFA5A183089D52495DA7CDFAAA29FADBA3
0C65C710237E1C865990EB63C0D31E8E90E9BE3B39A0A87E54C418E42ADEB12F
21BC5453ECA2A715D6CFB42D6AE53F0E2299AC190B1D6EA506F6E12F619AB4E8
99C25D8FB4A6C446D01E795ACE10A9FE682E7BBCB33EBC8FCDB87373ED6925> |-
systemdict /gcheck known {setglobal} if end {end} if
end
GFHGJM+GoudyOldStyleT-Regular /Encoding get
dup 68 /D put
dup 102 /f put
dup 118 /v put
pop
%ADOEndSubsetFont
/GFHGJM+GoudyOldStyleT-Regular*3 
[
68{/.notdef}repeat /D 33{/.notdef}repeat /f 15{/.notdef}repeat /v 137{/.notdef}repeat
] GFHGJM+GoudyOldStyleT-Regular nfnt
GFHGJM+GoudyOldStyleT-Regular*3  [9 0 0 -9 0 0 ]mfnt sfnt
44.4843 189.36 mov
(D) sh
GFHGJM+GoudyOldStyleT-Regular*1  [9 0 0 -9 0 0 ]mfnt sfnt
51.1639 189.36 mov
(ri) sh
GFHGJM+GoudyOldStyleT-Regular*3  [9 0 0 -9 0 0 ]mfnt sfnt
56.6571 189.36 mov
(v) sh
GFHGJM+GoudyOldStyleT-Regular*1  [9 0 0 -9 0 0 ]mfnt sfnt
60.4056 189.36 mov
0.0175781 0 114 (kra) wsh
GFHGJM+GoudyOldStyleT-Regular*3  [9 0 0 -9 0 0 ]mfnt sfnt
71.6952 189.36 mov
(f) sh
GFHGJM+GoudyOldStyleT-Regular*1  [9 0 0 -9 0 0 ]mfnt sfnt
74.4989 189.36 mov
(t) sh
44.4843 217.707 mov
0.224121 0 112 -0.224121 0 (Upp) awsh
60.3749 217.707 mov
0.0175781 0 114 (tr\344dande) wsh
GFHGJM+GoudyOldStyleT-Regular*2  [9 0 0 -9 0 0 ]mfnt sfnt
44.4843 246.053 mov
(S) sh
GFHGJM+GoudyOldStyleT-Regular*3  [9 0 0 -9 0 0 ]mfnt sfnt
48.993 246.053 mov
(v) sh
GFHGJM+GoudyOldStyleT-Regular*1  [9 0 0 -9 0 0 ]mfnt sfnt
52.7416 246.053 mov
(a) sh
GFHGJM+GoudyOldStyleT-Regular*2  [9 0 0 -9 0 0 ]mfnt sfnt
56.5516 246.053 mov
(g) sh
GFHGJM+GoudyOldStyleT-Regular*1  [9 0 0 -9 0 0 ]mfnt sfnt
60.3221 246.053 mov
-0.0878906 0 101 (het) wsh
%ADOBeginSubsetFont: GoudyOldStyleT-Bold AddGlyphs
%ADOt1write: (1.0.21)
%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.
systemdict begin
FKAHJM+GoudyOldStyleT-Bold dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/F <1C60D8A8C9B780B319720C1382A80FD80F7AE5E092371EFA1ECD5FA32C11
D9F80B6C7583E747C4BFF1C58BF7FA9E0DD6B0AC52F11180CCDE0FCB435BE76B
AC7CF89876DAEF295465CB604F5D7C27DE06BEB9357EA86C69123851EBD9EEE8
01CFCCBC00D35439818BBF8E97A61E78230E180E3D614696B642627DC30980BD
3C056BEEB1B609B04994F0D0BC888DED1FB0F30ABBFA5AD581AE0DA4FF412537
E1126384CFB75BAA0559A8F13DD887AE9C76D83BC590CF537140765B3214B2EB
6A2D5778583EBE6F6280597E816672668245DC2ED75A09C3D0F40FFCFA411614
BDF162CE35307D6191167FD8DDD4977CBDEEED4F7EFF520276A7AC3E282AC74A
DEDB832D49B17F37F291AE883BE7376BCFDE322A64898F8CE8CFD4FB09786C0F
5791EE54077034955F2510B2D818A79B7D10B62A993F516D467F1D5DA1627D65
124C406E46217C1ABCD8D9D6F8531AF9C6C29F90B9CF4FD02E269BD5FC74CD17> |-
/d <1C60D8A8C9B7876E7B4B430E9A7A7FC2218FF4192BC17E06C43016F664BC
81CF5224D6978D6CF1E59C7D8E7E963847BDAF616C6DBC3F2E276406B63CD4A7
6491E4B4915B54968B3D7013997441703BAD47B74CF269E73E770E442C1E4DD9
AD37082DEB732A670F8F73DC41AF488C110611E5FD7847227B43CBCAD1F25F0D
725110BB3B318EB8691F7CAB4DF03CFEFFC42D8051C9E66AAB242AEC35A79A18
3F370EA3EE61EA9F0D1D2A4A1469146008E48D4F1D09FF95EE67AF9A8895ABA1
807DC712C4267E1540AC873E02059ADC5B1B6E26266E30C1D508D3548D33950F
B2242BAEC3340ED179502DBA7BA26B9143C281F89BA57B9D98E6ADBBE868E336
99E9D5DD408713A76CD3BE3171ACDF99F6C4BD79EA026DAEE2900A1AD7167E> |-
/odieresis <1C60D8A8C9B7A4C87A8DE588746ACE4F1CE60FC6A1BDF232F55B
2BAF1B486F2CC59240A832E9B1A864F7DB8D5B538A217AA2921E1B95BB67F9C1
509BA750B78E242FED0E22FEF4D9BD07A7208661EDF8340690ED54BC3293C20E
33897E94E5003230779F4E176FA4947D2F8EF62F8EE40DBB1127D97B73C54D65
A48C470465190B785BC4710CF1C0E179A05C2F2711C1C5B637839D32BC1C40A9
2E80056889C4D35C7EF61807092953F5FF2615DFCDBD0ECD86C200419B13C505
1F0EE6CE8825416D881F234BE126D9587FD65362A58D6274945E6BE4A5308134
D6106580D4B92F58088843D58FB3221F510D0FCCFD50E9CB4D6346C10D6A4BD3
CD5D88CC47FE5D4A26B4193CFCB19786E8E2BDBCC98BC697087DBCBE888236F7
02EBFBF7F246> |-
systemdict /gcheck known {setglobal} if end {end} if
end
FKAHJM+GoudyOldStyleT-Bold /Encoding get
dup 70 /F put
dup 100 /d put
dup 246 /odieresis put
pop
%ADOEndSubsetFont
/FKAHJM+GoudyOldStyleT-Bold*5 
[
70{/.notdef}repeat /F 29{/.notdef}repeat /d 145{/.notdef}repeat /odieresis 9{/.notdef}repeat
] FKAHJM+GoudyOldStyleT-Bold nfnt
FKAHJM+GoudyOldStyleT-Bold*5  [12 0 0 -12 0 0 ]mfnt sfnt
405.22 176.227 mov
(F\366) sh
FKAHJM+GoudyOldStyleT-Bold*3  [12 0 0 -12 0 0 ]mfnt sfnt
417.73 176.227 mov
(r) sh
FKAHJM+GoudyOldStyleT-Bold*5  [12 0 0 -12 0 0 ]mfnt sfnt
422.183 176.227 mov
(d) sh
FKAHJM+GoudyOldStyleT-Bold*3  [12 0 0 -12 0 0 ]mfnt sfnt
428.57 176.227 mov
(el) sh
FKAHJM+GoudyOldStyleT-Bold*1  [12 0 0 -12 0 0 ]mfnt sfnt
436.902 176.227 mov
(a) sh
FKAHJM+GoudyOldStyleT-Bold*3  [12 0 0 -12 0 0 ]mfnt sfnt
442.029 176.227 mov
(r) sh
42.9843 300.138 mo
111.016 300.138 li
111.016 311.477 li
42.9843 311.477 li
cp
111.016 300.138 mo
119.52 300.138 li
119.52 311.477 li
111.016 311.477 li
cp
119.52 300.138 mo
145.031 300.138 li
145.031 311.477 li
119.52 311.477 li
cp
145.031 300.138 mo
156.37 300.138 li
156.37 311.477 li
145.031 311.477 li
cp
156.37 300.138 mo
224.402 300.138 li
224.402 311.477 li
156.37 311.477 li
cp
224.402 300.138 mo
232.906 300.138 li
232.906 311.477 li
224.402 311.477 li
cp
232.906 300.138 mo
258.417 300.138 li
258.417 311.477 li
232.906 311.477 li
cp
258.417 300.138 mo
269.756 300.138 li
269.756 311.477 li
258.417 311.477 li
cp
269.756 300.138 mo
337.787 300.138 li
337.787 311.477 li
269.756 311.477 li
cp
337.787 300.138 mo
346.291 300.138 li
346.291 311.477 li
337.787 311.477 li
cp
346.291 300.138 mo
371.803 300.138 li
371.803 311.477 li
346.291 311.477 li
cp
42.9843 322.815 mo
111.016 322.815 li
111.016 334.154 li
42.9843 334.154 li
cp
111.016 322.815 mo
119.52 322.815 li
119.52 334.154 li
111.016 334.154 li
cp
119.52 322.815 mo
145.031 322.815 li
145.031 334.154 li
119.52 334.154 li
cp
145.031 322.815 mo
156.37 322.815 li
156.37 334.154 li
145.031 334.154 li
cp
156.37 322.815 mo
224.402 322.815 li
224.402 334.154 li
156.37 334.154 li
cp
224.402 322.815 mo
232.906 322.815 li
232.906 334.154 li
224.402 334.154 li
cp
232.906 322.815 mo
258.417 322.815 li
258.417 334.154 li
232.906 334.154 li
cp
258.417 322.815 mo
269.756 322.815 li
269.756 334.154 li
258.417 334.154 li
cp
269.756 322.815 mo
337.787 322.815 li
337.787 334.154 li
269.756 334.154 li
cp
337.787 322.815 mo
346.291 322.815 li
346.291 334.154 li
337.787 334.154 li
cp
346.291 322.815 mo
371.803 322.815 li
371.803 334.154 li
346.291 334.154 li
cp
42.9843 345.493 mo
111.016 345.493 li
111.016 356.831 li
42.9843 356.831 li
cp
111.016 345.493 mo
119.52 345.493 li
119.52 356.831 li
111.016 356.831 li
cp
119.52 345.493 mo
145.031 345.493 li
145.031 356.831 li
119.52 356.831 li
cp
145.031 345.493 mo
156.37 345.493 li
156.37 356.831 li
145.031 356.831 li
cp
156.37 345.493 mo
224.402 345.493 li
224.402 356.831 li
156.37 356.831 li
cp
224.402 345.493 mo
232.906 345.493 li
232.906 356.831 li
224.402 356.831 li
cp
232.906 345.493 mo
258.417 345.493 li
258.417 356.831 li
232.906 356.831 li
cp
258.417 345.493 mo
269.756 345.493 li
269.756 356.831 li
258.417 356.831 li
cp
269.756 345.493 mo
337.787 345.493 li
337.787 356.831 li
269.756 356.831 li
cp
337.787 345.493 mo
346.291 345.493 li
346.291 356.831 li
337.787 356.831 li
cp
346.291 345.493 mo
371.803 345.493 li
371.803 356.831 li
346.291 356.831 li
cp
42.9843 368.17 mo
111.016 368.17 li
111.016 379.508 li
42.9843 379.508 li
cp
111.016 368.17 mo
119.52 368.17 li
119.52 379.508 li
111.016 379.508 li
cp
119.52 368.17 mo
145.031 368.17 li
145.031 379.508 li
119.52 379.508 li
cp
145.031 368.17 mo
156.37 368.17 li
156.37 379.508 li
145.031 379.508 li
cp
156.37 368.17 mo
224.402 368.17 li
224.402 379.508 li
156.37 379.508 li
cp
224.402 368.17 mo
232.906 368.17 li
232.906 379.508 li
224.402 379.508 li
cp
232.906 368.17 mo
258.417 368.17 li
258.417 379.508 li
232.906 379.508 li
cp
258.417 368.17 mo
269.756 368.17 li
269.756 379.508 li
258.417 379.508 li
cp
269.756 368.17 mo
337.787 368.17 li
337.787 379.508 li
269.756 379.508 li
cp
337.787 368.17 mo
346.291 368.17 li
346.291 379.508 li
337.787 379.508 li
cp
346.291 368.17 mo
371.803 368.17 li
371.803 379.508 li
346.291 379.508 li
cp
42.9843 390.847 mo
111.016 390.847 li
111.016 402.185 li
42.9843 402.185 li
cp
111.016 390.847 mo
119.52 390.847 li
119.52 402.185 li
111.016 402.185 li
cp
119.52 390.847 mo
145.031 390.847 li
145.031 402.185 li
119.52 402.185 li
cp
145.031 390.847 mo
156.37 390.847 li
156.37 402.185 li
145.031 402.185 li
cp
156.37 390.847 mo
224.402 390.847 li
224.402 402.185 li
156.37 402.185 li
cp
224.402 390.847 mo
232.906 390.847 li
232.906 402.185 li
224.402 402.185 li
cp
232.906 390.847 mo
258.417 390.847 li
258.417 402.185 li
232.906 402.185 li
cp
258.417 390.847 mo
269.756 390.847 li
269.756 402.185 li
258.417 402.185 li
cp
269.756 390.847 mo
337.787 390.847 li
337.787 402.185 li
269.756 402.185 li
cp
337.787 390.847 mo
346.291 390.847 li
346.291 402.185 li
337.787 402.185 li
cp
346.291 390.847 mo
371.803 390.847 li
371.803 402.185 li
346.291 402.185 li
cp
42.9843 413.524 mo
111.016 413.524 li
111.016 424.863 li
42.9843 424.863 li
cp
111.016 413.524 mo
119.52 413.524 li
119.52 424.863 li
111.016 424.863 li
cp
119.52 413.524 mo
145.031 413.524 li
145.031 424.863 li
119.52 424.863 li
cp
145.031 413.524 mo
156.37 413.524 li
156.37 424.863 li
145.031 424.863 li
cp
156.37 413.524 mo
224.402 413.524 li
224.402 424.863 li
156.37 424.863 li
cp
224.402 413.524 mo
232.906 413.524 li
232.906 424.863 li
224.402 424.863 li
cp
232.906 413.524 mo
258.417 413.524 li
258.417 424.863 li
232.906 424.863 li
cp
258.417 413.524 mo
269.756 413.524 li
269.756 424.863 li
258.417 424.863 li
cp
269.756 413.524 mo
337.787 413.524 li
337.787 424.863 li
269.756 424.863 li
cp
337.787 413.524 mo
346.291 413.524 li
346.291 424.863 li
337.787 424.863 li
cp
346.291 413.524 mo
371.803 413.524 li
371.803 424.863 li
346.291 424.863 li
cp
42.9843 436.201 mo
111.016 436.201 li
111.016 447.54 li
42.9843 447.54 li
cp
111.016 436.201 mo
119.52 436.201 li
119.52 447.54 li
111.016 447.54 li
cp
119.52 436.201 mo
145.031 436.201 li
145.031 447.54 li
119.52 447.54 li
cp
145.031 436.201 mo
156.37 436.201 li
156.37 447.54 li
145.031 447.54 li
cp
156.37 436.201 mo
224.402 436.201 li
224.402 447.54 li
156.37 447.54 li
cp
224.402 436.201 mo
232.906 436.201 li
232.906 447.54 li
224.402 447.54 li
cp
232.906 436.201 mo
258.417 436.201 li
258.417 447.54 li
232.906 447.54 li
cp
258.417 436.201 mo
269.756 436.201 li
269.756 447.54 li
258.417 447.54 li
cp
269.756 436.201 mo
337.787 436.201 li
337.787 447.54 li
269.756 447.54 li
cp
337.787 436.201 mo
346.291 436.201 li
346.291 447.54 li
337.787 447.54 li
cp
346.291 436.201 mo
371.803 436.201 li
371.803 447.54 li
346.291 447.54 li
cp
42.9843 458.878 mo
111.016 458.878 li
111.016 470.217 li
42.9843 470.217 li
cp
111.016 458.878 mo
119.52 458.878 li
119.52 470.217 li
111.016 470.217 li
cp
119.52 458.878 mo
145.031 458.878 li
145.031 470.217 li
119.52 470.217 li
cp
145.031 458.878 mo
156.37 458.878 li
156.37 470.217 li
145.031 470.217 li
cp
156.37 458.878 mo
224.402 458.878 li
224.402 470.217 li
156.37 470.217 li
cp
224.402 458.878 mo
232.906 458.878 li
232.906 470.217 li
224.402 470.217 li
cp
232.906 458.878 mo
258.417 458.878 li
258.417 470.217 li
232.906 470.217 li
cp
258.417 458.878 mo
269.756 458.878 li
269.756 470.217 li
258.417 470.217 li
cp
269.756 458.878 mo
337.787 458.878 li
337.787 470.217 li
269.756 470.217 li
cp
337.787 458.878 mo
346.291 458.878 li
346.291 470.217 li
337.787 470.217 li
cp
346.291 458.878 mo
371.803 458.878 li
371.803 470.217 li
346.291 470.217 li
cp
42.9843 481.556 mo
111.016 481.556 li
111.016 492.894 li
42.9843 492.894 li
cp
111.016 481.556 mo
119.52 481.556 li
119.52 492.894 li
111.016 492.894 li
cp
119.52 481.556 mo
145.031 481.556 li
145.031 492.894 li
119.52 492.894 li
cp
145.031 481.556 mo
156.37 481.556 li
156.37 492.894 li
145.031 492.894 li
cp
156.37 481.556 mo
224.402 481.556 li
224.402 492.894 li
156.37 492.894 li
cp
224.402 481.556 mo
232.906 481.556 li
232.906 492.894 li
224.402 492.894 li
cp
232.906 481.556 mo
258.417 481.556 li
258.417 492.894 li
232.906 492.894 li
cp
258.417 481.556 mo
269.756 481.556 li
269.756 492.894 li
258.417 492.894 li
cp
269.756 481.556 mo
337.787 481.556 li
337.787 492.894 li
269.756 492.894 li
cp
337.787 481.556 mo
346.291 481.556 li
346.291 492.894 li
337.787 492.894 li
cp
346.291 481.556 mo
371.803 481.556 li
371.803 492.894 li
346.291 492.894 li
cp
42.9843 504.233 mo
111.016 504.233 li
111.016 515.571 li
42.9843 515.571 li
cp
111.016 504.233 mo
119.52 504.233 li
119.52 515.571 li
111.016 515.571 li
cp
119.52 504.233 mo
145.031 504.233 li
145.031 515.571 li
119.52 515.571 li
cp
145.031 504.233 mo
156.37 504.233 li
156.37 515.571 li
145.031 515.571 li
cp
156.37 504.233 mo
224.402 504.233 li
224.402 515.571 li
156.37 515.571 li
cp
224.402 504.233 mo
232.906 504.233 li
232.906 515.571 li
224.402 515.571 li
cp
232.906 504.233 mo
258.417 504.233 li
258.417 515.571 li
232.906 515.571 li
cp
258.417 504.233 mo
269.756 504.233 li
269.756 515.571 li
258.417 515.571 li
cp
269.756 504.233 mo
337.787 504.233 li
337.787 515.571 li
269.756 515.571 li
cp
337.787 504.233 mo
346.291 504.233 li
346.291 515.571 li
337.787 515.571 li
cp
346.291 504.233 mo
371.803 504.233 li
371.803 515.571 li
346.291 515.571 li
cp
42.9843 526.91 mo
111.016 526.91 li
111.016 538.248 li
42.9843 538.248 li
cp
111.016 526.91 mo
119.52 526.91 li
119.52 538.248 li
111.016 538.248 li
cp
119.52 526.91 mo
145.031 526.91 li
145.031 538.248 li
119.52 538.248 li
cp
145.031 526.91 mo
156.37 526.91 li
156.37 538.248 li
145.031 538.248 li
cp
156.37 526.91 mo
224.402 526.91 li
224.402 538.248 li
156.37 538.248 li
cp
224.402 526.91 mo
232.906 526.91 li
232.906 538.248 li
224.402 538.248 li
cp
232.906 526.91 mo
258.417 526.91 li
258.417 538.248 li
232.906 538.248 li
cp
258.417 526.91 mo
269.756 526.91 li
269.756 538.248 li
258.417 538.248 li
cp
269.756 526.91 mo
337.787 526.91 li
337.787 538.248 li
269.756 538.248 li
cp
337.787 526.91 mo
346.291 526.91 li
346.291 538.248 li
337.787 538.248 li
cp
346.291 526.91 mo
371.803 526.91 li
371.803 538.248 li
346.291 538.248 li
cp
42.9843 549.587 mo
111.016 549.587 li
111.016 560.926 li
42.9843 560.926 li
cp
111.016 549.587 mo
119.52 549.587 li
119.52 560.926 li
111.016 560.926 li
cp
119.52 549.587 mo
145.031 549.587 li
145.031 560.926 li
119.52 560.926 li
cp
145.031 549.587 mo
156.37 549.587 li
156.37 560.926 li
145.031 560.926 li
cp
156.37 549.587 mo
224.402 549.587 li
224.402 560.926 li
156.37 560.926 li
cp
224.402 549.587 mo
232.906 549.587 li
232.906 560.926 li
224.402 560.926 li
cp
232.906 549.587 mo
258.417 549.587 li
258.417 560.926 li
232.906 560.926 li
cp
258.417 549.587 mo
269.756 549.587 li
269.756 560.926 li
258.417 560.926 li
cp
269.756 549.587 mo
337.787 549.587 li
337.787 560.926 li
269.756 560.926 li
cp
337.787 549.587 mo
346.291 549.587 li
346.291 560.926 li
337.787 560.926 li
cp
346.291 549.587 mo
371.803 549.587 li
371.803 560.926 li
346.291 560.926 li
cp
42.9843 572.264 mo
111.016 572.264 li
111.016 583.603 li
42.9843 583.603 li
cp
111.016 572.264 mo
119.52 572.264 li
119.52 583.603 li
111.016 583.603 li
cp
119.52 572.264 mo
145.031 572.264 li
145.031 583.603 li
119.52 583.603 li
cp
145.031 572.264 mo
156.37 572.264 li
156.37 583.603 li
145.031 583.603 li
cp
156.37 572.264 mo
224.402 572.264 li
224.402 583.603 li
156.37 583.603 li
cp
224.402 572.264 mo
232.906 572.264 li
232.906 583.603 li
224.402 583.603 li
cp
232.906 572.264 mo
258.417 572.264 li
258.417 583.603 li
232.906 583.603 li
cp
258.417 572.264 mo
269.756 572.264 li
269.756 583.603 li
258.417 583.603 li
cp
269.756 572.264 mo
337.787 572.264 li
337.787 583.603 li
269.756 583.603 li
cp
337.787 572.264 mo
346.291 572.264 li
346.291 583.603 li
337.787 583.603 li
cp
346.291 572.264 mo
371.803 572.264 li
371.803 583.603 li
346.291 583.603 li
false sop
0 0 0 .15 cmyk
f
1 lw
10 ml
false sadj
119.52 310.977 mo
119.52 300.638 li
0 0 0 0 cmyk
@
145.031 310.977 mo
145.031 300.638 li
@
232.906 310.977 mo
232.906 300.638 li
@
258.417 310.977 mo
258.417 300.638 li
@
119.52 333.654 mo
119.52 323.315 li
@
145.031 333.654 mo
145.031 323.315 li
@
232.906 333.654 mo
232.906 323.315 li
@
258.417 333.654 mo
258.417 323.315 li
@
119.52 356.331 mo
119.52 345.993 li
@
145.031 356.331 mo
145.031 345.993 li
@
232.906 356.331 mo
232.906 345.993 li
@
258.417 356.331 mo
258.417 345.993 li
@
119.52 379.008 mo
119.52 368.67 li
@
145.031 379.008 mo
145.031 368.67 li
@
232.906 379.008 mo
232.906 368.67 li
@
258.417 379.008 mo
258.417 368.67 li
@
119.52 401.685 mo
119.52 391.347 li
@
145.031 401.685 mo
145.031 391.347 li
@
232.906 401.685 mo
232.906 391.347 li
@
258.417 401.685 mo
258.417 391.347 li
@
119.52 424.363 mo
119.52 414.024 li
@
145.031 424.363 mo
145.031 414.024 li
@
232.906 424.363 mo
232.906 414.024 li
@
258.417 424.363 mo
258.417 414.024 li
@
119.52 447.04 mo
119.52 436.701 li
@
145.031 447.04 mo
145.031 436.701 li
@
232.906 447.04 mo
232.906 436.701 li
@
258.417 447.04 mo
258.417 436.701 li
@
119.52 469.717 mo
119.52 459.378 li
@
145.031 469.717 mo
145.031 459.378 li
@
232.906 469.717 mo
232.906 459.378 li
@
258.417 469.717 mo
258.417 459.378 li
@
119.52 492.394 mo
119.52 482.056 li
@
145.031 492.394 mo
145.031 482.056 li
@
232.906 492.394 mo
232.906 482.056 li
@
258.417 492.394 mo
258.417 482.056 li
@
119.52 515.071 mo
119.52 504.733 li
@
145.031 515.071 mo
145.031 504.733 li
@
232.906 515.071 mo
232.906 504.733 li
@
258.417 515.071 mo
258.417 504.733 li
@
119.52 537.748 mo
119.52 527.41 li
@
145.031 537.748 mo
145.031 527.41 li
@
232.906 537.748 mo
232.906 527.41 li
@
258.417 537.748 mo
258.417 527.41 li
@
119.52 560.426 mo
119.52 550.087 li
@
145.031 560.426 mo
145.031 550.087 li
@
232.906 560.426 mo
232.906 550.087 li
@
258.417 560.426 mo
258.417 550.087 li
@
119.52 583.103 mo
119.52 572.764 li
@
145.031 583.103 mo
145.031 572.764 li
@
232.906 583.103 mo
232.906 572.764 li
@
258.417 583.103 mo
258.417 572.764 li
@
346.291 310.977 mo
346.291 300.638 li
0 0 0 0 cmyk
@
346.291 333.654 mo
346.291 323.315 li
@
346.291 356.331 mo
346.291 345.993 li
@
346.291 379.008 mo
346.291 368.67 li
@
346.291 401.685 mo
346.291 391.347 li
@
346.291 424.363 mo
346.291 414.024 li
@
346.291 447.04 mo
346.291 436.701 li
@
346.291 469.717 mo
346.291 459.378 li
@
346.291 492.394 mo
346.291 482.056 li
@
346.291 515.071 mo
346.291 504.733 li
@
346.291 537.748 mo
346.291 527.41 li
@
346.291 560.426 mo
346.291 550.087 li
@
346.291 583.103 mo
346.291 572.764 li
@
371.803 310.977 mo
371.803 300.638 li
0 0 0 .1 cmyk
@
371.803 333.654 mo
371.803 323.315 li
@
371.803 356.331 mo
371.803 345.993 li
@
371.803 379.008 mo
371.803 368.67 li
@
371.803 401.685 mo
371.803 391.347 li
@
371.803 424.363 mo
371.803 414.024 li
@
371.803 447.04 mo
371.803 436.701 li
@
371.803 469.717 mo
371.803 459.378 li
@
371.803 492.394 mo
371.803 482.056 li
@
371.803 515.071 mo
371.803 504.733 li
@
371.803 537.748 mo
371.803 527.41 li
@
371.803 560.426 mo
371.803 550.087 li
@
371.803 583.103 mo
371.803 572.764 li
@
346.291 322.315 mo
346.291 311.977 li
0 0 0 .15 cmyk
@
371.803 322.315 mo
371.803 311.977 li
@
346.291 344.993 mo
346.291 334.654 li
@
371.803 344.993 mo
371.803 334.654 li
@
346.291 367.67 mo
346.291 357.331 li
@
371.803 367.67 mo
371.803 357.331 li
@
346.291 390.347 mo
346.291 380.008 li
@
371.803 390.347 mo
371.803 380.008 li
@
346.291 413.024 mo
346.291 402.685 li
@
371.803 413.024 mo
371.803 402.685 li
@
346.291 435.701 mo
346.291 425.363 li
@
371.803 435.701 mo
371.803 425.363 li
@
346.291 458.378 mo
346.291 448.04 li
@
371.803 458.378 mo
371.803 448.04 li
@
346.291 481.056 mo
346.291 470.717 li
@
371.803 481.056 mo
371.803 470.717 li
@
346.291 503.733 mo
346.291 493.394 li
@
371.803 503.733 mo
371.803 493.394 li
@
346.291 526.41 mo
346.291 516.071 li
@
371.803 526.41 mo
371.803 516.071 li
@
346.291 549.087 mo
346.291 538.748 li
@
371.803 549.087 mo
371.803 538.748 li
@
346.291 571.764 mo
346.291 561.426 li
@
371.803 571.764 mo
371.803 561.426 li
@
346.291 594.441 mo
346.291 584.103 li
@
371.803 594.441 mo
371.803 584.103 li
@
345.791 594.941 mo
372.303 594.941 li
@
42.4843 594.941 mo
111.016 594.941 li
0 0 0 .1 cmyk
@
111.016 594.941 mo
119.02 594.941 li
@
145.531 594.941 mo
156.37 594.941 li
@
156.37 594.941 mo
224.402 594.941 li
@
224.402 594.941 mo
232.406 594.941 li
@
258.917 594.941 mo
269.756 594.941 li
@
269.756 594.941 mo
337.787 594.941 li
@
337.787 594.941 mo
345.791 594.941 li
@
119.52 322.315 mo
119.52 311.977 li
0 0 0 .15 cmyk
@
145.031 322.315 mo
145.031 311.977 li
@
232.906 322.315 mo
232.906 311.977 li
@
258.417 322.315 mo
258.417 311.977 li
@
119.52 344.993 mo
119.52 334.654 li
@
145.031 344.993 mo
145.031 334.654 li
@
232.906 344.993 mo
232.906 334.654 li
@
258.417 344.993 mo
258.417 334.654 li
@
119.52 367.67 mo
119.52 357.331 li
@
145.031 367.67 mo
145.031 357.331 li
@
232.906 367.67 mo
232.906 357.331 li
@
258.417 367.67 mo
258.417 357.331 li
@
119.52 390.347 mo
119.52 380.008 li
@
145.031 390.347 mo
145.031 380.008 li
@
232.906 390.347 mo
232.906 380.008 li
@
258.417 390.347 mo
258.417 380.008 li
@
119.52 413.024 mo
119.52 402.685 li
@
145.031 413.024 mo
145.031 402.685 li
@
232.906 413.024 mo
232.906 402.685 li
@
258.417 413.024 mo
258.417 402.685 li
@
119.52 435.701 mo
119.52 425.363 li
@
145.031 435.701 mo
145.031 425.363 li
@
232.906 435.701 mo
232.906 425.363 li
@
258.417 435.701 mo
258.417 425.363 li
@
119.52 458.378 mo
119.52 448.04 li
@
145.031 458.378 mo
145.031 448.04 li
@
232.906 458.378 mo
232.906 448.04 li
@
258.417 458.378 mo
258.417 448.04 li
@
119.52 481.056 mo
119.52 470.717 li
@
145.031 481.056 mo
145.031 470.717 li
@
232.906 481.056 mo
232.906 470.717 li
@
258.417 481.056 mo
258.417 470.717 li
@
119.52 503.733 mo
119.52 493.394 li
@
145.031 503.733 mo
145.031 493.394 li
@
232.906 503.733 mo
232.906 493.394 li
@
258.417 503.733 mo
258.417 493.394 li
@
119.52 526.41 mo
119.52 516.071 li
@
145.031 526.41 mo
145.031 516.071 li
@
232.906 526.41 mo
232.906 516.071 li
@
258.417 526.41 mo
258.417 516.071 li
@
119.52 549.087 mo
119.52 538.748 li
@
145.031 549.087 mo
145.031 538.748 li
@
232.906 549.087 mo
232.906 538.748 li
@
258.417 549.087 mo
258.417 538.748 li
@
119.52 571.764 mo
119.52 561.426 li
@
145.031 571.764 mo
145.031 561.426 li
@
232.906 571.764 mo
232.906 561.426 li
@
258.417 571.764 mo
258.417 561.426 li
@
119.52 594.441 mo
119.52 584.103 li
@
145.031 594.441 mo
145.031 584.103 li
@
232.906 594.441 mo
232.906 584.103 li
@
258.417 594.441 mo
258.417 584.103 li
@
119.02 594.941 mo
145.531 594.941 li
@
232.406 594.941 mo
258.917 594.941 li
@
true sop
0 0 0 1 cmyk
%ADOBeginSubsetFont: GoudyOldStyleT-Bold AddGlyphs
%ADOt1write: (1.0.21)
%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.
systemdict begin
FKAHJM+GoudyOldStyleT-Bold dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/M <1C60D8A8C9B59A8D8892F340614D8F7809B5B049CCD97DAA6B3B0A54C665
E02A03F3F68B51D779AB484D13E68A0BBCFAF55467863AA2B7D15EE4A806565B
B698F151206C067D07F7EE527FE62E12C5EBBE547D6FB45B27447931C52C5DC6
5800C1DA1E6592A31195E85B4FA4FDBEB122EAC0F86163921B8063696B729945
F49E31EBE92425157B5461F6790D80C5632A10ED165B236FB2FF72BB103173B0
EF29F79ABC3E58AAAF00D3A383CA36CEB7ACE49EBB9626B367115A759AA7CE6E
806E94B20711ACD66E52C7FF6D642163561B417F2C1BBAD2A24B909015433C0B
789EDCA0E4F795C481A1FE100A4BAFA684E6362BCD1B8CD9F59B712B733DF5D5
315EFC6EABB8EAAD8CC57C06A877E463FFA7A04A1C769082633F346FA9EE4A9B
2893065ACE2A762CB2E653AEDF9C05498278D015877770CCFDB0A471E4051D12
0D3CE12C388B6E276AF3DE3917F794C7A6C72ECCF3132318B7C4597FE96BC533
37C0206E3152B40855BE2E7CEC657A02654E637D6C09050DDC172464C474E8F1
AB86AFD6E31933DC70C11AE815DB8302AC385CD13B2D73949ACECC46745C3E3A
3E8966E161> |-
/c <1C60D8A8C9B703FF3C8D3F7851200293A8BF05A9DCBF781E2DEFC4A0EB6C
9242672FB7BD56F16FF936F10FA60F36528A7838874F4AC67A13584D149FC9CF
4FF448A7CC99F492651DB12AF5190AE0BBAA295254F86067153901ED3FFB4A56
39A0AFE59FC9D8E49E3332EBA7D5DC24E04DA54A21D38D1F121A4ACC3A154BD1
02E08D931111FA4F3B0BCE41302C0865E13EEC7274789BE354> |-
/f <1C60D8A8C9B836A0C1B02497356C1AC20F7D5E262C9CEEEA08EEBAF7614F
D3DF1DF9EA40F586FB929C7E315CB9BD0EA8D708FC330696235102FE6A12E2BC
04BF2498064382E6A7951C7F1BB40CC5120FB3EACDCDBB11C5CD63EF8ACA8D8E
F2D51689F7FC54734F635B81A701B8DA52588716647F5073CA54BC32B76C323C
18A9B8E4952452A1E44260DDAEB8ED5379414FBA5D2538873501CDE765F2663C
D4FBC5E7A058E33C0BD97E30B1CD23968AD3BDAEE98BD527698CDAA0BC9F4788
C94B41DB341279A95C84A4F0187699899668069D4DE27B9A2B47D0F3583B5918
2796DD0DDB09CCE285D51F1D741EE808A9F6AD303ACAD6CEBBC9296775321DBD
A1338F86AB0BAF48FBC7FB9B004AC4C92F4A71E0E0AAD5B74E04A6C9B54BC0C1
3719D0C1285C76CF92> |-
/h <1C60D8A8C9B7931D875661108F978AE391C64C54E083B0B8843F96A3033D
DE8BA1B5B35106644BB12F28303790DC384BA827C0A2129ABA0A651950498D8A
DEC8EB2FE760E4A5FD225AF19AD0A3B1EFE6C3DF3863A05962D7493463903393
D06D96C95DB3FCD779F407CFDEB096629854B1FD4DF1043D58F7A86168F5079D
8626AABC7C0E11847960741F38A23AB1A96E5F0481CB41E18933BBA44188F4A4
C9735BAA85D1DB8B8981E313BFFAB57850F06A08AD8EFC90362FFD188ECDDFF9
C79B30F9B8DD085007BE3FB4330C4835372D9531E8ED770188B264FD24E4611A
44852B010B3EE474FFBB08F5A30F404E9E9BE8CC31575845B1A30D3E38B30B16
6C505C09BB0B8CF51BDE663FF4F18DEF38948FE936FD8C9EFDE3ABD5AF163DC1
3FE398FB55E0361125A9A20B3E097547AFB133359F224165C4940CCE9D2F39> |-
/i <1C60D8A8C9B8567786B20055373C74D07B27076998CC61C5F6467723A0E4
27A3DFAC3AD268B4F9298F3FBD7DFC17FA2F2B9BE0F2C0ED92EF6686C27AE839
E1C850402F8E735FA010A57E0DA8A9838D9BC59A4F1BD83C57241D6797DDADF6
5C300D4C44F1AC98692C8F75FCB84032FDCA1FFCD798B818E8EA7CB5533B3511
7368566DEBBD8A8E732A09A9C85DD19B199A7B806EFB263DE3B30C94951E37A5
C13186BE122228F1406041E1B69F07954DF4DA9FD233B76C77244A96BDA86ECB
B65ED5A028AE0BCD4515A10842564EB62F2B4377543D586F7BAD2714AE10DE67
2102B23BB6FB88FFB97BF733AAF9EC1F926BF634A2FD> |-
/s <1C60D8A8C9B81F2C1A16F0C67657BC6A3D04A3A25D2956ED0411B7F1AFE2
CDB8247BFA269CFC416C45C0AFF40800290682AAF6D60973CD6E4ADA6EB7D7D8
507497DEBD97577B707644689A22A00892E7307C227108D481E439451AB1B528
61D577049F9C35309359585418139315C6F06D23722DB9EC4FD49C43B1453A82
3011B47B792EB3942A83C03F2481C8AB513F8D0718AD619D64B962E1509339E2
B53A1EBF6379DEA03E5EF71B71EF0C0E2117C9E5C92D10413DF89465344E701D
3C51F4F621794F87FB4B4B4EBC61CA7A1E437948006C479E785EE8DD016C7EBB
DC183E89F105147D5C7732469FF8FCD705E266B6A480E788FBA6E290AE4A> |-
/t <1C60D8A8C9B82BC33A00A5F5803EC85895FBB453816701D62756C9E6EEE6
9D138AE4D17CFC31F910BCB5188D7F642A2D2297F79954BF3601B28C87F57D11
2B5E0A9F73173825B27BE00057466F4C401E2AD22C6836640073278861F14C76
9AC6C8A42D03C261204A57851B05038C6CE919C41DE8A9F73CED22D3B017E964
67CAEAB88CB9344C4D7BBA5F6D8692C628AC2BC94EA3862CCEF4360BE50D346A
D570206F7CD8D6C265DC977698F6ADEA895A9A24> |-
/y <1C60D8A8C9B76C9052023B712D600F697F1BFD0C059BF79B1A3FED4F5683
2CEE256CEE41B99CD3850507E4A973C9FE4C5A4908C34BF8577C2AB100F8CE3B
1A44EA856B32AB7C044B3321D11153929B00EC671EC47EBA8FC2D5674B699E89
41A7DC4F328690A995DC20EF0BB6787C05FAA875C2E360BC8EF83997047FAF74
4C7921ECE552DC3A5D226F757F8BA7713BC60DD529348E2E7BF29A8F9B3FFB2C
2B5C9EF0561FE8B7225BBB7B503B9BD6ECCEBCF7F461B3DC68FDD946009FE621
3D914A70E4D9326F981978C5E9766B8C4BF314B463C540468701EE4E165B21F8
AAE68FE72BD00466938422EEACB94526F7B87BE241EBCCEDD92DDF990BBA48> |-
systemdict /gcheck known {setglobal} if end {end} if
end
FKAHJM+GoudyOldStyleT-Bold /Encoding get
dup 77 /M put
dup 99 /c put
dup 102 /f put
dup 104 /h put
dup 105 /i put
dup 115 /s put
dup 116 /t put
dup 121 /y put
pop
%ADOEndSubsetFont
/FKAHJM+GoudyOldStyleT-Bold*5 
[
70{/.notdef}repeat /F 6{/.notdef}repeat /M 21{/.notdef}repeat /c /d /.notdef 
/f /.notdef /h /i 9{/.notdef}repeat /s /t 4{/.notdef}repeat 
/y 124{/.notdef}repeat /odieresis 9{/.notdef}repeat
] FKAHJM+GoudyOldStyleT-Bold nfnt
FKAHJM+GoudyOldStyleT-Bold*5  [12 0 0 -12 0 0 ]mfnt sfnt
43.4843 298.117 mov
0.0234375 0 121 (Fysis) wsh
FKAHJM+GoudyOldStyleT-Bold*4  [12 0 0 -12 0 0 ]mfnt sfnt
66.4706 298.117 mov
(k) sh
FKAHJM+GoudyOldStyleT-Bold*1  [12 0 0 -12 0 0 ]mfnt sfnt
72.8397 298.117 mov
(a ) sh
FKAHJM+GoudyOldStyleT-Bold*5  [12 0 0 -12 0 0 ]mfnt sfnt
80.9667 298.117 mov
(f) sh
FKAHJM+GoudyOldStyleT-Bold*2  [12 0 0 -12 0 0 ]mfnt sfnt
84.6639 298.117 mov
(\344) sh
FKAHJM+GoudyOldStyleT-Bold*3  [12 0 0 -12 0 0 ]mfnt sfnt
89.7909 298.117 mov
(r) sh
FKAHJM+GoudyOldStyleT-Bold*5  [12 0 0 -12 0 0 ]mfnt sfnt
94.244 298.117 mov
(di) sh
FKAHJM+GoudyOldStyleT-Bold*2  [12 0 0 -12 0 0 ]mfnt sfnt
103.947 298.117 mov
(g) sh
FKAHJM+GoudyOldStyleT-Bold*5  [12 0 0 -12 0 0 ]mfnt sfnt
109.162 298.117 mov
(h) sh
FKAHJM+GoudyOldStyleT-Bold*3  [12 0 0 -12 0 0 ]mfnt sfnt
115.783 298.117 mov
(e) sh
FKAHJM+GoudyOldStyleT-Bold*5  [12 0 0 -12 0 0 ]mfnt sfnt
120.728 298.117 mov
(t) sh
FKAHJM+GoudyOldStyleT-Bold*3  [12 0 0 -12 0 0 ]mfnt sfnt
124.537 298.117 mov
(er) sh
FKAHJM+GoudyOldStyleT-Bold*5  [12 0 0 -12 0 0 ]mfnt sfnt
156.87 298.117 mov
(M) sh
FKAHJM+GoudyOldStyleT-Bold*3  [12 0 0 -12 0 0 ]mfnt sfnt
167.476 298.117 mov
(e) sh
FKAHJM+GoudyOldStyleT-Bold*1  [12 0 0 -12 0 0 ]mfnt sfnt
172.591 298.117 mov
(n) sh
FKAHJM+GoudyOldStyleT-Bold*5  [12 0 0 -12 0 0 ]mfnt sfnt
179.382 298.117 mov
(t) sh
FKAHJM+GoudyOldStyleT-Bold*1  [12 0 0 -12 0 0 ]mfnt sfnt
183.407 298.117 mov
(a) sh
FKAHJM+GoudyOldStyleT-Bold*3  [12 0 0 -12 0 0 ]mfnt sfnt
188.534 298.117 mov
(l) sh
FKAHJM+GoudyOldStyleT-Bold*1  [12 0 0 -12 0 0 ]mfnt sfnt
191.751 298.117 mov
(a ) sh
FKAHJM+GoudyOldStyleT-Bold*5  [12 0 0 -12 0 0 ]mfnt sfnt
199.878 298.117 mov
(f) sh
FKAHJM+GoudyOldStyleT-Bold*2  [12 0 0 -12 0 0 ]mfnt sfnt
203.575 298.117 mov
(\344) sh
FKAHJM+GoudyOldStyleT-Bold*3  [12 0 0 -12 0 0 ]mfnt sfnt
208.702 298.117 mov
(r) sh
FKAHJM+GoudyOldStyleT-Bold*5  [12 0 0 -12 0 0 ]mfnt sfnt
213.155 298.117 mov
(di) sh
FKAHJM+GoudyOldStyleT-Bold*2  [12 0 0 -12 0 0 ]mfnt sfnt
222.858 298.117 mov
(g) sh
FKAHJM+GoudyOldStyleT-Bold*5  [12 0 0 -12 0 0 ]mfnt sfnt
228.073 298.117 mov
(h) sh
FKAHJM+GoudyOldStyleT-Bold*3  [12 0 0 -12 0 0 ]mfnt sfnt
234.694 298.117 mov
(e) sh
FKAHJM+GoudyOldStyleT-Bold*5  [12 0 0 -12 0 0 ]mfnt sfnt
239.64 298.117 mov
(t) sh
FKAHJM+GoudyOldStyleT-Bold*3  [12 0 0 -12 0 0 ]mfnt sfnt
243.448 298.117 mov
(er) sh
270.256 298.117 mov
(S) sh
FKAHJM+GoudyOldStyleT-Bold*2  [12 0 0 -12 0 0 ]mfnt sfnt
276.15 298.117 mov
(o) sh
FKAHJM+GoudyOldStyleT-Bold*5  [12 0 0 -12 0 0 ]mfnt sfnt
282.191 298.117 mov
(ci) sh
FKAHJM+GoudyOldStyleT-Bold*1  [12 0 0 -12 0 0 ]mfnt sfnt
290.4 298.117 mov
(a) sh
FKAHJM+GoudyOldStyleT-Bold*3  [12 0 0 -12 0 0 ]mfnt sfnt
295.527 298.117 mov
(l) sh
FKAHJM+GoudyOldStyleT-Bold*1  [12 0 0 -12 0 0 ]mfnt sfnt
298.744 298.117 mov
(a ) sh
FKAHJM+GoudyOldStyleT-Bold*5  [12 0 0 -12 0 0 ]mfnt sfnt
306.871 298.117 mov
(f) sh
FKAHJM+GoudyOldStyleT-Bold*2  [12 0 0 -12 0 0 ]mfnt sfnt
310.568 298.117 mov
(\344) sh
FKAHJM+GoudyOldStyleT-Bold*3  [12 0 0 -12 0 0 ]mfnt sfnt
315.695 298.117 mov
(r) sh
FKAHJM+GoudyOldStyleT-Bold*5  [12 0 0 -12 0 0 ]mfnt sfnt
320.148 298.117 mov
(di) sh
FKAHJM+GoudyOldStyleT-Bold*2  [12 0 0 -12 0 0 ]mfnt sfnt
329.852 298.117 mov
(g) sh
FKAHJM+GoudyOldStyleT-Bold*5  [12 0 0 -12 0 0 ]mfnt sfnt
335.066 298.117 mov
(h) sh
FKAHJM+GoudyOldStyleT-Bold*3  [12 0 0 -12 0 0 ]mfnt sfnt
341.688 298.117 mov
(e) sh
FKAHJM+GoudyOldStyleT-Bold*5  [12 0 0 -12 0 0 ]mfnt sfnt
346.633 298.117 mov
(t) sh
FKAHJM+GoudyOldStyleT-Bold*3  [12 0 0 -12 0 0 ]mfnt sfnt
350.441 298.117 mov
(er) sh
2 lw
4 ml
true sadj
47.0157 284.465 mo
47.0157 284.465 35.0157 284.465 35.0157 296.465 cv
35.0157 587.945 li
35.0157 587.945 35.0157 599.945 47.0157 599.945 cv
367.787 599.945 li
367.787 599.945 379.787 599.945 379.787 587.945 cv
379.787 296.465 li
379.787 296.465 379.787 284.465 367.787 284.465 cv
47.0157 284.465 li
cp
@
1 lw
10 ml
false sadj
213.225 739.508 mo
373.226 739.508 li
@
213.225 753.682 mo
373.226 753.682 li
@
213.225 796.201 mo
373.226 796.201 li
@
213.225 810.374 mo
374.226 810.374 li
@
213.225 767.855 mo
373.226 767.855 li
@
213.225 782.028 mo
373.226 782.028 li
@
44.4843 739.508 mo
202.536 739.508 li
@
44.4843 753.682 mo
202.536 753.682 li
@
44.4843 767.855 mo
202.536 767.855 li
@
44.4843 782.028 mo
202.536 782.028 li
@
44.4843 796.201 mo
202.536 796.201 li
@
43.4843 810.374 mo
202.536 810.374 li
@
2 lw
4 ml
true sadj
47.0157 709.662 mo
47.0157 709.662 35.0157 709.662 35.0157 721.662 cv
35.0157 803.378 li
35.0157 803.378 35.0157 815.378 47.0157 815.378 cv
367.787 815.378 li
367.787 815.378 379.787 815.378 379.787 803.378 cv
379.787 721.662 li
379.787 721.662 379.787 709.662 367.787 709.662 cv
47.0157 709.662 li
cp
@
1 lw
10 ml
false sadj
404.72 314.311 mo
551.813 314.311 li
@
404.72 328.485 mo
551.813 328.485 li
@
404.72 342.658 mo
551.813 342.658 li
@
404.72 356.831 mo
551.813 356.831 li
@
404.72 371.004 mo
551.813 371.004 li
@
403.72 385.178 mo
552.813 385.178 li
@
2 lw
4 ml
true sadj
407.961 284.465 mo
407.961 284.465 395.961 284.465 395.961 296.465 cv
395.961 378.182 li
395.961 378.182 395.961 390.182 407.961 390.182 cv
548.26 390.182 li
548.26 390.182 560.26 390.182 560.26 378.182 cv
560.26 296.465 li
560.26 296.465 560.26 284.465 548.26 284.465 cv
407.961 284.465 li
cp
@
1 lw
10 ml
false sadj
444.405 810.374 mo
474.587 810.374 li
@
523.776 810.374 mo
553.269 810.374 li
@
404.72 739.508 mo
443.905 739.508 li
@
443.905 739.508 mo
475.087 739.508 li
@
475.087 739.508 mo
523.276 739.508 li
@
523.276 739.508 mo
552.269 739.508 li
@
404.72 753.682 mo
443.905 753.682 li
@
443.905 753.682 mo
475.087 753.682 li
@
475.087 753.682 mo
523.276 753.682 li
@
523.276 753.682 mo
552.269 753.682 li
@
404.72 767.855 mo
443.905 767.855 li
@
443.905 767.855 mo
475.087 767.855 li
@
475.087 767.855 mo
523.276 767.855 li
@
523.276 767.855 mo
552.269 767.855 li
@
404.72 782.028 mo
443.905 782.028 li
@
443.905 782.028 mo
475.087 782.028 li
@
475.087 782.028 mo
523.276 782.028 li
@
523.276 782.028 mo
552.269 782.028 li
@
404.72 796.201 mo
443.905 796.201 li
@
443.905 796.201 mo
475.087 796.201 li
@
475.087 796.201 mo
523.276 796.201 li
@
523.276 796.201 mo
552.269 796.201 li
@
2 lw
4 ml
true sadj
407.961 709.662 mo
407.961 709.662 395.961 709.662 395.961 721.662 cv
395.961 803.378 li
395.961 803.378 395.961 815.378 407.961 815.378 cv
548.26 815.378 li
548.26 815.378 560.26 815.378 560.26 803.378 cv
560.26 721.662 li
560.26 721.662 560.26 709.662 548.26 709.662 cv
407.961 709.662 li
cp
@
1 lw
10 ml
false sadj
141.67 645.965 mo
169.016 645.965 li
@
178.52 645.965 mo
205.866 645.965 li
@
215.37 645.965 mo
242.717 645.965 li
@
252.221 645.965 mo
279.567 645.965 li
@
289.071 645.965 mo
327.756 645.965 li
@
337.26 645.965 mo
373.688 645.965 li
@
141.67 660.138 mo
169.016 660.138 li
@
178.52 660.138 mo
205.866 660.138 li
@
215.37 660.138 mo
242.717 660.138 li
@
252.221 660.138 mo
279.567 660.138 li
@
289.071 660.138 mo
327.756 660.138 li
@
337.26 660.138 mo
373.688 660.138 li
@
141.67 674.311 mo
169.016 674.311 li
@
178.52 674.311 mo
205.866 674.311 li
@
215.37 674.311 mo
242.717 674.311 li
@
252.221 674.311 mo
279.567 674.311 li
@
289.071 674.311 mo
327.756 674.311 li
@
337.26 674.311 mo
373.688 674.311 li
@
141.67 688.485 mo
169.016 688.485 li
@
178.52 688.485 mo
205.866 688.485 li
@
215.37 688.485 mo
242.717 688.485 li
@
252.221 688.485 mo
279.567 688.485 li
@
289.071 688.485 mo
327.756 688.485 li
@
337.26 688.485 mo
374.688 688.485 li
@
44.4843 645.965 mo
132.166 645.965 li
@
44.4843 660.138 mo
132.166 660.138 li
@
44.4843 674.311 mo
132.166 674.311 li
@
43.4843 688.485 mo
132.166 688.485 li
@
2 lw
4 ml
true sadj
47.0157 616.119 mo
47.0157 616.119 35.0157 616.119 35.0157 628.119 cv
35.0157 681.489 li
35.0157 681.489 35.0157 693.489 47.0157 693.489 cv
367.787 693.489 li
367.787 693.489 379.787 693.489 379.787 681.489 cv
379.787 628.119 li
379.787 628.119 379.787 616.119 367.787 616.119 cv
47.0157 616.119 li
cp
@
1 lw
10 ml
false sadj
424.563 645.965 mo
449.575 645.965 li
@
469.417 645.965 mo
494.929 645.965 li
@
528.945 645.965 mo
553.957 645.965 li
@
424.563 660.138 mo
449.075 660.138 li
@
469.917 660.138 mo
494.429 660.138 li
@
529.445 660.138 mo
553.957 660.138 li
@
424.563 674.311 mo
449.575 674.311 li
@
469.417 674.311 mo
494.929 674.311 li
@
528.945 674.311 mo
553.957 674.311 li
@
424.563 688.485 mo
449.075 688.485 li
@
469.917 688.485 mo
494.429 688.485 li
@
529.445 688.485 mo
554.957 688.485 li
@
449.575 645.965 mo
469.417 645.965 li
@
449.575 674.311 mo
469.417 674.311 li
@
494.929 674.311 mo
528.945 674.311 li
@
494.929 645.965 mo
528.945 645.965 li
@
2 lw
4 ml
true sadj
407.961 616.119 mo
407.961 616.119 395.961 616.119 395.961 628.119 cv
395.961 681.489 li
395.961 681.489 395.961 693.489 407.961 693.489 cv
548.26 693.489 li
548.26 693.489 560.26 693.489 560.26 681.489 cv
560.26 628.119 li
560.26 628.119 560.26 616.119 548.26 616.119 cv
407.961 616.119 li
cp
@
1 lw
10 ml
false sadj
452.909 509.902 mo
480.256 509.902 li
@
452.909 524.075 mo
480.256 524.075 li
@
526.61 509.902 mo
550.173 509.902 li
@
404.72 552.422 mo
452.409 552.422 li
@
452.409 552.422 mo
480.756 552.422 li
@
480.756 552.422 mo
517.606 552.422 li
@
517.606 552.422 mo
526.11 552.422 li
@
526.11 552.422 mo
550.173 552.422 li
@
404.72 566.595 mo
452.409 566.595 li
@
452.409 566.595 mo
480.756 566.595 li
@
480.756 566.595 mo
517.606 566.595 li
@
517.606 566.595 mo
526.11 566.595 li
@
526.11 566.595 mo
550.173 566.595 li
@
404.72 580.768 mo
452.409 580.768 li
@
452.409 580.768 mo
480.756 580.768 li
@
480.756 580.768 mo
517.606 580.768 li
@
517.606 580.768 mo
526.11 580.768 li
@
526.11 580.768 mo
550.173 580.768 li
@
403.72 594.941 mo
452.409 594.941 li
@
452.409 594.941 mo
480.756 594.941 li
@
480.756 594.941 mo
517.606 594.941 li
@
517.606 594.941 mo
526.11 594.941 li
@
526.11 594.941 mo
551.173 594.941 li
@
2 lw
4 ml
true sadj
407.961 409.189 mo
407.961 409.189 395.961 409.189 395.961 421.189 cv
395.961 587.945 li
395.961 587.945 395.961 599.945 407.961 599.945 cv
548.26 599.945 li
548.26 599.945 560.26 599.945 560.26 587.945 cv
560.26 421.189 li
560.26 421.189 560.26 409.189 548.26 409.189 cv
407.961 409.189 li
cp
@
.75 lw
480.847 426.24 mo
480.847 437.578 li
492.186 437.578 li
492.186 426.24 li
480.847 426.24 li
cp
@
495.021 426.24 mo
495.021 437.578 li
506.359 437.578 li
506.359 426.24 li
495.021 426.24 li
cp
@
509.194 426.24 mo
509.194 437.578 li
520.532 437.578 li
520.532 426.24 li
509.194 426.24 li
cp
@
452.501 468.759 mo
452.501 480.098 li
463.84 480.098 li
463.84 468.759 li
452.501 468.759 li
cp
@
466.674 468.759 mo
466.674 480.098 li
478.013 480.098 li
478.013 468.759 li
466.674 468.759 li
cp
@
480.847 468.759 mo
480.847 480.098 li
492.186 480.098 li
492.186 468.759 li
480.847 468.759 li
cp
@
509.194 468.759 mo
509.194 480.098 li
520.532 480.098 li
520.532 468.759 li
509.194 468.759 li
cp
@
523.367 468.759 mo
523.367 480.098 li
534.706 480.098 li
534.706 468.759 li
523.367 468.759 li
cp
@
537.54 468.759 mo
537.54 480.098 li
548.879 480.098 li
548.879 468.759 li
537.54 468.759 li
cp
@
452.501 440.366 mo
452.501 451.704 li
463.84 451.704 li
463.84 440.366 li
452.501 440.366 li
cp
@
466.674 440.366 mo
466.674 451.704 li
478.013 451.704 li
478.013 440.366 li
466.674 440.366 li
cp
@
480.847 440.366 mo
480.847 451.704 li
492.186 451.704 li
492.186 440.366 li
480.847 440.366 li
cp
@
509.194 440.366 mo
509.194 451.704 li
520.532 451.704 li
520.532 440.366 li
509.194 440.366 li
cp
@
523.367 440.366 mo
523.367 451.704 li
534.706 451.704 li
534.706 440.366 li
523.367 440.366 li
cp
@
537.54 440.366 mo
537.54 451.704 li
548.879 451.704 li
548.879 440.366 li
537.54 440.366 li
cp
@
480.847 454.539 mo
480.847 465.877 li
492.186 465.877 li
492.186 454.539 li
480.847 454.539 li
cp
@
495.021 454.539 mo
495.021 465.877 li
506.359 465.877 li
506.359 454.539 li
495.021 454.539 li
cp
@
509.194 454.539 mo
509.194 465.877 li
520.532 465.877 li
520.532 454.539 li
509.194 454.539 li
cp
@
%ADOBeginSubsetFont: GoudyOldStyleT-Bold AddGlyphs
%ADOt1write: (1.0.21)
%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.
systemdict begin
FKAHJM+GoudyOldStyleT-Bold dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/u <1C60D8A8C9B7931D88F202942F8C37194ECA44ECF6A4BA2AFF6B3527D20C
EAF09D6BDB630E50BAE42F5733607E911C808DB5BFA141E4E895AD37E332F71B
D3FA7EA46EC4768C935F2CFD14A700062B1FCD886D03EA660BAA266CF1C4F65E
AB9C12EC4A06D23DA8CCC21D32BF12BCC418863E76B75C9AE0A24447DE40A7BB
EC8EF0A51E77DB55C0BB0A1008780DFA0264AC275CB018468DBB0E1CCB9ECCDF
BE37CAA6154F0EF5F731D1F87707E0C770EB573DC57CCFA119DF7E63705ECF8A
BAAB736E6B53F7867FA9A52A371790773A388F6D63F171A7125A502DF9B8F9E7
10EBBA2798F224CED24818C3F9943E82FABC417BBDE3BF8777460D46F8A5EBC4
582931E4C9CA22260391E7ED289DF79144A4891C9E52CF64A52BAE19C72A6D5F> |-
/v <1C60D8A8C9B76D61AE1B3B055B6205EF3D5E52C137A7E3A354F0FDA00507
1FFAC8033C7901DB88FE8D150F669C403C5DE9FC1EE4E0F7DB6670580E40C5A8
6A5CC0C8962005FA1441A9380584FEB74E5214885C36BBB22AB9A0F438CA3FBC
87B4AB6D32B14AFC55EDDD4E14D7826EC54EDE3514303E378C0863BF328E6445
0DEAD164BFE167EDFDC8057E5A57A3F33DF95590B7A45F0AD1E4AAB8E5965B3D
0D161D8D378DF81805BB8AC8222033C08B5B185C35324BA639804467DF594E33
31270E9AC27720C1B0E9FB70E0A2091107220D> |-
/Adieresis <1C60D8A8C9B625CE6441DBD9AEA096C890FDA755C73BE1807DF8
8A8CFA216144F8F1C10BC086419057B2BB3DAC5C85CF21CE2A78679D44D4991D
4DE9F60116DEE1AFF7AEC0C919F43627D345222455CD7A0CDA2CD633A8260ED5
C31BA994D2F7DC81DC9A86B4CD747D1BE1F7C75764EBACA2B96DDA6F8BE27CF8
F8F34BB292DFEF227A9AB5F27A9165C514AE3187212CDE707EA124E18881D4C6
514D062C8E715F821854CE3234BF52E69869583B0654BBB87734A4CA5BAD6B6B
7947A501B9FD8D1BCB3C9A740B0EF9FF26AA57DA0C0B957EE0E8F1864F81F2BF
6453F9865856E9FEC7E908803C3E281428D10C7D71F8505779AB9E798541E11F
1CC739D6B680B93B955012A48582F5DC982D4043C9C9BBC5ECB829BF0D32DACA
92B05278D2A97A6061E3CC3A01AC5201A83A3E28D72783E2CE2FA44F9462CB9D
7CAAAF237D1CB953E4507E6B19FEE423C063156AFCE2C658CF125A3D4249FDE6
58CACB7186C1BA977848CB4345B1A9EA772BA7BD97B93FC6D4C144F7665DBB62
FC56E2EBD24B6D95BBC12873B707BABE09CB1F75F540D28C09692791FCBBDE88
EB53A7CB16AD56250761A635E9F35C3F4FDC7D510BD23D4B52F8602777B62E69
7CE8DD6B697154FB0E9E215483AB376DCB650FBC166AC9AE22F325> |-
systemdict /gcheck known {setglobal} if end {end} if
end
FKAHJM+GoudyOldStyleT-Bold /Encoding get
dup 117 /u put
dup 118 /v put
dup 196 /Adieresis put
pop
%ADOEndSubsetFont
/FKAHJM+GoudyOldStyleT-Bold*5 
[
70{/.notdef}repeat /F 6{/.notdef}repeat /M 21{/.notdef}repeat /c /d /.notdef 
/f /.notdef /h /i 9{/.notdef}repeat /s /t /u 
/v 2{/.notdef}repeat /y 74{/.notdef}repeat /Adieresis 49{/.notdef}repeat /odieresis 9{/.notdef}repeat
] FKAHJM+GoudyOldStyleT-Bold nfnt
FKAHJM+GoudyOldStyleT-Bold*5  [12 0 0 -12 0 0 ]mfnt sfnt
44.4843 723.314 mov
-0.527344 0 (\304v) ash
FKAHJM+GoudyOldStyleT-Bold*3  [12 0 0 -12 0 0 ]mfnt sfnt
57.1346 723.314 mov
(e) sh
FKAHJM+GoudyOldStyleT-Bold*1  [12 0 0 -12 0 0 ]mfnt sfnt
62.2499 723.314 mov
(n) sh
FKAHJM+GoudyOldStyleT-Bold*5  [12 0 0 -12 0 0 ]mfnt sfnt
69.0409 723.314 mov
(ty) sh
FKAHJM+GoudyOldStyleT-Bold*3  [12 0 0 -12 0 0 ]mfnt sfnt
78.0702 723.314 mov
(r) sh
FKAHJM+GoudyOldStyleT-Bold*1  [12 0 0 -12 0 0 ]mfnt sfnt
82.705 723.314 mov
(a) sh
FKAHJM+GoudyOldStyleT-Bold*3  [12 0 0 -12 0 0 ]mfnt sfnt
87.8319 723.314 mov
(r) sh
FKAHJM+GoudyOldStyleT-Bold*2  [12 0 0 -12 0 0 ]mfnt sfnt
92.5253 723.314 mov
(g) sh
FKAHJM+GoudyOldStyleT-Bold*3  [12 0 0 -12 0 0 ]mfnt sfnt
97.7401 723.314 mov
(r) sh
FKAHJM+GoudyOldStyleT-Bold*5  [12 0 0 -12 0 0 ]mfnt sfnt
102.328 723.314 mov
(u) sh
FKAHJM+GoudyOldStyleT-Bold*3  [12 0 0 -12 0 0 ]mfnt sfnt
108.949 723.314 mov
(ppe) sh
FKAHJM+GoudyOldStyleT-Bold*1  [12 0 0 -12 0 0 ]mfnt sfnt
126.779 723.314 mov
(n) sh
GFHGJM+GoudyOldStyleT-Regular*1  [9 0 0 -9 0 0 ]mfnt sfnt
213.225 720.63 mov
-0.127441 0 114 (Krok) wsh
231.089 720.63 mov
(ar) sh
FKAHJM+GoudyOldStyleT-Bold*3  [12 0 0 -12 0 0 ]mfnt sfnt
404.72 298.117 mov
(Spe) sh
FKAHJM+GoudyOldStyleT-Bold*5  [12 0 0 -12 0 0 ]mfnt sfnt
422.088 298.117 mov
(ci) sh
FKAHJM+GoudyOldStyleT-Bold*1  [12 0 0 -12 0 0 ]mfnt sfnt
430.297 298.117 mov
(a) sh
FKAHJM+GoudyOldStyleT-Bold*3  [12 0 0 -12 0 0 ]mfnt sfnt
435.424 298.117 mov
(l) sh
FKAHJM+GoudyOldStyleT-Bold*5  [12 0 0 -12 0 0 ]mfnt sfnt
438.64 298.117 mov
(is) sh
FKAHJM+GoudyOldStyleT-Bold*3  [12 0 0 -12 0 0 ]mfnt sfnt
445.959 298.117 mov
(er) sh
FKAHJM+GoudyOldStyleT-Bold*5  [12 0 0 -12 0 0 ]mfnt sfnt
455.662 298.117 mov
(i) sh
FKAHJM+GoudyOldStyleT-Bold*1  [12 0 0 -12 0 0 ]mfnt sfnt
458.978 298.117 mov
(n) sh
FKAHJM+GoudyOldStyleT-Bold*2  [12 0 0 -12 0 0 ]mfnt sfnt
465.769 298.117 mov
(g) sh
FKAHJM+GoudyOldStyleT-Bold*1  [12 0 0 -12 0 0 ]mfnt sfnt
470.984 298.117 mov
(a) sh
FKAHJM+GoudyOldStyleT-Bold*3  [12 0 0 -12 0 0 ]mfnt sfnt
476.111 298.117 mov
(r) sh
%ADOBeginSubsetFont: GoudyOldStyleT-Bold AddGlyphs
%ADOt1write: (1.0.21)
%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.
systemdict begin
FKAHJM+GoudyOldStyleT-Bold dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/U <1C60D8A8C9B6D24F7C2A28A48CDBA28E1FE028575E54019B51F0229E7D31
A39C1C9275B2CEF0754CF83F6F5E469AE89C01C3664495A34F6038DE308FB53A
E41E02178FD1997608FD142CC2EF9B80BAFAF0EDCF1E2AADCBC732B74345A94C
B6883B035E29DB0C3B3816C1C7E47D5F12C020903AF12B000B500ED21F4C6514
2C77DE0C965D9999C21046973357C6C5DE027444BB86D6C58351BCA77FEB1954
D5CA43B922665BD4A56F9883CF33372E89B7E22B4DBE4FDD616EF3B0CCB1ACA7
2A3B5C33B3D780A0722164877EB3A519D1EE1434D7C9D110878F069751E23093
6945E8F155935EF5E47FA4616F8C5F47F3F7B53A77979F2E065AFA63E46A2AB6
0BDEA214420244F1EC53E8EF9BE8781CE1CE361CDD77213FFBEB47EE45D86113
AA0500563A3F55> |-
systemdict /gcheck known {setglobal} if end {end} if
end
FKAHJM+GoudyOldStyleT-Bold /Encoding get
dup 85 /U put
pop
%ADOEndSubsetFont
/FKAHJM+GoudyOldStyleT-Bold*6 
[
85{/.notdef}repeat /U 170{/.notdef}repeat
] FKAHJM+GoudyOldStyleT-Bold nfnt
FKAHJM+GoudyOldStyleT-Bold*6  [12 0 0 -12 0 0 ]mfnt sfnt
404.72 723.314 mov
(U) sh
FKAHJM+GoudyOldStyleT-Bold*5  [12 0 0 -12 0 0 ]mfnt sfnt
414.306 723.314 mov
(t) sh
FKAHJM+GoudyOldStyleT-Bold*3  [12 0 0 -12 0 0 ]mfnt sfnt
418.162 723.314 mov
(r) sh
FKAHJM+GoudyOldStyleT-Bold*5  [12 0 0 -12 0 0 ]mfnt sfnt
422.75 723.314 mov
-0.0703125 0 115 (ust) wsh
FKAHJM+GoudyOldStyleT-Bold*1  [12 0 0 -12 0 0 ]mfnt sfnt
437.158 723.314 mov
(n) sh
FKAHJM+GoudyOldStyleT-Bold*5  [12 0 0 -12 0 0 ]mfnt sfnt
443.949 723.314 mov
(i) sh
FKAHJM+GoudyOldStyleT-Bold*1  [12 0 0 -12 0 0 ]mfnt sfnt
447.265 723.314 mov
(n) sh
FKAHJM+GoudyOldStyleT-Bold*2  [12 0 0 -12 0 0 ]mfnt sfnt
454.056 723.314 mov
(g) sh
GFHGJM+GoudyOldStyleT-Regular*1  [9 0 0 -9 0 0 ]mfnt sfnt
475.587 734.803 mov
( ) sh
%ADOBeginSubsetFont: GoudyOldStyleT-Regular AddGlyphs
%ADOt1write: (1.0.21)
%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.
systemdict begin
GFHGJM+GoudyOldStyleT-Regular dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/B <1C60D8A8C9B7DF559840DDF2426F012C049188CF7274276AB5F3A3BD2AA2
46945692F0D4DDC4EF55E4B363404E9D27A4645461CB4EBC70077A1167229B35
F985014D7E99F7944506E472A836E046E96A1A1C3E16ACD12A19A5BA2DA20FE3
317B035E3E8E6EA07970D99287B00F5F0144C489F97919E2B42640E48968EC37
38B654EA6143D0EC26EC274FFF69E589458BFD5654D797C14CD500DEA2E1D4F7
3C9439537EDF3CDB10E026CBCFF229482E3E5C3A1B18D0580088B741C4F246D0
7BE2B0A9671D40FD79D732ABE12886A7585CAD4C35EDC7E735E7E488409E732F
39CEE7E5EB922CB146B4BEEE5555001D76CC6D0C7F7B9988A032A8B1458069BE
92C055F12FBFD9F196BDEB446C2602C17F45E35D03C43E422DEEBA334B79A730
0D1FECFA838FC2D64D81071E484358245D8974D8CB3E2CC135E623822ED36176
8E3094> |-
systemdict /gcheck known {setglobal} if end {end} if
end
GFHGJM+GoudyOldStyleT-Regular /Encoding get
dup 66 /B put
pop
%ADOEndSubsetFont
/GFHGJM+GoudyOldStyleT-Regular*3 
[
66{/.notdef}repeat /B /.notdef /D 33{/.notdef}repeat /f 15{/.notdef}repeat /v 
137{/.notdef}repeat
] GFHGJM+GoudyOldStyleT-Regular nfnt
GFHGJM+GoudyOldStyleT-Regular*3  [8 0 0 -8 0 0 ]mfnt sfnt
404.72 806.866 mov
(B) sh
GFHGJM+GoudyOldStyleT-Regular*1  [8 0 0 -8 0 0 ]mfnt sfnt
409.549 806.866 mov
-0.0625 0 115 (elastnin) wsh
GFHGJM+GoudyOldStyleT-Regular*2  [8 0 0 -8 0 0 ]mfnt sfnt
434.291 806.866 mov
(g) sh
GFHGJM+GoudyOldStyleT-Regular*1  [8 0 0 -8 0 0 ]mfnt sfnt
481.897 806.866 mov
(Utmattnin) sh
GFHGJM+GoudyOldStyleT-Regular*2  [8 0 0 -8 0 0 ]mfnt sfnt
515.924 806.866 mov
(g) sh
%ADOBeginSubsetFont: GoudyOldStyleT-Bold AddGlyphs
%ADOt1write: (1.0.21)
%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.
systemdict begin
FKAHJM+GoudyOldStyleT-Bold dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/V <1C60D8A8C9B625CE64DE4300580EDEA9023B95E773A1A8A4B7771E0460B7
C9CC2295B0697519BA2364D5E44E80448FADF9BD356F2C21D1CCFB72FB5539E1
74AF5DF887564EC518BDFFA538FCDF0D51C7173B4E41AF155702A884B49A9B37
5A6D66C688BBDE10771F9DA7513389EAEDCD3BCF5B08AB24D5D26F480466FE86
749A8A268B3EF1B00EADF8EEA72CCAFEC21F866B9B0D7F0CD25DDF0B7D73E82F
6211350417324ECA19AB02CE00473D44E302CDEF96571C46B82F23CD22D2DDAE
CB4F84883F18BD69317CCCA4CD057363BA53A3C74CE853B94B2E2F7B0D30085F
71D138706ACD0840EE7FA333DAADA94C8607CC7B193D937C450CEB2B5DC3CBD6
D085047C9A2F6AE4> |-
systemdict /gcheck known {setglobal} if end {end} if
end
FKAHJM+GoudyOldStyleT-Bold /Encoding get
dup 86 /V put
pop
%ADOEndSubsetFont
/FKAHJM+GoudyOldStyleT-Bold*7 
[
86{/.notdef}repeat /V 169{/.notdef}repeat
] FKAHJM+GoudyOldStyleT-Bold nfnt
FKAHJM+GoudyOldStyleT-Bold*7  [12 0 0 -12 0 0 ]mfnt sfnt
44.4843 629.77 mov
(V) sh
FKAHJM+GoudyOldStyleT-Bold*1  [12 0 0 -12 0 0 ]mfnt sfnt
51.7968 629.77 mov
(a) sh
FKAHJM+GoudyOldStyleT-Bold*3  [12 0 0 -12 0 0 ]mfnt sfnt
56.9237 629.77 mov
(pe) sh
FKAHJM+GoudyOldStyleT-Bold*1  [12 0 0 -12 0 0 ]mfnt sfnt
68.3964 629.77 mov
(n) sh
GFHGJM+GoudyOldStyleT-Regular*2  [9 0 0 -9 0 0 ]mfnt sfnt
142.934 628.731 mov
(V) sh
GFHGJM+GoudyOldStyleT-Regular*1  [9 0 0 -9 0 0 ]mfnt sfnt
148.99 628.731 mov
-0.13623 0 114 (\344rde) wsh
GFHGJM+GoudyOldStyleT-Regular*2  [9 0 0 -9 0 0 ]mfnt sfnt
179.793 628.731 mov
(S) sh
GFHGJM+GoudyOldStyleT-Regular*1  [9 0 0 -9 0 0 ]mfnt sfnt
184.302 628.731 mov
-0.13623 0 97 0.13623 0 (kad) awsh
197.283 628.731 mov
(a) sh
GFHGJM+GoudyOldStyleT-Regular*2  [9 0 0 -9 0 0 ]mfnt sfnt
219.55 628.731 mov
(V) sh
GFHGJM+GoudyOldStyleT-Regular*1  [9 0 0 -9 0 0 ]mfnt sfnt
225.606 628.731 mov
(ikt) sh
%ADOBeginSubsetFont: GoudyOldStyleT-Regular AddGlyphs
%ADOt1write: (1.0.21)
%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.
systemdict begin
GFHGJM+GoudyOldStyleT-Regular dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/A <1C60D8A8C9B64EDFFB3F0C73681EC17D1AEBF687C549D2AC16741A8C70D5
E349852D52E6F6A4E36C8E9EF050A34081B785677FD0614E58D18F1CE6DF0219
BDEDF700962EEE7985A4621A0BD8E172F1DDC2681E48A2FDD4850CACED0DC329
1303FA0093C92BE768CD437F88BD4D13C7E1E7B72FEA6AC7223494408E00E0EE
6233E9BA1FE4F10993F1917056D30D5FB44508E79B9FFA1E6BB33B077331B5E0
5408D0D8A109054317C3DAB1AD90EB5151B5F72E6C5C4AF4A59A0BCEC59584CC
CD7E2B21CF648947E4003BC5E4D6561BD8A3BEEC2B9F897B05451A385BBE9BF5
116C75E69EEA98E5C285A65415622287024C2B427F73B567368181043E820C32
4DE2476E4D6075DBB25E8AAAF7053C8D5E550BCA99C9C6D301AC5D576AD07F83
5362AF6EADA38312A5F471622EE2175056B57B7AD1DF09A2E452DCDEE0B5> |-
/P <1C60D8A8C9B78AC32A973501ED24EA9BD14B686E69963717CD62F3C884C6
6709DB27AB42091EF0207DDC79DFB95EB72305918A84B3CDDECA6F13D00BD49D
F8A62C30A5F26F6B96E2E3C5AC61FF5668BA0C39F6D6C44C4A7138609A5E90D8
46ED78D2CE3E098285DB3522BC588B8A07D893CE517AB94A6384AD3106C7879E
465C081B773C8FBAD09F236D07CFA20C44F9AA860201E6A040076C93892BF52A
083DAFE34BB0A3D555A0B70AD32969214226747692D012DBE7FB09272D7D1C95
C0C40EE7AF8477168F4FDDB28FEC6CEAAB883D895F0BBBF9AF1C49379F2A04EB
0F9832F9885AAF46757C8A73129C97A654262B5C51AE6E19FB7CB7629AA88A4B
6F835F2FFA3173B70F12969632803682> |-
systemdict /gcheck known {setglobal} if end {end} if
end
GFHGJM+GoudyOldStyleT-Regular /Encoding get
dup 65 /A put
dup 80 /P put
pop
%ADOEndSubsetFont
/GFHGJM+GoudyOldStyleT-Regular*4 
[
65{/.notdef}repeat /A 14{/.notdef}repeat /P 175{/.notdef}repeat
] GFHGJM+GoudyOldStyleT-Regular nfnt
GFHGJM+GoudyOldStyleT-Regular*4  [9 0 0 -9 0 0 ]mfnt sfnt
255.836 628.731 mov
(P) sh
GFHGJM+GoudyOldStyleT-Regular*1  [9 0 0 -9 0 0 ]mfnt sfnt
260.6 628.731 mov
(lats) sh
GFHGJM+GoudyOldStyleT-Regular*2  [9 0 0 -9 0 0 ]mfnt sfnt
290.138 628.731 mov
(R) sh
GFHGJM+GoudyOldStyleT-Regular*1  [9 0 0 -9 0 0 ]mfnt sfnt
296.04 628.731 mov
-0.101074 0 99 (\344ck) wsh
GFHGJM+GoudyOldStyleT-Regular*3  [9 0 0 -9 0 0 ]mfnt sfnt
307.681 628.731 mov
(v) sh
GFHGJM+GoudyOldStyleT-Regular*1  [9 0 0 -9 0 0 ]mfnt sfnt
311.43 628.731 mov
(idd) sh
GFHGJM+GoudyOldStyleT-Regular*4  [9 0 0 -9 0 0 ]mfnt sfnt
341.38 628.731 mov
(A) sh
GFHGJM+GoudyOldStyleT-Regular*1  [9 0 0 -9 0 0 ]mfnt sfnt
347.387 628.731 mov
(mmo) sh
FKAHJM+GoudyOldStyleT-Bold*3  [12 0 0 -12 0 0 ]mfnt sfnt
404.72 629.77 mov
(S) sh
FKAHJM+GoudyOldStyleT-Bold*4  [12 0 0 -12 0 0 ]mfnt sfnt
410.615 629.77 mov
(k) sh
FKAHJM+GoudyOldStyleT-Bold*5  [12 0 0 -12 0 0 ]mfnt sfnt
416.779 629.77 mov
(ydd) sh
%ADOBeginSubsetFont: GoudyOldStyleT-Regular AddGlyphs
%ADOt1write: (1.0.21)
%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.
systemdict begin
GFHGJM+GoudyOldStyleT-Regular dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/zero <1C60D8A8C9B7A73DB93B843AF0285C07487F3A3DA2273D060E8046C2B
1D7390F4A4AD7D5F2F0C49D54D3F5F5990848A2C19866A096DDA39C55853F50C
186171F9A92126FAE5351A30F93140F8634B088B644813DF7EAEE402204C7EAA
84217393C6DB8382363754ED5916457211F9629242C7DE91AFA1EE92FA1AC3C2
D3644070D13CCBEA7B870108AE7B5> |-
/one <1C60D8A8C9B7A73DB9E2DF74320C060A6B2C6F350AAD0DE613B21B5FC1
D0A5B5F988A24CE053098C160F78A7ADF854AEAEE17ABA1A360BB09C1E341B43
DD1AF89E399588FA90025B7C430A13AA93364D6BF261C202C89FE481CEA127F4
5CBA5AC11ADA31AEE9E733E794A40B02B9913ADD437225A760AFC03E7C6C3981
92E1225DC02DCA527AE00E94D092CB39C4297AEBD071292D4E4302C347CECD7E
E931BCA5E40DB5D42155BC0C9C28CA> |-
/two <1C60D8A8C9B7A73DB6FCADEB3403AD33D9E0872364CA34D1571C3D3028
D6CCD3E879A2F250B64AB9056D7ACE6A7584701EF2C9FD49F6874EA869CC4125
70275E37E79AA351D99ACADB93765A3FDAC4FAEF5729E267DE2981CE8396736B
E893B5E540B6A2B58360FDAF612BA66E39E5D915D659E1A2E826665FB2E67AB9
A1180B21AF6AA86CB00CA4057AD4A9525E1AA04A6C6161D763442ABBA1A38A19
66C38E0CC13C2187B7A260146FE9D3849C341010CC4F52F6CA82CF2D489FC86D
FA3CAD577F727C9FE2C7B2C9> |-
/three <1C60D8A8C9B7A73DB6AC3391956E26C07AD2942D5A942B7D3689140B
622DA080F4EBB04FDC1331725EDFC11D0E49780405724D87FA5B2620D836C41F
E6240ADB84BEC30D12A7CF1F845D0040B05AE1998BB381825819FD51D70BA8A1
6AA795E74ED659CFEC86CAD41D70478FA8CE8CEB9704AEEE1E399015D514C3D5
952261CAA37084E6D8DD3D16F43DCD6CD2029F83D31ACD45CBE9F77308496B10
C0C692146F0A79C3BF545722DB52DB5DAC37A220DD1FEA656D0AA63462C0C42F
95660C4FA694A4534F05985A32567F28AC9440913C407DDA91775FE1438F5FC8
9B70> |-
/four <1C60D8A8C9B7A73DB6972B5B336571D061D956EBBE05390991DBDA324
24CC370C4878C3C281329EF2834D6C8DB1E7462E5D459F29B6A9676FE389A055
890F37803605D834C1E96C9310F2911ECE20AFD5FE49677C9A004C3FAE24FB00
7C223E51232D64A000133A7878C34C29505D6FC5D05BBE968427FCA291ABC203
B6ECC05C7A100BDC757EB4FFB97EA9D93FAE076DEFC188033DB7296220A176F5
BD7014CAFD9653352D61BECDF7B53870954DB1046025BC9> |-
/five <1C60D8A8C9B7A73DB91C85EF0CFF99AAE55A57F8EAFB6B973B39D7688
C8E6F0D002B683FC3D59E0D1434C102FA7B29EC1EFE668DDFDB44777AB04063D
AD5AA6C459BBF80D96326F4B150B474369FD238F4A83A10534E67B31351AB2AF
A9C5126921AD9E0DFABDAAAB0F6E92C9745CD5C4574979F938FE4E23F5FA2F20
B77F964E7F1F1CFC109F3B9879483A9DB003881C8272803B983BAADA22D96E39
152B3BBA62775E10207FDA25B33E0FB0C95BFF4E4DA475258142D57F9C311054
5F81637799E3BD13EC1F948FC3DB0CF06C4AEA44E1C0843618B86E2> |-
/six <1C60D8A8C9B7A73DB956BAB365E457A90CB7DE2A365C5D515CC80AF229
986530A6C01DDBE0ED6C3749C576F75E2236C563A11B356001AA3AA0805891CB
655ED04EB2AF923DFB0ED33DBE5F7CC60F0F6022198D0794FAF2F5D33EC977EE
22270D8763B75F22CF1746250DDF13C9003D63F7AD926AA6E3D7D8D62A395A26
1AAC79166CEB2A693D38C0CC06073530DE1F4B529A9A44F5851A91C06C82CDB5
50CEDAEF437DFAA62AEF21DDFCF41D70001FB94FEC1BAC> |-
/seven <1C60D8A8C9B7A73DB9E1AF18DD5A15C23E2F98E9DD7A2A5F88ED8E31
302F76BBC94CE78900AF6918809E6D45F1762613BA9747A497C22365AAC91ED0
51C6FBBF652EF434BFDF60D8E719DDAF83230EB1DED8487C66B31D2EEC1EA475
38BF05CD37F5B19A5FD3BE4CC6BBEA12EA931E53712D90D0128F2B9B2F75CA36
5A5344999521527111DD6886BCB3A2C0B95D24B61740670045E9551631711C89
1063982C75CFF180BAB36AFDF2BAFD71249D10CB3CEAD964> |-
/eight <1C60D8A8C9B7A73DB69853566E1BFEEC5A1B12845328DB7C83B85875
7E8123DF59559500A3ED0228B7A6970941ABC01EA24C47AC319DC98D76D2F931
BB87FA21D9A67F77CF9194ABA2E41F049C982418A77B8150F10DEB774B4EA8C9
061B37450160EF099C1EAC56FE5989416466EDA5B83ABC523BCC745CD911A068
14EA151E81CF6DD5D8CFC97BAD20FDAAEAC9F5A0E3B2B11D7920F7395D1C8569
7304F225A39EF0B05DEACCDA6E88307F14E77A9DCFE83A90DC33F1A832EF9F24
8B4949F179D4692E189D64D7836BA0F9D81844EE2C2F2686D7CE3D8224704A0C
FCFDABBB074F963A3C78448FC3518341> |-
/nine <1C60D8A8C9B7A73DB99C434C205214B9F7D628D6F266F376A541B9507
77980DB1E03E3F5F948C9A27F4EF4F30239A6402C4FB92D713E5F5DF9E4E6ED9
DE5BF7138AF27C18B1DCFE95C46968DF26801169DF28992FF3B6EE4BC1BFFCFD
866629D47F09440AB4369E8D240E43564151A2A49150785F786BC03A4F34D161
98E71C95AE917DB7F308C37F0AF5139801059BE0604B2F41CAC9EA80CCB4227C
1A2899C735A89E75548736BE83C4C8D81D1CDA9457ED40B21BB84F87CA5165A8
ACCE02D1D957F4D> |-
/N <1C60D8A8C9B619186C9CC086822ADA30FB961B8D97655F60351DC891F876
F0BCE89D40C583B620C67D00DC13E907684B911AEB269525E3903E4BD57CE55E
05F8393BCCBB68523684BA67ECD2ED7B36D4A1AF43C606D6F86BEDA525C83668
5C99A9008577938D827B1915E97FE93474552B6ACDFF137760715855F38E4D1A
915E5475B6FCDBCAEC18821FDD2F90F6EFFB328412999E1F56AA3A54DF7E8AD7
721FCDB4164519513ED94991652997BE9B98F4B22515AECB1A2A3274251C9B6D
0CFBE8BF73B3D429A5C08434B2485314689F509E1E47285A05414945A60F743F
0C4A1E4A2FA8877F6BA611FE98C00C1E24532EABE3C6EF803A237AC775CE1325
CE3E7CC26ED4CB473E140F1B5E6ACFA7E558A487958A6D4BD41145D264260D1C
A12510E813BAB9EE0A750EE340F1E4D98E1C81F13DAFF5F3AF75FDEF8237EA8B
9B2D4CFE8A4F6FD8633D9F> |-
/T <1C60D8A8C9B7DB13357F755CF669E7C10B62F7A94ADE0ED30AE8BA8E6056
EAF7FB30CF7D82FD2E3C3EE9F360C32A632A4702E03EA8FB832B4CF9626513B9
F329A2867C1F693BFD6BB8B8150408B130E3DEC5CB9348A3459ECF6CE9DBFECA
C055203E7C3CABDE641FF1F4ADF5FD02A5F407DFF5FA7FC017FA74516FBF055F
9E891C9E81291FE3F974B374BD8E888EA9F8F19B9D2A006A5A08389AD5962F9A
B4E45F257F30E563544CE23F149D7C3BBF8E2A992715F0139DACBF1A730A8F02
A9B90472D720BC9E49DD284AA6406CB0B13EA59583522294AFA542B18D7DAD3C
F67612FC728B0C24E70E950174D4DD6B1343E0B29DCCA5FA519109> |-
/y <1C60D8A8C9B734787312EAC22B82B859FD5D25C8176228EDFD669D29A65F
D82FAB6026DB5B49CA4B35043EDA5A74EFBC83E154C5895B04DE3E093DBD5368
FE6E23C39B6F31C1EE6535EA2D866F63AD34379CD0C03659853C467F719045C2
1ACD3310127BEE39BA41E09105F7C75C5B34893940A564FC715397D5F9918B4D
2D6D1BA49F853AE994F18370CFFB97188EDC38DE617786F78F05317DDF51E36F
C4A3ED2E4A481E14CDF3D60A2E6D82E831A18BBFB57ED405981A1B9EDBBF2833
232B17A7FB984AE47AD0BBFDEAAD1A5EAB9708EE864BF092C642CDA6B6C6DB37
CC43111DCC42BC4EBE7B386DEB9E90D92A8678AD74A758AE> |-
systemdict /gcheck known {setglobal} if end {end} if
end
GFHGJM+GoudyOldStyleT-Regular /Encoding get
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 55 /seven put
dup 56 /eight put
dup 57 /nine put
dup 78 /N put
dup 84 /T put
dup 121 /y put
pop
%ADOEndSubsetFont
/GFHGJM+GoudyOldStyleT-Regular*5 
[
48{/.notdef}repeat /zero /one /two /three /four /five /six 
/seven /eight /nine 20{/.notdef}repeat /N 5{/.notdef}repeat /T 36{/.notdef}repeat 
/y 134{/.notdef}repeat
] GFHGJM+GoudyOldStyleT-Regular nfnt
GFHGJM+GoudyOldStyleT-Regular*5  [9 0 0 -9 0 0 ]mfnt sfnt
404.72 642.904 mov
-0.197754 0 (Ty) ash
GFHGJM+GoudyOldStyleT-Regular*1  [9 0 0 -9 0 0 ]mfnt sfnt
413.514 642.904 mov
(p) sh
GFHGJM+GoudyOldStyleT-Regular*5  [9 0 0 -9 0 0 ]mfnt sfnt
415.984 657.077 mov
(N) sh
GFHGJM+GoudyOldStyleT-Regular*4  [9 0 0 -9 0 0 ]mfnt sfnt
463.236 657.077 mov
(P) sh
GFHGJM+GoudyOldStyleT-Regular*2  [9 0 0 -9 0 0 ]mfnt sfnt
512.041 657.077 mov
(V) sh
GFHGJM+GoudyOldStyleT-Regular*1  [9 0 0 -9 0 0 ]mfnt sfnt
518.097 657.077 mov
(ikt) sh
GFHGJM+GoudyOldStyleT-Regular*5  [9 0 0 -9 0 0 ]mfnt sfnt
404.721 671.25 mov
-0.197754 0 (Ty) ash
GFHGJM+GoudyOldStyleT-Regular*1  [9 0 0 -9 0 0 ]mfnt sfnt
413.514 671.25 mov
(p) sh
GFHGJM+GoudyOldStyleT-Regular*5  [9 0 0 -9 0 0 ]mfnt sfnt
415.984 685.423 mov
(N) sh
GFHGJM+GoudyOldStyleT-Regular*4  [9 0 0 -9 0 0 ]mfnt sfnt
463.236 685.423 mov
(P) sh
GFHGJM+GoudyOldStyleT-Regular*2  [9 0 0 -9 0 0 ]mfnt sfnt
512.041 685.423 mov
(V) sh
GFHGJM+GoudyOldStyleT-Regular*1  [9 0 0 -9 0 0 ]mfnt sfnt
518.097 685.423 mov
(ikt) sh
GFHGJM+GoudyOldStyleT-Regular*5  [11 0 0 -11 0 0 ]mfnt sfnt
570.274 63.6985 mov
(1) sh
570.274 87.6985 mov
(2) sh
570.274 111.699 mov
(3) sh
570.274 135.699 mov
(4) sh
570.274 159.699 mov
(5) sh
570.274 183.699 mov
(6) sh
570.274 207.699 mov
(7) sh
570.274 231.699 mov
(8) sh
570.274 255.699 mov
(9) sh
567.787 279.699 mov
-0.526367 0 (10) ash
567.918 303.699 mov
-0.789551 0 (11) ash
567.712 327.699 mov
-0.375977 0 (12) ash
567.682 351.699 mov
-0.316895 0 (13) ash
567.927 375.699 mov
-0.805664 0 (14) ash
567.623 399.699 mov
-0.19873 0 (15) ash
567.865 423.699 mov
-0.682129 0 (16) ash
568.042 447.699 mov
-1.03662 0 (17) ash
567.833 471.699 mov
-0.617676 0 (18) ash
567.787 495.699 mov
-0.526367 0 (19) ash
567.524 519.699 mov
(20) sh
FKAHJM+GoudyOldStyleT-Bold*3  [12 0 0 -12 0 0 ]mfnt sfnt
404.72 422.841 mov
(S) sh
FKAHJM+GoudyOldStyleT-Bold*4  [12 0 0 -12 0 0 ]mfnt sfnt
410.614 422.841 mov
(k) sh
FKAHJM+GoudyOldStyleT-Bold*1  [12 0 0 -12 0 0 ]mfnt sfnt
416.984 422.841 mov
(a) sh
FKAHJM+GoudyOldStyleT-Bold*5  [12 0 0 -12 0 0 ]mfnt sfnt
422.11 422.841 mov
(d) sh
FKAHJM+GoudyOldStyleT-Bold*2  [12 0 0 -12 0 0 ]mfnt sfnt
428.497 422.841 mov
(o) sh
FKAHJM+GoudyOldStyleT-Bold*3  [12 0 0 -12 0 0 ]mfnt sfnt
434.538 422.841 mov
(r) sh
GFHGJM+GoudyOldStyleT-Regular*1  [9 0 0 -9 0 0 ]mfnt sfnt
404.72 435.975 mov
(H) sh
%ADOBeginSubsetFont: GoudyOldStyleT-Regular AddGlyphs
%ADOt1write: (1.0.21)
%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.
systemdict begin
GFHGJM+GoudyOldStyleT-Regular dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/parenleft <1C60D8A8C9B854D0F47482523583E69F4FCCF687B5B6D5F72BD5
69D464F1C901C64CDAAD45D26B350F5A607C921C411F8DFA2659F86323C586E5
631D682A30A9780DED993D30937F16D999A105D5BDD29D906856CBA4CB9ECE04
51E6900FF53EF4F86BFC989E3A705BF144CF> |-
/parenright <1C60D8A8C9B854D09CC7306647E404C1D84B38B0021F2F715DD
786905DB0B4A38976425AEE73B2B953B359C5D3DEB9025ACA27E521EB93DEFE6
E19F9B7610637E56278AA60111E6F35FBA818EEC4D1FFA15B340BA2FCE0401FA
E95FE2B414A561393FF8FBD8907D0F9C8063531A7> |-
/comma <1C60D8A8C9B879BE236062E1301BD2C28A4A06EBC5C60D18FBE8F119
09894C045DBED57607ABA0DE55B8E354A42CCD789B4F0648E9D620215194238E
F550CF2201F5B6BFEC1219CE38A3F1C4B0EF1F5D3AD280E4966B686A89574A92
1DB3B76B96F81B887180> |-
/I <1C60D8A8C9B82281D028177340AF9BBEBB9017667A1ED5AE947BC0CB9A77
38C09D3B46FB94A217FEC40CE97CC5437046E9EEBF33A0F08AC00BF2D6D12763
E7559B97F7FE47F28658785F8B793F2A7325C3D84A9C0CDF8C9CB65187AE6018
40BCBD0112230D74A9A3F01F0E66730471D98CB4E7F7E34A260D443F8774C786
DB2F3D18D742B6ABA20D4C93B199F05A501E26A086F6CBC3DF455CB79ED43FA3
D5AEB2403E415A5943CF80BF29E2860136C482F4469D1B8376FD0D9C> |-
/L <1C60D8A8C9B79B8E96B13F8811CF8F5D565CAA715C47FDA65EA9D249C28A
00FD398BEBBE41B3876A2899AE417E6703816CA10A956ACBA2AF3DE5BA4E2E2E
C527F22D3ACB64AB9D189A7D3B7A566DCE40FC3C32B11C0320436B1C0B5E1E40
88E673EB487B6722CA8613F0D65FCA15EDCB1E61A9F98DEB98A190A5CAEB2544
CB389D8B4048FBA559CDE46D3BBC7C1ED8183B7CD16B066BB4BE4B8AEA4D85C5
558321CA9051BA94CA3F4B8F0300030F25E397BA2E1DAD84553C32C4BEAD86B6
D4BEA8987580F634A114F5456BFA8B> |-
/X <1C60D8A8C9B66621BFCB7E7840ED99ACF0B3D036AF8069C6CD013F86EDD5
F6728869D0174C16903F43C03F2BEE0AF83020F5CB5DBC78A02248B5DFA48EED
76BED6A1F998D84DF883A84661D14B2A632BBE4343713C6CD2B40A0A7B57422A
27FE4F0B6016509798414311609460B2B87F6399B4BA61577A1BE8BD19B06D70
CC8959E755631F874AFDD5029EEBAA67408FB53E14D2C29AC7CBCF2D63E657C3
4A4F8126D9D8841566FDB5905A458C56DC31F214EA8AEC50EBA55484CBCD3AED
DFB0E72D13F487CF68445429A330E9A88DBA261D3BEB69EB148C96F1434AFA3A
EB912AD5EA7A6EAFCDBBF0017D4630895AC7F555FC45509DECA88C874C94FC4E
3E8976206BC691473B732A0DA785E7A153C7E02787EAEB2851D6F12A2C251C36
916B81B151F71DFB3CBB83C93954CD8CBA8CD8D2DD2DE843F23ADBAECAB9D899
01BE918D006C3C27B71D9BAD64555C862B6E8EA4F68EE250A76D0A8DDB820C94
38A18A5502E1FF4413CE3CE27CF3BBB44F246E1330CF8AEE0A54E3E6C7270C24
AC913C8ACFAD45E5C23DC523C11BF4E12B82CD50DC6B6C717575DB2AB191AFA3
8B0BB35813B341B52A105F2AFCF91AD83671C8EC658F7E6AFECFD30467DA88D8
BF7AEACF8822E738C2FC775259> |-
/u <1C60D8A8C9B78D34A56E3698BB4E198C4E335878681512629D6F6E11DE18
5109C4B737B3984ACDE6AED32CF5102BE83703105CD1DA2442F0DEEE86201BDF
0E03235F8922AA0B50457BEA518F288328D958B44165C0D1713076A958A06165
DEE9AC4EE4A46323F0D9A672451B7C7D61539CA501CC61C55E094D7FB54192B8
CF09ED249701518197E1127935A877182F13A65C5D6F696FAB7699784EBD17DD
84A16475535392D3F7D296E51EB691C787ED5127C3C497B2148C0006238BEE23
62CEECBA847E9741DD7DD835F69BC4D4E32AA604556FBABAB1D48C9463A469E4
3236D143F2FA54B79F6632A10D75> |-
systemdict /gcheck known {setglobal} if end {end} if
end
GFHGJM+GoudyOldStyleT-Regular /Encoding get
dup 40 /parenleft put
dup 41 /parenright put
dup 44 /comma put
dup 73 /I put
dup 76 /L put
dup 88 /X put
dup 117 /u put
pop
%ADOEndSubsetFont
/GFHGJM+GoudyOldStyleT-Regular*6 
[
40{/.notdef}repeat /parenleft /parenright 2{/.notdef}repeat /comma 28{/.notdef}repeat /I 2{/.notdef}repeat 
/L 11{/.notdef}repeat /X 28{/.notdef}repeat /u 138{/.notdef}repeat
] GFHGJM+GoudyOldStyleT-Regular nfnt
GFHGJM+GoudyOldStyleT-Regular*6  [9 0 0 -9 0 0 ]mfnt sfnt
411.61 435.975 mov
(u) sh
GFHGJM+GoudyOldStyleT-Regular*3  [9 0 0 -9 0 0 ]mfnt sfnt
416.348 435.975 mov
(v) sh
GFHGJM+GoudyOldStyleT-Regular*6  [9 0 0 -9 0 0 ]mfnt sfnt
420.096 435.975 mov
(u) sh
GFHGJM+GoudyOldStyleT-Regular*1  [9 0 0 -9 0 0 ]mfnt sfnt
424.834 435.975 mov
(d) sh
GFHGJM+GoudyOldStyleT-Regular*4  [9 0 0 -9 0 0 ]mfnt sfnt
404.72 450.148 mov
(A) sh
GFHGJM+GoudyOldStyleT-Regular*1  [9 0 0 -9 0 0 ]mfnt sfnt
410.727 450.148 mov
(rmar) sh
GFHGJM+GoudyOldStyleT-Regular*3  [9 0 0 -9 0 0 ]mfnt sfnt
404.72 464.321 mov
(B) sh
GFHGJM+GoudyOldStyleT-Regular*1  [9 0 0 -9 0 0 ]mfnt sfnt
410.151 464.321 mov
(\345l) sh
GFHGJM+GoudyOldStyleT-Regular*3  [9 0 0 -9 0 0 ]mfnt sfnt
404.72 478.494 mov
(B) sh
GFHGJM+GoudyOldStyleT-Regular*1  [9 0 0 -9 0 0 ]mfnt sfnt
410.151 478.494 mov
(en) sh
GFHGJM+GoudyOldStyleT-Regular*6  [6 0 0 -6 0 0 ]mfnt sfnt
452.909 491.326 mov
(L) sh
GFHGJM+GoudyOldStyleT-Regular*1  [6 0 0 -6 0 0 ]mfnt sfnt
456.175 491.326 mov
(\344tt s\345r ) sh
GFHGJM+GoudyOldStyleT-Regular*6  [6 0 0 -6 0 0 ]mfnt sfnt
471.984 491.326 mov
(\() sh
GFHGJM+GoudyOldStyleT-Regular*2  [6 0 0 -6 0 0 ]mfnt sfnt
473.654 491.326 mov
(/) sh
GFHGJM+GoudyOldStyleT-Regular*6  [6 0 0 -6 0 0 ]mfnt sfnt
476.528 491.326 mov
(\),) sh
GFHGJM+GoudyOldStyleT-Regular*1  [6 0 0 -6 0 0 ]mfnt sfnt
479.657 491.326 mov
( s) sh
GFHGJM+GoudyOldStyleT-Regular*3  [6 0 0 -6 0 0 ]mfnt sfnt
483.184 491.326 mov
(v) sh
GFHGJM+GoudyOldStyleT-Regular*1  [6 0 0 -6 0 0 ]mfnt sfnt
485.683 491.326 mov
0.120117 0 114 (\345rt s\345r) wsh
500.381 491.326 mov
( ) sh
GFHGJM+GoudyOldStyleT-Regular*6  [6 0 0 -6 0 0 ]mfnt sfnt
501.881 491.326 mov
(\(X\)) sh
GFHGJM+GoudyOldStyleT-Regular*3  [8 0 0 -8 0 0 ]mfnt sfnt
404.72 506.393 mov
(B) sh
GFHGJM+GoudyOldStyleT-Regular*1  [8 0 0 -8 0 0 ]mfnt sfnt
409.548 506.393 mov
(l\366dnin) sh
GFHGJM+GoudyOldStyleT-Regular*2  [8 0 0 -8 0 0 ]mfnt sfnt
430.7 506.393 mov
(g) sh
GFHGJM+GoudyOldStyleT-Regular*1  [8 0 0 -8 0 0 ]mfnt sfnt
434.052 506.393 mov
0.191406 0 116 -0.0625 0 (sta) awsh
442.622 506.393 mov
(kt) sh
GFHGJM+GoudyOldStyleT-Regular*3  [8 0 0 -8 0 0 ]mfnt sfnt
489.165 506.393 mov
(B) sh
GFHGJM+GoudyOldStyleT-Regular*1  [8 0 0 -8 0 0 ]mfnt sfnt
493.993 506.393 mov
(lod) sh
GFHGJM+GoudyOldStyleT-Regular*3  [8 0 0 -8 0 0 ]mfnt sfnt
504.231 506.393 mov
(f) sh
GFHGJM+GoudyOldStyleT-Regular*1  [8 0 0 -8 0 0 ]mfnt sfnt
506.587 506.393 mov
(\366rl) sh
GFHGJM+GoudyOldStyleT-Regular*6  [8 0 0 -8 0 0 ]mfnt sfnt
515.426 506.393 mov
(u) sh
GFHGJM+GoudyOldStyleT-Regular*1  [8 0 0 -8 0 0 ]mfnt sfnt
519.637 506.393 mov
-0.0625 0 (st) ash
GFHGJM+GoudyOldStyleT-Regular*6  [8 0 0 -8 0 0 ]mfnt sfnt
404.72 520.567 mov
(I) sh
GFHGJM+GoudyOldStyleT-Regular*1  [8 0 0 -8 0 0 ]mfnt sfnt
407.345 520.567 mov
(n) sh
GFHGJM+GoudyOldStyleT-Regular*3  [8 0 0 -8 0 0 ]mfnt sfnt
411.747 520.567 mov
(f) sh
GFHGJM+GoudyOldStyleT-Regular*1  [8 0 0 -8 0 0 ]mfnt sfnt
413.942 520.567 mov
(ektion) sh
GFHGJM+GoudyOldStyleT-Regular*3  [9 0 0 -9 0 0 ]mfnt sfnt
404.719 535.187 mov
(B) sh
GFHGJM+GoudyOldStyleT-Regular*1  [9 0 0 -9 0 0 ]mfnt sfnt
410.151 535.187 mov
-0.0703125 0 115 (est\345ende) wsh
440.618 535.187 mov
( men) sh
gsave % PSGState
-1785.83 -71.9996 mo
0 -71.9996 li
0 913.89 li
-1785.83 913.89 li
clp
grestore % PSGState
gsave % PSGState
0 -71.9996 mo
1785.83 -71.9996 li
1785.83 913.89 li
0 913.89 li
clp
grestore % PSGState
gsave % PSGState
-1785.83 -71.9996 mo
0 -71.9996 li
0 913.89 li
-1785.83 913.89 li
clp
grestore % PSGState
gsave % PSGState
0 -71.9996 mo
1785.83 -71.9996 li
1785.83 913.89 li
0 913.89 li
clp
grestore % PSGState
gsave % PSGState
-1785.83 -71.9996 mo
0 -71.9996 li
0 913.89 li
-1785.83 913.89 li
clp
grestore % PSGState
gsave % PSGState
0 -71.9996 mo
1785.83 -71.9996 li
1785.83 913.89 li
0 913.89 li
clp
grestore % PSGState
% page clip
grestore
grestore % PSGState
/FKAHJM+GoudyOldStyleT-Bold*1 ufnt
/FKAHJM+GoudyOldStyleT-Bold*2 ufnt
/FKAHJM+GoudyOldStyleT-Bold*3 ufnt
/FKAHJM+GoudyOldStyleT-Bold*4 ufnt
/FKAHJM+GoudyOldStyleT-Bold*5 ufnt
/FKAHJM+GoudyOldStyleT-Bold*6 ufnt
/FKAHJM+GoudyOldStyleT-Bold*7 ufnt
/GFHGJM+GoudyOldStyleT-Regular*1 ufnt
/GFHGJM+GoudyOldStyleT-Regular*2 ufnt
/GFHGJM+GoudyOldStyleT-Regular*3 ufnt
/GFHGJM+GoudyOldStyleT-Regular*4 ufnt
/GFHGJM+GoudyOldStyleT-Regular*5 ufnt
/GFHGJM+GoudyOldStyleT-Regular*6 ufnt
/GMNGJM+BodoniMTBlack*1 ufnt
/GEEGJM+Garamond-Bold*1 ufnt
Adobe_AGM_Core/AGMCORE_save get restore
%%PageTrailer
Adobe_AGM_Image/page_trailer get exec
Adobe_CoolType_Core/page_trailer get exec
Adobe_AGM_Core/page_trailer get exec
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/doc_trailer get exec
Adobe_CoolType_Core/doc_trailer get exec
Adobe_AGM_Core/doc_trailer get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image (1.0 0)
%%+ procset Adobe_CoolType_Utility_T42 (1.0 0)
%%+ procset Adobe_CoolType_Utility_MAKEOCF (1.19 0)
%%+ procset Adobe_CoolType_Core (2.23 0)
%%+ procset Adobe_AGM_Core (2.0 0)
%%+ procset Adobe_AGM_Utils (1.0 0)
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
